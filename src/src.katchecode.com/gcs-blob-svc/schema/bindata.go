// Code generated by go-bindata. DO NOT EDIT.
// sources:
// blob/blob.graphql
// cursor.graphql
// datetime/datetime.graphql
// schema.graphql
// url/url.graphql

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataBlobBlobgraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4b\x4e\xc3\x30\x10\xdd\xfb\x14\xaf\xca\x06\xae\xe0\x1d\x05\x16" +
	"\x2c\x60\xd3\xf6\x00\x6e\x3c\x0a\x96\xdc\x19\xcb\x4c\x24\x22\xc4\xdd\x91\xa7\x34\x09\x0a\x3b\xeb\x79\xde\x57\xa7" +
	"\x42\xd8\x67\x39\xe3\xcb\x01\x1c\x2e\xe4\x71\xd0\x9a\x78\xd8\x39\x60\xac\xd9\xe3\x54\xb3\x03\x3e\xd2\xc0\x14\x4f" +
	"\x0d\x38\xdc\x9e\x0e\xe8\x85\x95\x58\x8f\x53\x99\x89\x0d\x0d\xfd\x3b\x3d\x0a\x6b\x95\xbc\x86\x2b\x05\xa5\xf8\xa0" +
	"\x1e\x4f\x41\xe9\x98\x2e\xb4\x48\x3c\x73\x2f\x31\xf1\x30\xdf\x7f\x3b\x67\xe9\x66\x3b\x8b\x78\x8b\xd4\xe2\xd1\x67" +
	"\x49\x35\x68\x12\x5e\x04\x77\x8d\xd7\xc1\x98\xaf\xa3\x86\x73\xa6\xdf\x7a\x1d\x9a\x57\x99\xee\x54\xde\xd6\x3d\xef" +
	"\xbd\x0d\x60\xff\x91\x32\x29\x79\xec\x45\x32\x05\x76\x1d\x4c\x2d\x71\x19\xd5\xae\x5e\xec\x75\x15\xfb\xbb\xd6\x55" +
	"\x7e\xbb\x86\xe1\xff\xed\xb1\x22\x6c\xba\x37\xdf\x9f\x00\x00\x00\xff\xff\x82\xb2\x76\x51\x9b\x01\x00\x00")

func bindataBlobBlobgraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataBlobBlobgraphql,
		"blob/blob.graphql",
	)
}



func bindataBlobBlobgraphql() (*asset, error) {
	bytes, err := bindataBlobBlobgraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "blob/blob.graphql",
		size: 411,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1521937611, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCursorgraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xc8\x31\x0e\x80\x20\x0c\x05\xd0\xbd\xa7\xf8\xe7\x60\xd4\x89\x59\x2f" +
	"\xc0\xd0\x90\x46\x6c\x49\x29\x2e\xc6\xbb\x1b\xdd\x5e\x1e\x91\x68\x9f\x81\x75\xfa\x30\xcf\xbf\x6f\x02\x7a\xa9\xbc" +
	"\xdb\xc1\x9a\xb0\x85\x8b\xd6\xef\x9c\x2f\xb1\x39\x12\x16\xb3\xc6\x45\x09\x68\x72\x4a\x24\x64\x0d\x7a\xe8\x0d\x00" +
	"\x00\xff\xff\x9b\xcc\x0f\x4a\x4d\x00\x00\x00")

func bindataCursorgraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCursorgraphql,
		"cursor.graphql",
	)
}



func bindataCursorgraphql() (*asset, error) {
	bytes, err := bindataCursorgraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "cursor.graphql",
		size: 77,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1521865052, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatetimeDatetimegraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x70\x49\x2c\x49\x0d\xc9\xcc\x4d\xe5\x02\x04" +
	"\x00\x00\xff\xff\xa9\xc1\xe5\x7a\x10\x00\x00\x00")

func bindataDatetimeDatetimegraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatetimeDatetimegraphql,
		"datetime/datetime.graphql",
	)
}



func bindataDatetimeDatetimegraphql() (*asset, error) {
	bytes, err := bindataDatetimeDatetimegraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "datetime/datetime.graphql",
		size: 16,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1521864969, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSchemagraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x85\x2b\x96\xbb\x57\xf0\x08\x13" +
	"\x12\x0c\x08\x98\x10\x43\xee\x70\x8b\x45\x2e\x39\x1c\x47\xa2\x42\x7d\x77\x64\xa7\x1c\xa8\x53\x62\xfb\xff\xbf\xdf" +
	"\xae\xf3\x3b\x2d\x11\xbe\x03\xc0\x67\x23\x39\x22\x3c\xd8\x13\x4e\x21\xe8\x71\xa5\x5e\xf9\x78\x4a\x65\x1a\x72\x5c" +
	"\x08\xe1\x51\x85\xf3\x61\x37\x22\x5c\xa7\x32\x9d\x67\x75\xd8\x73\x52\x12\x84\x3b\xae\x6a\x83\x7a\x9b\xd7\xa6\xbf" +
	"\xb2\x9b\x26\xb5\xc8\x06\xbe\x6f\x1a\x95\x4b\x76\xf6\x15\xcc\x42\x51\xc9\x74\x83\xc1\xdc\xd9\x7d\xfe\x1d\x11\x9e" +
	"\x25\xed\x5c\xba\x34\x8d\x53\xea\xda\x11\x1d\x74\x2e\x37\xf8\x5f\xde\xb6\x7a\x45\x78\xb1\xf6\xab\x41\xd6\x78\xa0" +
	"\xa7\xf2\x41\x79\xbb\xc5\xac\x6c\x49\x17\xdb\xbb\xff\x8d\x12\x2f\xec\xb7\x75\xb9\x21\x84\xf6\xfc\xf5\xaf\x31\x7b" +
	"\x1e\x42\xcf\x75\x73\x38\x85\x9f\x00\x00\x00\xff\xff\x3f\xad\xd8\x38\x60\x01\x00\x00")

func bindataSchemagraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagraphql,
		"schema.graphql",
	)
}



func bindataSchemagraphql() (*asset, error) {
	bytes, err := bindataSchemagraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schema.graphql",
		size: 352,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1521934216, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataUrlUrlgraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x2d\xca\xe1\x02\x04\x00\x00\xff\xff\xfa" +
	"\x50\x1a\xd2\x0b\x00\x00\x00")

func bindataUrlUrlgraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataUrlUrlgraphql,
		"url/url.graphql",
	)
}



func bindataUrlUrlgraphql() (*asset, error) {
	bytes, err := bindataUrlUrlgraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "url/url.graphql",
		size: 11,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1521750028, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"blob/blob.graphql":         bindataBlobBlobgraphql,
	"cursor.graphql":            bindataCursorgraphql,
	"datetime/datetime.graphql": bindataDatetimeDatetimegraphql,
	"schema.graphql":            bindataSchemagraphql,
	"url/url.graphql":           bindataUrlUrlgraphql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"blob": {Func: nil, Children: map[string]*bintree{
		"blob.graphql": {Func: bindataBlobBlobgraphql, Children: map[string]*bintree{}},
	}},
	"cursor.graphql": {Func: bindataCursorgraphql, Children: map[string]*bintree{}},
	"datetime": {Func: nil, Children: map[string]*bintree{
		"datetime.graphql": {Func: bindataDatetimeDatetimegraphql, Children: map[string]*bintree{}},
	}},
	"schema.graphql": {Func: bindataSchemagraphql, Children: map[string]*bintree{}},
	"url": {Func: nil, Children: map[string]*bintree{
		"url.graphql": {Func: bindataUrlUrlgraphql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
