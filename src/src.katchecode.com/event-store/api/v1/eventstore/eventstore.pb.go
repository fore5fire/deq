// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eventstore.proto

/*
Package eventstore is a generated protocol buffer package.

It is generated from these files:
	eventstore.proto

It has these top-level messages:
	GetStoreMetaRequest
	GetStoreMetaResponse
	StoreMeta
	CreateEventRequest
	CreateEventResponse
	ListEventsRequest
	ListEventsResponse
	InsertEventsRequest
	InsertEventsResponse
	Event
*/
package eventstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetStoreMetaRequest struct {
}

func (m *GetStoreMetaRequest) Reset()                    { *m = GetStoreMetaRequest{} }
func (m *GetStoreMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStoreMetaRequest) ProtoMessage()               {}
func (*GetStoreMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetStoreMetaResponse struct {
	Meta *StoreMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *GetStoreMetaResponse) Reset()                    { *m = GetStoreMetaResponse{} }
func (m *GetStoreMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStoreMetaResponse) ProtoMessage()               {}
func (*GetStoreMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetStoreMetaResponse) GetMeta() *StoreMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type StoreMeta struct {
	StoreId string `protobuf:"bytes,1,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
}

func (m *StoreMeta) Reset()                    { *m = StoreMeta{} }
func (m *StoreMeta) String() string            { return proto.CompactTextString(m) }
func (*StoreMeta) ProtoMessage()               {}
func (*StoreMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StoreMeta) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

type CreateEventRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *CreateEventRequest) Reset()                    { *m = CreateEventRequest{} }
func (m *CreateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEventRequest) ProtoMessage()               {}
func (*CreateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateEventRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type CreateEventResponse struct {
}

func (m *CreateEventResponse) Reset()                    { *m = CreateEventResponse{} }
func (m *CreateEventResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEventResponse) ProtoMessage()               {}
func (*CreateEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ListEventsRequest struct {
	AfterKey string `protobuf:"bytes,1,opt,name=after_key,json=afterKey" json:"after_key,omitempty"`
	Follow   bool   `protobuf:"varint,2,opt,name=follow" json:"follow,omitempty"`
}

func (m *ListEventsRequest) Reset()                    { *m = ListEventsRequest{} }
func (m *ListEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEventsRequest) ProtoMessage()               {}
func (*ListEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListEventsRequest) GetAfterKey() string {
	if m != nil {
		return m.AfterKey
	}
	return ""
}

func (m *ListEventsRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

type ListEventsResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *ListEventsResponse) Reset()                    { *m = ListEventsResponse{} }
func (m *ListEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEventsResponse) ProtoMessage()               {}
func (*ListEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListEventsResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type InsertEventsRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *InsertEventsRequest) Reset()                    { *m = InsertEventsRequest{} }
func (m *InsertEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertEventsRequest) ProtoMessage()               {}
func (*InsertEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InsertEventsRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type InsertEventsResponse struct {
}

func (m *InsertEventsResponse) Reset()                    { *m = InsertEventsResponse{} }
func (m *InsertEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*InsertEventsResponse) ProtoMessage()               {}
func (*InsertEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Event struct {
	Payload *google_protobuf.Any `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Id      string               `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Key     string               `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Event) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*GetStoreMetaRequest)(nil), "eventstore.GetStoreMetaRequest")
	proto.RegisterType((*GetStoreMetaResponse)(nil), "eventstore.GetStoreMetaResponse")
	proto.RegisterType((*StoreMeta)(nil), "eventstore.StoreMeta")
	proto.RegisterType((*CreateEventRequest)(nil), "eventstore.CreateEventRequest")
	proto.RegisterType((*CreateEventResponse)(nil), "eventstore.CreateEventResponse")
	proto.RegisterType((*ListEventsRequest)(nil), "eventstore.ListEventsRequest")
	proto.RegisterType((*ListEventsResponse)(nil), "eventstore.ListEventsResponse")
	proto.RegisterType((*InsertEventsRequest)(nil), "eventstore.InsertEventsRequest")
	proto.RegisterType((*InsertEventsResponse)(nil), "eventstore.InsertEventsResponse")
	proto.RegisterType((*Event)(nil), "eventstore.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventStore service

type EventStoreClient interface {
	GetStoreMeta(ctx context.Context, in *GetStoreMetaRequest, opts ...grpc.CallOption) (*GetStoreMetaResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (EventStore_ListEventsClient, error)
	InsertEvents(ctx context.Context, opts ...grpc.CallOption) (EventStore_InsertEventsClient, error)
}

type eventStoreClient struct {
	cc *grpc.ClientConn
}

func NewEventStoreClient(cc *grpc.ClientConn) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) GetStoreMeta(ctx context.Context, in *GetStoreMetaRequest, opts ...grpc.CallOption) (*GetStoreMetaResponse, error) {
	out := new(GetStoreMetaResponse)
	err := grpc.Invoke(ctx, "/eventstore.EventStore/GetStoreMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := grpc.Invoke(ctx, "/eventstore.EventStore/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (EventStore_ListEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventStore_serviceDesc.Streams[0], c.cc, "/eventstore.EventStore/ListEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreListEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_ListEventsClient interface {
	Recv() (*ListEventsResponse, error)
	grpc.ClientStream
}

type eventStoreListEventsClient struct {
	grpc.ClientStream
}

func (x *eventStoreListEventsClient) Recv() (*ListEventsResponse, error) {
	m := new(ListEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStoreClient) InsertEvents(ctx context.Context, opts ...grpc.CallOption) (EventStore_InsertEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventStore_serviceDesc.Streams[1], c.cc, "/eventstore.EventStore/InsertEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreInsertEventsClient{stream}
	return x, nil
}

type EventStore_InsertEventsClient interface {
	Send(*InsertEventsRequest) error
	CloseAndRecv() (*InsertEventsResponse, error)
	grpc.ClientStream
}

type eventStoreInsertEventsClient struct {
	grpc.ClientStream
}

func (x *eventStoreInsertEventsClient) Send(m *InsertEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventStoreInsertEventsClient) CloseAndRecv() (*InsertEventsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InsertEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventStore service

type EventStoreServer interface {
	GetStoreMeta(context.Context, *GetStoreMetaRequest) (*GetStoreMetaResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	ListEvents(*ListEventsRequest, EventStore_ListEventsServer) error
	InsertEvents(EventStore_InsertEventsServer) error
}

func RegisterEventStoreServer(s *grpc.Server, srv EventStoreServer) {
	s.RegisterService(&_EventStore_serviceDesc, srv)
}

func _EventStore_GetStoreMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).GetStoreMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventstore.EventStore/GetStoreMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).GetStoreMeta(ctx, req.(*GetStoreMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventstore.EventStore/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_ListEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).ListEvents(m, &eventStoreListEventsServer{stream})
}

type EventStore_ListEventsServer interface {
	Send(*ListEventsResponse) error
	grpc.ServerStream
}

type eventStoreListEventsServer struct {
	grpc.ServerStream
}

func (x *eventStoreListEventsServer) Send(m *ListEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStore_InsertEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStoreServer).InsertEvents(&eventStoreInsertEventsServer{stream})
}

type EventStore_InsertEventsServer interface {
	SendAndClose(*InsertEventsResponse) error
	Recv() (*InsertEventsRequest, error)
	grpc.ServerStream
}

type eventStoreInsertEventsServer struct {
	grpc.ServerStream
}

func (x *eventStoreInsertEventsServer) SendAndClose(m *InsertEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventStoreInsertEventsServer) Recv() (*InsertEventsRequest, error) {
	m := new(InsertEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventstore.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStoreMeta",
			Handler:    _EventStore_GetStoreMeta_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventStore_CreateEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEvents",
			Handler:       _EventStore_ListEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InsertEvents",
			Handler:       _EventStore_InsertEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "eventstore.proto",
}

func init() { proto.RegisterFile("eventstore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x4f, 0xea, 0x40,
	0x10, 0x4d, 0xcb, 0xe5, 0xa3, 0x03, 0xb9, 0x81, 0xe5, 0x23, 0xd0, 0x9b, 0x0b, 0xa4, 0x0f, 0xf7,
	0xe2, 0x4b, 0x31, 0xf8, 0xac, 0x09, 0x31, 0x46, 0x89, 0x62, 0x62, 0x79, 0xf2, 0x89, 0x94, 0x74,
	0x20, 0x8d, 0xb5, 0x8b, 0xdd, 0x45, 0xd3, 0xdf, 0xe9, 0x1f, 0x32, 0xdd, 0x2e, 0xb2, 0x15, 0x48,
	0x78, 0x6b, 0xcf, 0x9c, 0x39, 0x7b, 0x66, 0xce, 0x40, 0x15, 0xdf, 0x31, 0xe4, 0x8c, 0xd3, 0x08,
	0xed, 0x75, 0x44, 0x39, 0x25, 0xb0, 0x43, 0xcc, 0xce, 0x8a, 0xd2, 0x55, 0x80, 0x43, 0x51, 0x59,
	0x6c, 0x96, 0x43, 0x37, 0x8c, 0x53, 0x9a, 0xd5, 0x84, 0xfa, 0x2d, 0xf2, 0x59, 0x42, 0x9b, 0x22,
	0x77, 0x1d, 0x7c, 0xdb, 0x20, 0xe3, 0xd6, 0x18, 0x1a, 0x59, 0x98, 0xad, 0x69, 0xc8, 0x90, 0x9c,
	0xc1, 0xaf, 0x57, 0xe4, 0x6e, 0x5b, 0xeb, 0x6b, 0x83, 0xf2, 0xa8, 0x69, 0x2b, 0xcf, 0xee, 0xc8,
	0x82, 0x62, 0xfd, 0x03, 0xe3, 0x1b, 0x22, 0x1d, 0x28, 0x09, 0xd6, 0xdc, 0xf7, 0x44, 0xaf, 0xe1,
	0x14, 0xc5, 0xff, 0xc4, 0xb3, 0x2e, 0x81, 0x5c, 0x47, 0xe8, 0x72, 0xbc, 0x49, 0xb4, 0xa4, 0x01,
	0xf2, 0x1f, 0xf2, 0x42, 0x5b, 0xbe, 0x54, 0x53, 0x5f, 0x4a, 0x89, 0x69, 0x3d, 0x19, 0x20, 0xd3,
	0x9e, 0x1a, 0xb5, 0xee, 0xa0, 0xf6, 0xe0, 0x33, 0x2e, 0x40, 0xb6, 0x15, 0xfd, 0x03, 0x86, 0xbb,
	0xe4, 0x18, 0xcd, 0x5f, 0x30, 0x96, 0x36, 0x4a, 0x02, 0xb8, 0xc7, 0x98, 0xb4, 0xa0, 0xb0, 0xa4,
	0x41, 0x40, 0x3f, 0xda, 0x7a, 0x5f, 0x1b, 0x94, 0x1c, 0xf9, 0x97, 0xf8, 0x53, 0x95, 0xe4, 0x22,
	0x4e, 0xf6, 0x77, 0x05, 0xf5, 0x49, 0xc8, 0x30, 0xfa, 0x61, 0xe5, 0xe4, 0xfe, 0x16, 0x34, 0xb2,
	0xfd, 0x72, 0xc0, 0x67, 0xc8, 0x0b, 0x84, 0xd8, 0x50, 0x5c, 0xbb, 0x71, 0x40, 0x5d, 0x4f, 0x6a,
	0x35, 0xec, 0x34, 0x6e, 0x7b, 0x1b, 0xb7, 0x3d, 0x0e, 0x63, 0x67, 0x4b, 0x22, 0xbf, 0x41, 0xf7,
	0x3d, 0x31, 0xa3, 0xe1, 0xe8, 0xbe, 0x47, 0xaa, 0x90, 0x4b, 0xd6, 0x91, 0x13, 0x40, 0xf2, 0x39,
	0xfa, 0xd4, 0x01, 0x84, 0xb6, 0xc8, 0x8f, 0x3c, 0x41, 0x45, 0xbd, 0x05, 0xd2, 0x53, 0xbd, 0x1e,
	0x38, 0x1e, 0xb3, 0x7f, 0x9c, 0x20, 0xb7, 0xf7, 0x08, 0x65, 0x25, 0x34, 0xd2, 0x55, 0x1b, 0xf6,
	0x8f, 0xc1, 0xec, 0x1d, 0xad, 0x4b, 0xbd, 0x29, 0xc0, 0x2e, 0x23, 0xf2, 0x57, 0xa5, 0xef, 0x5d,
	0x81, 0xd9, 0x3d, 0x56, 0x4e, 0xc5, 0xce, 0x35, 0x32, 0x83, 0x8a, 0xba, 0xf3, 0xec, 0xc4, 0x07,
	0xd2, 0xcc, 0x4e, 0x7c, 0x28, 0xae, 0x81, 0xb6, 0x28, 0x88, 0x38, 0x2e, 0xbe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x28, 0x8e, 0x51, 0x33, 0xab, 0x03, 0x00, 0x00,
}
