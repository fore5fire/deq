
type Query {
  account(id: ID): Account
}

type Mutation {
  createServiceToken(input: ServiceTokenInput!): AuthGrant
  createUserToken(email: EmailAddress!, password: String!): UserAuthGrant

  revokeUserToken(id: ID!): Boolean
  revokeServiceToken(id: ID!): Boolean

  createRefreshedToken(refreshToken: String!): String
  createPasswordResetToken(email: EmailAddress!): PasswordResetToken
  # Todo: Move changePassword to be under UserAccount (The client can get the aid when they recieve the reset token, so they don't have to lookup the account by email), and move resetToken to be a regular authorization header token
  changePassword(email: EmailAddress!, resetToken: String!, newPassword: String!): UserAuthGrant
  updateUserToken: String

  createUserAccount(input: UserAccountInput!): UserAuthGrant
  account(id: ID): MutableAccount
}

interface Account {
  id: ID!
  name: String!
  permissions(domain: String): [Permission]
}

interface MutableAccount {
  query: Account
}

type UserAccount implements Account {
  id: ID!
  email: EmailAddress!
  name: String!
  names: Names!
  permissions(domain: String): [Permission]
}

type MutableUserAccount implements MutableAccount {
  query: UserAccount

  setPermission(input: PermissionInput!): Permission
  addPermission(input: PermissionInput!): Permission
  removePermissionPaths(domain: String!, paths: [String]!): Permission

  edit(input: EditUserAccountInput!): UserAccount
  delete: Boolean
}

input EditUserAccountInput {
  email: EmailAddress!
  names: NamesInput!
}

input UserAccountInput {
  email: EmailAddress!
  names: NamesInput!
  password: String!
}

type ServiceAccount implements Account {
  id: ID!
  name: String!
  permissions(domain: String): [Permission]
}

type AuthGrant {
  refreshToken(expiration: DateTime): String
  queryToken: String
}

type UserAuthGrant {
  account: UserAccount
  mutableAccount: MutableUserAccount
  refreshToken(expiration: DateTime): String
  queryToken: String
}

type Permission {
  domain: String!
  value: Json!
}

input PermissionInput {
  domain: String!
  value: Json!
}

input ServiceTokenInput {
  permissions: [PermissionInput]!
}

type PasswordResetToken {
  resetToken: String!
  expiration: DateTime
}

type Names {
  first: String
  last: String
}

input NamesInput {
  first: String!
  last: String!
}


scalar DateTime
scalar EmailAddress
scalar Json
