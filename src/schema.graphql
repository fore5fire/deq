
type Query {
  account(id: ID): Account
}

type Mutation {
  createServiceToken(input: ServiceTokenInput!): AuthGrant
  createUserToken(email: EmailAddress!, password: String!): AuthGrant

  revokeUserToken(id: ID!): Boolean
  revokeServiceToken(id: ID!): Boolean

  createRefreshedToken(refreshToken: RefreshToken!): QueryToken

  createUserAccount(input: UserAccountInput!): AuthGrant
  account(id: ID): MutableAccount
}

interface Account {
  id: ID!
  name: String!
  permissions(domain: String): [Permission]
}

interface MutableAccount {
  query: Account
}

type UserAccount implements Account {
  id: ID!
  email: EmailAddress!
  name: String!
  permissions(domain: String): [Permission]
}

type MutableUserAccount {
  query: UserAccount

  setPermission(input: PermissionInput!): Permission
  addPermission(input: PermissionInput!): Permission
  removePermissionPaths(domain: String!, paths: [String]!): Permission

  edit(input: UserAccountInput!): UserAccount
  delete: Boolean
}

input UserAccountInput {
  email: EmailAddress!
  name: String!
  password: String!
}

type ServiceAccount implements Account {
  id: ID!
  name: String!
  permissions(domain: String): [Permission]
}

type AuthGrant {
  account: Account
  refreshToken(expiration: Date): RefreshToken
  queryToken: QueryToken
}

type Permission {
  domain: String!
  value: Json!
}

input PermissionInput {
  domain: String!
  value: Json!
}

input ServiceTokenInput {
  permissions: [PermissionInput]!
}

scalar QueryToken
scalar RefreshToken
scalar Date
scalar EmailAddress
scalar Json
