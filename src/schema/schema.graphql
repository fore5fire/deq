
type Query {
  task(id: ID!): Task
  tasks(filter: TaskFilter): [Task]
}

type Mutation {
  createAssetTask(input: AssetTaskInput!): MutableAssetTask
  task(id: ID!): [MutableTask]
}

interface Task {
  id: ID!
  name: String!
  description: String
  hardDueDate: Date
  softDueDate: Date
  priority: Priority
}

interface MutableTask {
  task: Task!
}

type AssetTask implements Task {
  id: ID!
  name: String!
  description: String
  hardDueDate: Date
  softDueDate: Date
  priority: Priority
  asset: Url#[Asset]
  #conversation: Conversation
}

type MutableAssetTask implements MutableTask {
  task: AssetTask!

  edit(input: AssetTaskInput!): Task
  delete: Boolean
}

input AssetTaskInput {
  name: String!
  description: String
  hardDueDate: Date
  softDueDate: Date
  priority: Priority
  assets: [Url]#[AssetInput]
  #conversation: ConversationInput
}

input TaskFilter {
  type: String
  dateRange: DateRangeInput
}

input DateRangeInput {
  start: Date!
  end: Date!
}

enum Priority {
  low
  medium
  high
}

scalar Date
scalar Url
