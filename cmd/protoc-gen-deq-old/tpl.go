// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// out.go.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x51\x6f\xdb\x36\x10\x7e\x26\x7f\xc5\xcd\xd8\x0a\x29\x70\x68\xf4\xd5\x68\x1e\x8a\xa4\xc8\x82\x2d\x6d\xb1\x0c\xe8\xe3\xc0\x50\x67\x99\x88\x4c\x2a\x24\x15\x37\x10\xf4\xdf\x87\x23\x25\x59\x72\x9c\x74\x05\xf6\x90\x58\x22\x8f\x77\xdf\x7d\xfc\xf8\x51\xab\xd5\x8a\xaf\x56\x00\xd7\x68\xd0\xc9\x80\x05\x28\x5b\xa0\x80\x2b\x0b\xc6\x06\xd8\xd9\x42\x6f\x9e\x45\x0c\xf1\xb6\x71\x0a\xd7\xd0\xb6\x20\xee\xe2\x33\x74\x1d\xa7\x04\xb5\x54\x0f\xb2\xc4\x38\xf3\xb5\x7f\xee\x3a\xce\xf5\xae\xb6\x2e\x40\xc6\xd9\x42\x59\x13\xf0\x7b\x58\x70\xb6\xd8\xec\xe2\x4f\x65\x4b\xfa\xf1\xcf\x46\x2d\x38\x67\x8b\x52\x87\x4a\xde\x0b\x65\x77\xab\x07\x19\xd4\x16\x2f\x6d\x81\xab\x02\x1f\xe9\x4f\x2d\xde\x8c\x90\xea\x21\x06\x58\x5b\x56\x28\x4a\x5b\x49\x53\x0a\xeb\xca\x55\xe9\x6a\xb5\xe0\x39\xe7\x6d\x7b\x0e\x4e\x9a\x12\x41\xfc\xfd\x5c\xa3\x8f\xf8\xc2\x73\x4d\xa0\xc5\x67\xb9\xc3\xae\xfb\xf4\x84\x26\x80\x0f\xae\x51\x01\x5a\xce\x6e\xae\xe8\x45\x9b\x92\xb3\x5b\x5f\xc2\xd9\x18\xc8\xbb\x98\x0e\x4d\x01\xe7\x94\xa6\x6d\x87\xd4\x77\xe8\x9e\xb4\xea\xb3\xb7\x2d\x04\xdc\xd5\x95\x0c\x08\x0b\x55\x69\x34\x61\x01\x82\xa6\x66\x33\x3e\xad\x39\x4c\x4d\xf3\x16\xb8\xd1\x66\xb2\xbc\x4b\xa5\x7f\xed\x0b\x11\x1e\x58\x5f\x40\x04\x16\x17\xf5\x2d\xf5\x23\x5d\x77\x19\x17\x4e\xba\xaa\x9b\xfb\x4a\xfb\x2d\x3a\x80\xb3\x02\x1f\xc5\xd7\xe1\x9d\x33\xdf\xdc\x7b\xe5\xf4\x3d\xba\x34\x75\x37\xbe\xf3\x8e\xf3\x4d\x63\x14\x7c\xc6\xfd\x8b\xe4\x99\xb2\xc6\xc0\x19\x51\x2d\xd2\xc8\xa5\x35\x66\x09\x6a\x2b\x8d\xc1\xaa\x27\x31\x9f\x10\xd8\x83\x6a\x39\x73\x18\x1a\x67\xe0\xdd\xd1\x54\xcb\xd9\x01\xe8\x1a\x80\xd0\x7c\xc6\xfd\x88\x35\x96\x5c\xc2\x0c\xff\x97\x3a\xf8\xb6\xcb\x97\x9c\x4d\x1a\x59\x0f\x4b\x0f\xbd\x4c\xd6\x1e\x06\xe3\x62\xce\x18\xbb\x4c\xa0\xd7\x30\xc0\xa7\x7c\x31\x2b\x6d\xfb\x49\x19\x45\x62\x32\x45\xfd\xcd\x37\x66\xe8\x26\x87\x6b\x0c\x13\xda\x32\x15\xbe\x43\x7f\x20\xc4\x65\xfa\x5d\x82\x2e\x46\xa6\xb2\x49\x70\x54\xe5\x12\xd0\x39\xeb\x72\xa2\x6c\xe7\x4b\xda\x72\x83\xfb\x69\x58\xce\x19\xc6\x28\x9a\x53\xe2\xc0\x80\xb8\xc6\x40\x05\xa9\xc0\x12\x76\xbe\xcc\x39\xd3\x9b\x18\xf9\xcb\x05\x18\x5d\x51\xce\x61\x1f\xe6\x67\xa1\xed\x62\x46\x6a\x9d\xf1\x57\x42\x38\x63\x37\x57\x6b\x00\x14\x37\x57\x44\xd5\xad\x2f\xd7\x80\xe2\xd6\x97\x22\x3b\x6c\x78\xe4\x6f\x49\xd5\xf8\xb1\xc4\x47\x3e\x6f\x31\x6c\x6d\x91\x8e\x4e\xa2\xd4\xbf\x45\xe9\x0f\xf9\x8c\x27\xfb\xc6\xd0\x36\xf5\x60\x7b\x62\xbf\x34\x81\x06\x4f\x71\xcb\xd9\x3f\x23\x89\x5e\x8c\x0a\x24\x91\x25\x0e\x49\x35\x3f\x6a\x9c\x7a\x7d\x9b\xe4\x17\x18\x88\xe9\xcd\x2e\x88\x4f\x84\x64\x93\x2d\xea\xe6\x7e\x0d\xbf\x3d\x2d\x22\x98\x9c\x36\x80\xf8\xf7\x4d\x15\x6e\xe7\xbb\x7f\xc8\x93\x0f\x11\x93\x06\x26\x2a\xf8\xb8\x97\xba\xd7\x41\x44\x0c\x63\xba\x1f\xe8\xa1\xaf\xf0\x52\x12\xfc\xf5\xa0\x81\x9b\x54\x63\x4a\xd0\x58\x75\x2e\x88\x83\x99\xf6\xe2\x38\xb2\xbf\xd1\x23\x4f\x38\xdc\xef\xd2\x14\x15\x3a\x0f\xda\x04\x74\x1b\xa9\x10\xda\x57\x74\xc5\xfe\x83\x68\xc6\x1d\x26\x8a\x1e\xa3\x02\x7b\x15\x11\xc9\x90\x9d\xcd\x69\x5f\x82\x54\x0f\x82\x2e\xa2\x7c\xec\x23\xde\x10\x2f\x70\x92\x8c\xd1\x4d\x9c\x78\x3b\x00\x3f\xd1\xcc\x9b\x66\xfc\x86\x87\x9f\xf6\xe9\x54\xfa\x35\x9f\x7e\x0b\xc7\x4b\x17\x4f\x04\xcc\x12\xe7\x73\x27\x3f\x9a\x25\x35\x0c\x25\xd6\x63\xb1\xff\xcb\xa6\x8f\x5d\x7a\x7a\x6d\xfc\xdc\xad\xd1\xf1\x23\xe3\x39\x6e\xf2\x4f\xed\x03\x9a\x53\xba\xc9\x93\x85\x10\x0d\xf1\x41\xd1\xf1\xdb\xc9\x07\xcc\x08\x5e\x9a\x5c\xc2\xfb\x9c\xb3\x7d\x3c\xbd\xf4\xcd\x23\xbe\x49\x1d\xae\x9d\x6d\xea\xb6\xe3\x2c\x1e\x4c\x25\x8d\xc2\x2a\x1a\x78\x9f\xff\x9b\x0e\xdb\xcb\x38\x4a\x65\x73\xce\x0a\xdc\xa0\xeb\x03\xb3\x7c\xf2\xe5\x31\x55\xf9\xbe\x14\x1f\x8b\x22\x7b\x9f\x73\x80\xd2\x02\xf5\x94\xc5\x3d\xea\x97\xef\x4b\x71\x65\x0d\x66\x39\x67\xec\x94\x57\xdc\x0d\x6e\x97\x1d\xa9\x3f\x33\xba\xca\x97\x29\xe1\xe4\xa4\xe4\xe3\x19\x88\x45\xd8\x93\x74\xf1\x2b\x72\x1c\xa6\x41\x87\xbe\xb6\xc6\xe3\x32\x4d\xc5\x9a\x83\x18\xc4\xd1\xb9\x5c\x02\xdd\x65\xe3\x25\x32\x85\x90\x73\x4a\xa6\x37\x29\xcb\xc5\x45\xac\x71\x85\x8f\x0d\x36\xf8\xe5\x0f\x78\xf7\x0e\x86\x42\x53\x3b\x63\x3f\xe5\xeb\x2c\xd9\xd7\xe0\xec\xec\xe0\x5d\xa9\x83\x38\x46\x86\x9b\x90\x1c\x59\x27\x63\xac\xb2\xa5\xf8\xea\xb4\x09\xc9\xca\xc7\x95\x33\x4f\x67\x6c\xb4\x59\xea\xe1\xaf\xd4\xc3\xa7\xef\xb5\x35\x68\x82\x96\x55\x2a\xc3\xe3\x3f\x7e\x08\x56\x89\xd0\x58\xff\x44\xf5\xd5\x0a\x6e\x36\x60\x2c\x58\x83\xa0\x3d\x38\x54\x1a\x9f\xb4\x29\x21\x6c\xd1\xd0\x3f\xb0\x4d\x40\x17\x77\x31\x68\x6b\x40\x56\x0e\x65\xf1\x0c\x5b\x49\xd1\x54\x03\x0b\xca\xe4\xb1\xc2\xe4\x54\x8c\x29\xe9\x11\x7a\x6d\x7f\x38\xa7\xa7\x35\x0d\x17\xb8\x91\x4d\x15\xd6\xbc\x47\xda\x71\xd6\x65\x33\x23\xe4\x6c\xae\xc0\x7d\x19\x85\x1f\xb5\xa7\x2a\xeb\x31\x4b\x59\xf3\xb4\x72\x68\xf2\xc3\x79\x1a\x1e\xbe\xb9\xc6\x0f\x86\x7f\x03\x00\x00\xff\xff\xe5\xe3\xc5\xa9\xb0\x0c\x00\x00")

func outGoTplBytes() ([]byte, error) {
	return bindataRead(
		_outGoTpl,
		"out.go.tpl",
	)
}

func outGoTpl() (*asset, error) {
	bytes, err := outGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.go.tpl", size: 3248, mode: os.FileMode(420), modTime: time.Unix(1594354611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": outGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out.go.tpl": &bintree{outGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
