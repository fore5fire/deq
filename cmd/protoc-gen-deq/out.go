package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xdb\xc6\xf2\x7f\x26\x3f\xc5\x54\x48\x03\x31\x95\x29\xfc\x5f\x85\xe4\x21\xb0\xfb\x4f\x05\x9c\xa6\x46\xed\x83\x06\x08\x8a\x80\x5e\x0e\x25\xc2\xd4\xae\xb2\x5c\xf9\x02\x81\xdf\xfd\x60\x66\x97\xe4\xf2\x22\xf9\x92\x3a\x3d\x07\xe7\xf8\xc1\x26\xb9\xcb\x99\xdf\x5c\x76\x6e\xe6\x7c\x3e\x0f\xe7\x73\x80\x0f\x28\x51\x27\x06\x53\x10\x2a\xc5\x18\xce\x14\x48\x65\x60\xa3\xd2\x3c\xbb\x8f\x79\x4b\xa9\x76\x5a\xe0\x02\xf6\x7b\x88\x2f\xf8\x1a\xaa\x2a\x24\x02\xdb\x44\x5c\x27\x2b\xe4\x95\x73\x77\x5d\x55\x61\x98\x6f\xb6\x4a\x1b\x98\x86\xc1\x44\x28\x69\xf0\xce\x4c\xc2\x60\x92\x6d\xe8\xcf\x7e\x0f\x79\x06\xf1\x2f\x49\xf9\x2b\x9a\xb5\x4a\x4b\x38\xa9\xaa\x30\x98\x94\xf7\x52\xd0\xae\xd2\xe8\x5c\xae\x4a\xbb\x13\x65\x6a\x97\xf7\x7b\x7a\xe9\xf2\x7e\x8b\x65\x55\x4d\x4c\xbe\xc1\xc9\x7e\x8f\x32\x25\x6e\xc1\x64\x95\x9b\x22\xb9\x8a\x85\xda\xcc\xaf\x13\x23\xd6\x78\xaa\x52\x9c\xa7\xf8\x95\xa9\x9c\x80\x4e\xe4\x0a\xe1\xd5\xf6\x7a\x35\x83\x57\xdb\xc4\xac\x61\xf1\x0e\xe2\x25\xa3\x2c\xc1\xd2\xa7\xd5\xaa\x82\x09\x5d\x25\x66\x5d\x55\xee\x5d\x82\x50\x55\x61\x14\x86\x2d\x25\x0b\x84\x45\x35\xf7\x5b\x92\x3f\xfe\xa0\x3e\x26\x1b\xac\xaa\x9f\x6f\x50\x1a\x28\x8d\xde\x09\x03\xfb\x30\x58\x9e\x41\x10\x04\x01\x00\x58\xc1\xc2\xe0\x54\x63\x62\xf0\x32\xdf\x20\x00\x90\x24\x31\x5d\x87\xc1\x19\x66\xc9\xae\x30\x17\x26\x31\x08\x29\x7e\x8d\xf9\x2a\x0c\xec\x03\xf7\xe3\x3d\x5f\xca\x14\xef\xb0\xb4\xcf\x3f\xff\xe9\xc8\x13\xe8\x06\x0c\xbc\xe1\x9b\xdf\x31\xab\xaa\xb0\x06\xfb\xc5\xdb\x70\xa9\xb6\xb9\x38\x55\x32\xcb\x57\x90\x4b\x83\x3a\x4b\x04\x12\x6c\x16\xe3\x52\xf5\x05\x9b\x12\x7f\xbe\x8a\x60\xfa\xa6\xbf\x3a\x03\xd4\x5a\xe9\x88\x58\xcd\xe7\x03\xad\x2c\x0d\x6a\xc8\x4b\x48\x24\xe4\x86\x9c\x4e\x69\xc8\x94\x1e\xec\x2b\x63\x58\x1a\x58\x27\x76\x67\x8a\xd2\xe4\x22\x29\x3c\x7c\x46\x11\xf9\x06\x0a\xd1\x9d\x01\xde\x09\xdc\x1a\x30\xeb\x84\x7e\x21\x58\x43\x6c\xd8\xc7\x40\xa3\xd9\x69\x59\x42\x32\x60\x16\x8f\x5b\xd0\x62\xf5\x35\xf2\x11\xef\xcc\x54\x98\x3b\x70\x1e\x1d\x9f\xda\xbf\x47\x15\x11\x9c\x16\xaa\xc4\x69\xd4\x28\xff\xd3\xa7\x4f\x5f\x46\x79\x79\x1e\x43\xb7\xd0\x15\x2f\x0c\x9c\x91\x0e\x18\xcf\x69\x9c\x30\x36\xb2\x92\x12\x24\x3d\x18\xa2\x63\xda\x5a\x2f\xd9\x0a\xb9\x92\xa7\x6a\xb3\x2d\xd0\x20\x9d\xcc\xbc\x7e\x08\xc2\x3d\x4d\x67\xa0\x34\xd9\x82\x85\x9a\x11\xa3\x3c\x03\x25\x11\x94\x10\x3b\x8d\x69\x0c\x17\x88\x5d\xc0\x31\x43\x21\xeb\x6e\x94\x46\xc8\x65\xa6\xf4\x86\xc9\xc6\x61\xb6\x93\x02\xa6\xb9\x81\x37\x87\xb4\x11\xc1\x73\xb4\x0d\xfb\x30\x0c\xf2\x0c\x7e\xc8\x4d\xdc\x60\x20\x22\xb4\x12\x04\x2c\x9b\x5d\xf8\x59\xeb\x69\x04\x3f\xbc\x03\x99\x17\xbc\x16\x58\xa5\xd1\xfd\xac\xbb\x2b\x0c\x82\x2a\xec\xae\x1f\xd2\x5e\x48\x3b\xc3\x20\xc5\xaf\xd6\xf7\x16\xef\x5a\x52\x7c\x78\xa2\x30\x0c\x90\xd1\xba\x35\x6b\xbc\xf8\xc8\x61\xb3\x67\x8d\xc5\xa2\xd7\x3c\xc8\x3e\xa2\x6c\x63\x08\x91\xd2\xd9\x94\x02\xee\x0d\x6a\xd3\x9a\x03\x8c\x1a\xb8\xc0\x02\x7e\xbc\x99\x30\x92\x88\x50\x87\x35\x35\x9c\x11\x41\xf2\xa6\xc7\x18\xc9\x39\x37\xc1\xa9\x05\x6d\xfd\xdd\x8b\xde\x74\xed\x02\xe7\x05\xea\x9b\x5c\xd8\xd8\x59\x1f\xbc\x61\x28\x6a\x0f\x83\xa1\xa7\x25\x6c\x92\xed\x67\x1b\xe0\xea\x38\x57\x43\xfc\x88\xb7\x63\x24\xa6\x11\xc7\xbe\x21\xe9\x7d\x23\xeb\xeb\xb1\x75\xd2\xac\xe5\xb9\x80\x4d\x72\x8d\xd3\x01\xe7\x68\x46\x1a\x63\xf9\x5e\x39\x69\x88\x0a\x67\x14\xbe\x20\x89\x5b\x81\x9b\x4c\x61\x15\x2a\x08\x96\xff\x5e\x87\x7b\x04\x87\x5c\xc1\x3b\x5e\xcd\x11\xe0\x3b\x8e\xed\xa3\xc7\x00\x63\xa6\x4c\x3e\x23\xe2\x7e\xd8\xb0\x56\x3b\xe8\x44\xb9\x14\x4a\x6b\x14\xe4\x3c\x44\xe3\xc7\x92\xbc\xc5\x12\x74\x1e\xb3\x29\x57\x24\xb3\xc4\xdb\x29\xa5\x7f\xce\x32\x50\x55\x51\x18\x38\xff\xde\x94\xab\xf8\x9f\x72\x93\xe8\x72\x9d\x14\x53\x8c\xcf\x93\xfb\x42\x25\xe9\x93\x9c\x79\x57\xbf\x0f\x5b\xfb\xf6\x21\xc7\x7d\x3d\xa6\x11\xa2\xbc\x3c\x5b\x40\xfb\x83\xf1\xf2\x6c\x16\x06\x7e\x8e\x5c\x00\x21\xa5\x87\x6d\x62\x5e\xf0\xd6\xf6\x9e\x56\xfd\xf4\xbc\x00\x8c\xfd\x7b\x5a\x77\x0b\x0d\xa3\x66\xc1\xe5\xe9\x45\x83\xc0\xde\x93\x1b\xf5\x4e\xdb\x43\xce\xd1\xf7\x8a\x4b\x55\x3b\xc7\xa8\x43\x44\xd0\xa6\xeb\x8e\x73\x5c\xed\xb2\x26\x0a\xa1\xef\x1a\xf1\xaf\xce\x5a\xc7\x8c\xd4\xd0\xdc\x57\x4c\xa5\x63\x87\x76\xf1\xa0\xee\xcf\x6b\x4b\xf2\x0f\x61\x79\x39\xdd\xb3\xfa\x9a\x85\xb1\x63\xf0\x62\x16\xaa\x8f\x99\x8d\x1a\x1c\x23\x33\x10\xf0\x6e\xa0\xcf\xc9\x7e\x1f\x9f\x6b\x65\xd4\xff\xef\x8a\xc2\xbe\x3b\xb1\x3a\xe5\xb3\x37\x03\x75\x4d\x86\x12\xb1\x8d\x4b\x9f\xc7\xf6\xff\xc9\xd4\xd5\xb5\x4f\x97\xb7\x73\x4e\x3a\xc6\xe8\xd1\xa2\x5d\xa0\x19\x48\x67\x83\x83\x8b\x8b\xc4\xfb\x38\x48\x78\xe7\x40\x35\xd9\xc1\x25\x07\x83\x9b\x6d\x41\x55\xee\x44\x14\x39\x4a\x33\x81\x18\x6c\x14\x6d\x57\x4a\x8b\xac\x5d\xf2\xb3\x4b\x8a\x59\x2e\xbd\xd7\x79\xc7\xc9\x91\x00\xed\x72\x8f\x7b\x52\x55\xa7\xfc\x62\xb7\xe2\xbb\xb8\x97\xe2\x7d\x51\x5c\xaa\xb1\x42\x64\x06\x1a\x37\xca\x55\xea\xf6\xed\xc8\x9e\x31\xbf\xe5\x68\xc3\x7f\xf0\x81\xf4\x07\x4e\x81\x50\xc7\xf5\x51\xca\x79\xda\xe8\x94\x42\x3d\x78\x47\x1b\x06\x15\x66\x9f\x2e\x3b\xef\x01\xba\xb4\xf4\x04\xd2\xef\x6f\x93\xfc\x65\x40\x5f\xec\xae\x1e\x4b\x77\x9d\xc8\xb4\x40\x0d\xe4\xa5\xd3\xc1\xea\x81\xc0\xe7\x82\x9d\xb3\x07\xd7\x08\x7d\x6e\x54\xae\x4c\xd5\xd6\x94\xf0\x86\x4c\x48\xb7\xbf\x6d\xa9\x9c\x2b\x23\x18\x87\x6f\x0b\xf1\x3e\x31\xd6\xf7\x73\x89\x9d\x93\x1e\x7a\xa9\x7e\x54\x0b\x87\x43\xfc\xd1\x5a\x80\xba\xca\xe2\x71\x1c\x3c\xfb\x35\x6e\xec\xf7\xdf\xb5\x47\xd7\x5d\xbb\x7b\x5a\x1f\xa0\x63\xb0\x97\x92\x8e\xc1\x41\xf4\xbf\xed\xcc\xf8\x7a\x2b\x85\x07\xc5\x6b\x63\xfb\xa7\xb7\x2d\x1b\xd3\xab\xb6\x5d\xb6\x8b\x61\x20\xd6\x89\x94\x58\x34\x7d\xb8\xb0\x05\xe1\xb1\xa8\xd7\xad\x32\x7b\xec\xa6\xe9\x95\x47\x7f\x06\x5d\xfa\x33\x78\x04\xfd\xa8\x2d\x7f\x9d\x08\x5e\x79\xfa\xa5\xb7\x46\xa1\x3d\xbd\x5a\x40\x7a\x45\x39\xcb\x71\x5b\xd4\x6c\xf9\x19\x13\x5d\x38\xce\xae\x4e\x6d\xc3\x7b\x9f\x60\x04\xcf\x8c\x70\x84\x12\xb5\x16\x5c\xe5\x51\x91\x4c\x18\x5c\x77\x08\xff\x17\x85\xc1\x2d\x97\x86\xe5\xbd\x14\xf1\x1f\x49\x6e\x3e\x68\xb5\xdb\xee\xab\x30\x10\xe6\x6e\x06\x22\x91\x02\x0b\x4e\x69\x8e\xe1\x1f\xb9\x59\x9f\xf2\x53\xee\xd6\xa8\x89\x1a\x29\xa0\x83\xdb\x55\xfc\x3e\x4d\xa7\xc4\x60\xa5\x6c\x3c\xb0\x55\x6c\x8a\x19\x6a\xb8\x5d\xc5\x67\x4a\x22\x77\x59\x8d\xb1\x39\x71\xa6\x57\xf1\xa9\xbd\x9f\x8a\xb8\xd6\x17\x88\xd8\xea\x69\xa4\x28\x88\x1a\xa2\x6e\x77\xd3\xd7\x84\x41\x5d\xde\xf2\x24\xe6\x5e\x0a\xab\xbc\x5a\x59\x8d\x1b\x44\xb6\xe3\xec\x95\x50\x41\x89\x05\x5a\x17\x65\x0e\x54\xc5\x2c\xe8\x5a\x24\x25\x02\xeb\xf4\xed\x09\xfd\xe5\x87\x95\x6d\x3e\xab\x69\x7b\x02\x78\xde\xe5\x49\x0f\x61\x40\x7a\x21\x2d\x73\xaf\x2a\x18\x27\x11\x8a\xec\x8b\x4d\x39\xfe\xf6\x84\x9e\x86\x81\x55\xff\x94\xad\x54\xbf\xd7\xf6\x7f\x5a\x87\x15\x8c\x8f\xba\x7c\x3f\xea\x66\xd6\xd6\xa1\x5e\x26\xc9\x91\xba\xc2\x6f\x37\xe9\x21\x8b\xd6\x6d\x76\x53\x13\xd7\x5b\x3e\xa0\xb1\xb6\xcd\x1f\xee\x5a\x9a\x42\x18\xbb\xa4\x6a\x44\xdf\xa9\xc7\xef\x45\xd0\x83\x7d\xbe\x05\xd9\xaf\x6d\x9f\x60\xd9\xbf\xac\xcc\xf8\x1b\x8d\xdb\xc8\xe0\x30\xff\xd7\x1b\xf9\xa5\x0a\xbe\xbf\xcb\xc6\x2c\xcf\xff\x8e\x70\x9d\xed\xbf\x63\xd1\xcd\xcd\xe0\x4b\xd9\xdb\x69\xa0\x5e\xb8\xd8\x5d\x59\x1b\x5b\xb4\xe3\x75\x68\x67\x7c\x36\x36\x16\x09\x82\xa7\xda\x1d\x29\xe1\x8e\x25\xf9\x60\x9b\xc8\x5c\x3c\xc9\xc6\x13\xf8\x89\xc8\x58\xf7\xb0\x05\x08\x1b\xbb\xeb\x40\xce\x2c\x56\x5a\x74\x3e\x57\x45\x8f\x75\x80\xbf\xb0\x0f\x7a\xd1\x13\x1d\x8c\x8d\xf5\xce\xaf\x57\x55\x75\x68\x16\xcd\xd3\x26\x83\x7a\x01\xd0\x50\xfb\x88\xb7\x5d\x01\x79\xd6\x73\x5a\xd7\xc8\xf1\xe1\x2a\xf9\xb1\xfa\xfb\x86\xd6\xef\x3f\x43\x7f\x5d\x01\xbf\x59\x7f\x2f\xdd\xed\x72\xe7\x37\xc8\x05\x23\x0a\xec\x4e\x4f\x9f\x15\xb7\xc7\x70\xd0\xf1\x6e\xce\xfa\x20\x6e\x77\x91\x39\x8b\x9f\xd7\xb1\xeb\x59\x49\x64\xbb\xbb\x1a\xb0\xc1\x96\xfe\xbf\x67\xde\x7a\x52\xce\x7a\xf6\xf8\xc2\xeb\xa4\x59\xd1\x67\xb6\xb9\x3c\x7a\xa0\x6c\x95\xd0\x1f\x2e\x9e\x8c\x4c\x3e\x1e\x85\xfd\x3b\x4d\x47\x78\xa4\xff\xc5\xf3\x77\x7b\xcc\x2c\x59\x4f\x67\x33\x78\x9a\xa7\x8f\x39\x97\xc6\x72\x57\xf8\x67\xcb\x55\x8c\x35\xca\x2e\xbb\x78\x79\xf6\x24\x8e\x2b\x34\xa0\xb1\xdc\x2a\x59\xe2\x21\xf7\xa9\x11\x58\x1f\xaa\x3f\xd0\x38\xa9\xfa\x23\xe5\x7a\x22\xdc\x8c\x8d\x47\x86\xbe\xbf\xd8\x74\x5a\x76\xc6\xbe\xe3\x06\x7f\x78\xd4\xa5\xf1\x2b\x70\x19\x3c\xb0\x27\x74\x0c\x0a\x23\x16\x1d\x0c\x48\xbd\x0f\x4f\xbc\x6f\x4c\xac\xb3\x92\xb3\xf5\x3f\x4e\xf8\x47\x5e\x1a\x94\xe3\xff\x30\x77\xd3\xbc\xfe\x97\x08\xfe\xfc\xcc\x91\x6c\xe7\x67\xeb\x5a\x33\x23\xda\x6a\xa7\x6b\xa3\xe3\xb5\x66\xbe\x96\x2a\x69\x3f\x5b\xe1\xe9\x90\xa5\xcd\x43\x20\x3b\x17\x83\xf1\x7f\xd0\x1e\x18\xb9\x59\x84\xfd\x91\xdb\x31\x98\xcd\x24\xe6\x5c\x63\x96\xdf\x8d\x8c\xe5\x86\xcc\x3b\x67\xd6\x29\xa5\x3b\x91\xeb\xad\x92\x37\xd7\x20\x16\x0d\x9c\xb1\xf9\x9c\x45\x31\xeb\xcc\xf0\x48\x43\x0b\x6f\x82\x56\xeb\x28\x7a\x68\x98\x57\xda\xb8\xd3\xc5\x12\xc1\x83\x5e\xf0\xe2\x83\x3b\x57\x8f\x34\x23\xa6\xf1\xb1\x71\x3b\xc8\x03\x38\x3e\xc9\x0b\x82\xee\x2c\xaf\xf4\xab\x24\xf7\xa5\x58\x7c\xa9\xf3\xcd\xc5\x2e\xcb\xf2\xbb\x69\xd9\x16\x4e\x93\x78\x12\xc1\x4f\x30\x89\x1b\x43\x4f\x66\x50\x7a\xc1\xbf\x0e\x90\x0f\xce\xfc\x18\x44\xaf\xb3\x7c\xa1\x9e\xa3\x1c\xe6\xec\x6e\x1c\x7f\x76\xcf\xd1\x21\x73\xbc\xdf\xb0\x01\x78\xc6\x1f\x04\x5a\x50\xb5\x63\xc7\xbd\x28\xd8\x36\x21\x8c\xa9\x7e\xd5\xff\x27\x67\x37\xda\x13\xc9\x96\x55\x8a\x5f\x7f\x6f\xb8\xf5\x35\x30\x48\x2a\x75\xbd\x56\x73\x79\xac\x26\x1a\x54\x2a\x83\x3a\x92\x76\x29\xf7\xea\xb6\x71\xdd\xb4\x92\xbc\xee\xe0\x76\x22\x55\x07\x06\xbe\xed\x23\x61\xee\xdc\x87\x47\x16\xa6\xad\xd2\xfc\xfc\xd7\x78\x6a\x27\xf9\x39\xe6\xf3\x39\x2c\x33\x90\x8a\x3f\xbc\xca\x4b\xd0\x28\x72\xbc\xc9\xe5\x0a\xcc\x1a\x25\x7f\xed\xa5\x76\xc6\xf5\xec\xfc\xfd\x56\x52\x68\x4c\xd2\x7b\xfe\x92\xce\x42\xc7\xb4\x3f\x83\x1e\x9d\x3b\xfb\x83\x69\x6f\x06\xed\x25\xa5\xfe\x04\xfe\x81\x11\x74\xcb\x91\xf9\xbd\x3d\x29\x63\x8e\x7d\x9d\x5a\x20\x6c\xc0\xb4\xe3\x6a\x6f\x87\x9b\xce\x3c\x14\x03\xbd\x6f\x92\x2c\x10\xcb\x8a\xf3\x9e\x5f\x2d\x84\xff\x0a\x00\x00\xff\xff\xa1\xb1\x94\x3b\x01\x2b\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
