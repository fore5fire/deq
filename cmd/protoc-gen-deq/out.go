package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\xe3\x36\x12\xfe\x2c\xfd\x8a\xa9\xd1\x16\xd6\xd6\xa1\x71\x5f\x8d\xcd\x87\xbd\xa4\x97\x1a\xb8\x6e\x83\x26\x87\x2e\xb0\x28\x16\x8a\x34\xb2\x85\xc8\xa2\x97\xa4\x37\x09\x0c\xfd\xf7\xc3\x0c\x29\x89\x7a\xb1\xf3\xb2\xcd\x5e\x6f\x81\x36\x92\x48\xcd\x3c\x9c\x79\x38\x9c\x19\x6b\x3e\x9f\x87\xf3\x39\xc0\x05\x96\xa8\x62\x83\x29\x24\x32\x45\x01\xe7\x12\x4a\x69\x60\x23\xd3\x3c\x7b\x10\x3c\x45\xcb\x9d\x4a\x70\x01\xfb\x3d\x88\x2b\xbe\x86\xaa\x0a\x49\xc0\x36\x4e\x6e\xe3\x15\xf2\xc8\xa5\xbb\xae\xaa\x30\xcc\x37\x5b\xa9\x0c\x4c\xc3\x60\x92\xc8\xd2\xe0\xbd\x99\x84\xc1\x24\xdb\xd0\x9f\xfd\x1e\xf2\x0c\xc4\x2f\xb1\xfe\x15\xcd\x5a\xa6\x1a\x4e\xaa\x2a\x0c\x26\xfa\xa1\x4c\x68\x96\x36\x2a\x2f\x57\xda\xce\xc4\x32\xb5\xc3\xfb\x3d\xbd\x74\xfd\xb0\x45\x5d\x55\x13\x93\x6f\x70\xb2\xdf\x63\x99\x92\xb6\x60\xb2\xca\x4d\x11\xdf\x88\x44\x6e\xe6\xb7\xb1\x49\xd6\x78\x26\x53\x9c\xa7\xf8\xf9\x88\xbe\x83\xef\xd0\x7f\x72\x6b\x06\x00\x4e\x40\xc5\xe5\x0a\xe1\xfb\xed\xed\x6a\x06\xdf\x6f\x63\xb3\x86\xc5\x29\x88\x25\x2f\x56\x83\x9d\x45\xa3\x55\x05\x13\xba\x8a\xcd\xba\xaa\x26\xf6\x5d\x12\x54\x55\x61\x14\x86\xad\x24\xbb\x1e\xb6\x98\x79\xd8\x92\x19\xc5\x85\x7c\x1f\x6f\xb0\xaa\x7e\xfe\x82\xa5\x01\x6d\xd4\x2e\x31\xb0\x0f\x83\xe5\x39\x04\x41\x10\x00\x80\xb5\x4f\x18\x9c\x29\x8c\x0d\x5e\xe7\x1b\x04\x00\x32\x88\xa0\xeb\x30\x38\xc7\x2c\xde\x15\xe6\xca\xc4\x06\x21\xc5\xcf\x82\xaf\xc2\xc0\x3e\x70\xff\xbc\xe7\xcb\x32\xc5\x7b\xd4\xf6\xf9\xc7\x3f\x9d\x78\x02\xdd\x80\x81\x37\x7c\xf3\x3b\x66\x55\x15\xd6\x60\x3f\x79\x13\xae\xe5\x36\x4f\xce\x64\x99\xe5\x2b\xc8\x4b\x83\x2a\x8b\x13\x24\xd8\xbc\x8c\x6b\xd9\x5f\xd8\x94\xf4\xf3\x55\x04\xd3\x37\xfd\xd1\x19\xa0\x52\x52\x45\xa4\x6a\x3e\x1f\x58\x65\x69\x50\x41\xae\x21\x2e\x21\x37\xc4\x5d\xa9\x20\x93\x6a\x30\x4f\x0b\x58\x1a\x58\xc7\x76\x66\x8a\xa5\xc9\x93\xb8\xf0\xf0\x19\x49\xe2\x1b\x28\x24\x77\x06\x78\x9f\xe0\xd6\x80\x59\xc7\xf4\x3f\x04\xeb\x88\x0d\x53\x07\x14\x9a\x9d\x2a\x35\xc4\x03\x65\x62\xdc\x83\x16\xab\x6f\x91\xf7\x78\x6f\xa6\x89\xb9\x07\xb7\x31\xc4\x99\xfd\x7b\xd4\x10\xc1\x59\x21\x35\x4e\xa3\xc6\xf8\x1f\x3e\x7c\xf8\x34\xaa\xcb\x63\x0c\xdd\x42\x77\x79\x61\xe0\x9c\x74\xc0\x79\xce\xe2\x84\xb1\x59\x2b\x19\xa1\xa4\x07\x43\x74\x2c\x5b\xa9\x25\x7b\x21\x97\xe5\x99\xdc\x6c\x0b\x34\x48\x1b\x2e\xaf\x1f\x42\xe2\x9e\xa6\x33\x90\x8a\x7c\xc1\x8b\x9a\x91\xa2\x3c\x03\x59\x22\xc8\x24\xd9\x29\x4c\x05\x5c\x21\x76\x01\x0b\x86\x42\xde\xdd\x48\x85\x90\x97\x99\x54\x1b\x16\x2b\xc2\x6c\x57\x26\x30\xcd\x0d\xbc\x39\x64\x8d\x08\x5e\x62\x6d\xd8\x87\x61\x90\x67\xf0\x5d\x6e\x44\x83\x81\x84\xd0\x48\x10\xf0\xda\xec\xc0\xcf\x4a\x4d\x23\xf8\xee\x14\xca\xbc\xe0\xb1\xc0\x1a\x8d\xee\x67\xdd\x59\x61\x10\x54\x61\x77\xfc\x90\xf5\x42\x9a\x19\x06\x29\x7e\xb6\xdc\x5b\x9c\xb6\xa2\x78\xf3\x44\x61\x18\x20\xa3\x75\x63\xd6\x79\xe2\xc8\x66\xb3\x7b\x8d\x97\x45\xaf\x79\x90\x7d\x44\xd9\xc6\x10\x22\xa9\xb2\x29\xc5\xed\x2f\xa8\x4c\xeb\x0e\x30\x72\x40\x81\x05\xfc\xf0\x65\xc2\x48\x22\x42\x1d\xd6\xd2\x70\x46\x02\x89\x4d\x4f\x71\x92\x23\x37\xc1\xa9\x17\xda\xf2\xdd\x8b\xc1\x74\xed\x02\xe7\x15\xaa\x2f\x79\x62\x63\x67\xbd\xf1\x86\xa1\xa8\xdd\x0c\x86\x9e\x6a\xd8\xc4\xdb\x8f\x36\xc0\xd5\x71\xae\x86\xf8\x1e\xef\xc6\x44\x4c\x23\x8e\x7d\x43\xd1\xfb\x66\xad\x3f\x8e\x8d\x93\x65\xad\xce\x05\x6c\xe2\x5b\x9c\x0e\x34\x47\x33\xb2\x18\xaf\xef\x7b\xb7\x1a\x92\xc2\x27\x0a\x5f\xd0\x8a\xdb\x05\x37\x27\x85\x35\x68\x42\xb0\xfc\xf7\x3a\xda\x23\x38\x44\x05\x6f\x7b\x35\x5b\x80\xef\x38\xb6\x8f\x6e\x03\x14\x2c\x99\x38\x93\x88\x7e\xd8\xb0\x5e\x3b\x48\xa2\xbc\x4c\xa4\x52\x98\x10\x79\x48\xc6\x0f\x9a\xd8\x62\x05\x3a\xc6\x6c\xf4\x8a\xd6\x5c\xe2\xdd\x94\xb2\x08\x3e\x65\xa0\xaa\xa2\x30\x70\xfc\xde\xe8\x95\xf8\x4f\xb9\x89\x95\x5e\xc7\xc5\x14\xc5\x65\xfc\x50\xc8\x38\x7d\x16\x99\x77\xf5\xfb\xb0\xb5\x6f\x1f\x22\xee\x8f\x63\x16\x21\xc9\xcb\xf3\x05\xb4\xff\x50\x2c\xcf\x67\x61\xe0\x9f\x91\x0b\x20\xa4\xf4\xb0\x3d\x98\x17\x3c\xb5\xbd\xa7\x51\xff\x78\x5e\x00\x0a\xff\x9e\xc6\xdd\x40\xa3\xa8\x19\x70\xe7\xf4\xa2\x41\x60\xef\x89\x46\xbd\xdd\xf6\x18\x39\xfa\xac\xb8\x96\x35\x39\x46\x09\x11\x41\x7b\x5c\x77\xc8\x71\xb3\xcb\x9a\x28\x84\x3e\x35\xc4\xaf\xce\x5b\xc7\x9c\xd4\xc8\xdc\x57\x2c\xa5\xe3\x87\x76\xf0\xa0\xed\x2f\x6b\x4f\xf2\x3f\xc2\xf2\x7a\xb6\x67\xf3\x35\x03\x63\xdb\xe0\xd5\x3c\x54\x6f\x33\x1b\x35\x38\x46\x66\x90\xc0\xe9\xc0\x9e\x93\xfd\x5e\x5c\x2a\x69\xe4\xbf\x76\x45\x61\xdf\x9d\x58\x9b\xf2\xde\x9b\x81\xbc\x25\x47\x25\xc2\xc6\xa5\x8f\x63\xf3\xff\x64\xe9\xf2\xd6\x97\xcb\xd3\xf9\x4c\x3a\xa6\xe8\xc9\x4b\xbb\x42\x33\x58\x9d\x0d\x0e\x2e\x2e\x92\xee\xe3\x20\xe1\xd4\x81\x6a\x4e\x07\x77\x38\x18\xdc\x6c\x0b\xca\x72\x27\x49\x91\x63\x69\x26\x20\xc0\x46\xd1\x76\x44\x5b\x64\xed\x90\x7f\xba\xa4\x98\xe5\xa5\xf7\x3a\xcf\x38\x39\x12\xa0\xdd\xd9\xe3\x9e\x54\xd5\x19\xbf\xd8\xcd\xf8\xae\x1e\xca\xe4\x5d\x51\x5c\xcb\xb1\x44\x64\x06\x0a\x37\xd2\x65\xea\xf6\xed\xc8\xee\x31\xbf\xe4\x68\xc3\x7f\x70\x41\xf6\x03\x67\x40\xa8\xe3\xfa\xa8\xe4\x3c\x75\x36\x9d\x81\xdc\x52\x86\xa1\x41\x08\x61\xab\x1b\x71\x81\xe6\x37\x7e\x68\xcf\x01\xf0\xf6\x3d\x0c\xd2\xcf\x7f\x52\x81\x34\xaa\x59\x1f\x52\xad\x9b\x5a\x62\x4c\x7b\x2d\xb0\x81\xe0\x9d\x8f\x8f\xa2\xb9\xda\xdd\x3c\xd5\x04\xeb\xb8\x4c\x0b\x54\x40\xdc\x9c\x0e\x46\x0f\x84\x3b\x17\xe2\x9c\x17\x38\x33\xe8\x6b\xa3\x24\x65\x2a\xb7\x46\xc3\x1b\x72\x1c\xdd\xda\xa5\xe8\x08\xc6\xe1\xdb\xf4\xbb\x2f\x8c\x43\xc4\x4b\x85\x5d\x92\x1d\x7a\x07\xfc\xa8\x15\x0e\x07\xf6\xa3\x19\x00\xd5\x92\xc5\xd3\x34\x34\x54\xf3\xc8\xeb\xd7\xce\x35\x8f\xeb\x12\xdc\x3d\xad\xb7\xcd\x31\xd8\xcb\x92\xc8\x7f\x10\xfd\x6f\x3b\x33\x3e\xde\xae\xc2\x83\xe2\x15\xaf\xfd\x3d\xdb\x26\x8b\xe9\x4d\x5b\x24\xdb\xc1\x30\x48\xd6\x71\x59\x62\xd1\x54\xdf\x89\x4d\x03\x8f\xc5\xba\x6e\x6e\xd9\x53\x37\x4d\x6f\x3c\xf9\x33\xe8\xca\x9f\xc1\x13\xe4\x47\x6d\xd2\xeb\x96\xe0\x25\xa5\x9f\x7a\x63\x14\xd0\xd3\x9b\x05\xa4\x37\x74\x52\x39\x6d\x8b\x5a\x2d\x3f\x63\xa1\x0b\xa7\xd9\x65\xa7\x6d\x50\xef\x0b\x8c\xe0\x85\x71\x8d\x50\xa2\x52\x09\xe7\x76\x94\x1a\x13\x06\x57\x13\xc2\x3f\xa2\x30\xb8\xe3\x84\x50\x3f\x94\x89\xf8\x23\xce\xcd\x85\x92\xbb\xed\xbe\x0a\x83\xc4\xdc\xcf\x20\x89\xcb\x04\x0b\x3e\xc8\x9c\xc2\x3f\x72\xb3\x3e\xe3\xa7\x5c\xa3\x51\xe9\x34\x92\x36\x07\x77\x2b\xf1\x2e\x4d\xa7\xa4\x60\x25\x6d\x3c\xb0\xb9\x6b\x8a\x19\x2a\xb8\x5b\x89\x73\x59\x22\xd7\x56\x8d\xb3\xf9\xb8\x4c\x6f\xc4\x99\xbd\x9f\x26\xa2\xb6\x17\x24\xc2\xda\x69\x24\x15\x88\x1a\xa1\x6e\x76\x53\xcd\x84\x41\x9d\xd4\x72\xff\xe5\xa1\x4c\xac\xf1\x6a\x63\x35\x34\x88\x6c\x9d\xd9\x4b\x9c\x02\x8d\x05\x5a\x8a\xb2\x06\xca\x5d\x16\x74\x9d\xc4\x1a\x81\x6d\xfa\xf6\x84\xfe\xf2\xc3\xca\x96\x9c\xd5\xb4\xdd\x01\xdc\x2c\xf3\x56\x0f\x61\x40\x76\x21\x2b\x73\x85\x9a\x30\x4e\x12\x14\xd9\x17\x9b\x24\xfc\xed\x09\x3d\x0d\x03\x6b\xfe\x29\x7b\xa9\x7e\xaf\xad\xfa\x94\x0a\x2b\x18\x6f\x70\xf9\x3c\xea\x9e\xa7\x2d\xa1\xfe\x07\x47\x1b\xd9\x32\xfc\x7a\x7f\x1f\x72\x77\x5d\x79\x37\x69\x72\x3d\xe5\x02\x8d\x75\x7c\x9e\x36\x2b\x10\x42\x3c\x5a\xd4\x34\x79\x32\x76\xc5\xd6\xe8\xbe\x51\x0b\xa0\x17\x6a\x0f\xb6\x01\x2c\xc8\x7e\xea\x7b\x84\x02\x7f\xa7\x44\xe3\x1b\x71\x43\x0f\xc8\x51\x63\xae\x19\xa2\xbf\x82\x22\xba\x09\xb3\xdd\x85\x8f\x9d\x97\x05\x96\x0d\x51\x34\x41\xcf\xa4\x82\x98\xce\xe1\xc5\xa9\xdb\xd0\xcd\x30\xab\x7d\x26\x09\xf1\x40\x58\xfb\x6b\xf9\xc7\x81\xcf\xae\xfd\x63\x4c\xb5\x02\x5f\xc3\x90\x98\xfa\x59\xcc\xfc\x96\x49\x27\x97\x40\xaf\xc5\x3b\x67\x82\x7a\xe0\x6a\x77\x63\x79\x66\xd1\x8e\xe7\x61\x9d\xa6\xd1\x58\x33\x20\x78\x19\x19\xc6\xd8\x10\x6c\xe3\x32\x4f\x9e\xe5\xfd\x09\xfc\x44\x62\x2c\x71\xec\x01\xcc\xde\xee\x52\xcb\xb9\xc5\xae\x16\x5d\x34\xac\xa2\xa7\x12\xe0\x2f\xac\x03\x5e\x35\xb2\x04\x63\xcd\xac\xcb\xdb\x55\x55\x1d\xea\xc0\x72\x8f\xc5\xa0\x5a\x00\x34\xd2\xde\xe3\x5d\x77\x81\xdc\xe1\x38\xab\x73\x44\x71\x38\x4b\x7c\xaa\xfd\xbe\xa2\xf4\xf9\xff\xb0\x5f\x77\x81\x5f\x6d\xbf\xd7\xae\xf6\xb8\xf2\x19\xe4\x2b\x23\x06\xec\xf6\x0c\x5f\x94\x51\x8c\xe1\xa0\xed\xdd\xec\xf5\x41\x46\xd1\x45\xe6\x3c\x7e\x59\xc7\xae\x17\xa5\x37\xdb\xdd\xcd\x40\x0d\xb6\xf2\xff\x9e\x19\xd5\xb3\xce\xac\x17\x97\xef\x5e\x25\xc9\x86\x3e\xb7\xc5\xd5\xd1\x0d\x45\x52\x86\x3f\xd8\x9c\x8c\x54\xfe\x4f\xc2\xfe\x8d\xba\x03\xdc\xc8\xfe\xe4\xf1\xdd\x6e\x33\x2b\xd6\xb3\xd9\x0c\x9e\xc7\xf4\x31\x72\x29\xd4\xbb\xc2\xdf\x5b\x9c\xe8\xd6\x18\xbb\xca\xc4\xf2\x9c\x69\x4d\x39\xec\xbb\x3b\x2e\xb4\x9e\xa5\x7f\x85\x06\x14\xea\xad\x2c\x35\x1e\x22\x53\x8d\xc7\x32\xaa\xfe\x48\xe1\xa4\xea\xb7\x55\xeb\xae\x68\xd3\x3a\x1d\x69\x7c\xfe\x62\x0f\x57\xdd\x69\x7d\x8e\xbb\xff\xf1\xc6\x8f\xc2\xcf\xc0\xc9\xf9\xc0\xbb\xd0\x71\x2f\x8c\xf8\x77\xd0\x2e\xf4\x3e\xbe\xf0\xbe\xb3\xb0\xd4\x25\xea\xf5\x7f\xa0\xff\x77\xae\x0d\x96\xe3\x3f\x1a\xbb\xde\x56\xff\xd7\x78\xbf\x9b\xe4\x44\xb6\xdd\xa4\x75\x6d\x99\x11\x6b\xb5\xbd\xa6\xd1\x66\x53\xd3\x6d\x4a\x65\x69\x3f\xdd\xe0\x5e\x89\x95\xcd\x2d\x11\xdb\x25\x82\xf1\x1f\x29\x0f\x34\xa0\x2c\xc2\x7e\x03\xea\x18\xcc\xa6\x2f\x71\xa9\x30\xcb\xef\x47\x9a\x54\x43\xe5\x9d\x1d\xec\x8c\xd2\xed\x4f\xf5\x46\x89\xcd\x35\x88\x45\x03\x67\xac\x5b\x65\x51\xcc\x3a\x1d\x2d\xb2\xd0\xc2\xeb\x27\xd5\x36\x8a\x1e\x6b\x6d\x69\x1b\x85\xba\x58\x22\x78\x94\x05\xaf\xde\xc6\x72\xd9\x49\xd3\x70\x19\x6f\xa2\xb6\x6d\x2d\x80\xe3\x7d\xad\x20\xe8\x76\xb6\xb4\x9f\x33\xb9\x8f\xae\xc4\xb5\xca\x37\x57\xbb\x2c\xcb\xef\xa7\xba\x4d\xa3\x26\x62\x12\xc1\x4f\x30\x11\x8d\xa3\x27\x33\xd0\xde\x51\x50\x87\xcb\x47\x3b\x60\x0c\xa2\x57\xee\xbe\x52\x05\xa2\x87\x27\x78\x37\xaa\xbf\xb8\x02\xe9\x88\x39\x5e\x7d\xd8\x00\x3c\xe3\x6f\xeb\x2c\xa8\x9a\xd8\xa2\x17\x05\xdb\x92\x84\x31\xd5\xaf\xfa\x3f\xf4\x75\xa3\x3d\x89\x6c\x55\xa5\xf8\xf9\xf7\x46\x5b\xdf\x02\x83\x43\xa6\xce\xde\x6a\x2d\x4f\xb5\x44\x83\x4a\x66\x50\x47\xd2\xae\xe4\x5e\x16\x37\x6e\x9b\x76\x25\x3f\x76\x70\xbb\x25\x55\x07\xfa\x04\xed\xa3\xc4\xdc\xbb\x8f\x6f\x2c\x4c\x9b\xb3\xf9\xe7\x5f\xc3\xd4\x6e\x6f\xc0\x2a\x9f\xcf\x61\x99\x41\x29\xf9\xe3\xa3\x5c\x83\xc2\x24\xc7\x2f\x79\xb9\x02\xb3\xc6\x92\xbf\x78\x92\x3b\xe3\x2a\x78\xfe\x86\x29\x2e\x14\xc6\xe9\x03\x7f\x4d\x66\xa1\x63\xda\xef\xc8\x8e\x76\x61\xfd\x36\xad\xd7\x91\xf5\x0e\xa5\x7e\x3f\xfa\x91\x86\x6c\xab\x91\xf5\xbd\x3d\xd1\x82\x63\x5f\x27\x17\x08\x1b\x30\x6d\xf3\xd6\x9b\xe1\x5a\x44\x8f\xc5\x40\xef\xbb\x1c\x0b\xc4\xaa\xe2\x73\xcf\xcf\x16\xc2\xff\x06\x00\x00\xff\xff\xbc\xda\xac\x2c\x4c\x2a\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
