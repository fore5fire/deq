// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\xdb\x46\xf2\x7f\x4d\x7e\x8a\xa9\xd0\x16\x62\x2a\xaf\xff" +
	"\x7f\xe0\x70\x2f\x84\xfa\x45\xce\xee\xb9\x02\xae\xa9\x51\xf9\xae\x01\x82\x22\xa0\xc9\xa1\x44\x58\xe2\xca\xcb\x55" +
	"\x6c\x43\xe0\x77\x3f\xcc\xec\x2e\xb9\x7c\x90\x2c\x3b\x71\xda\x33\x90\x98\xdc\x87\xd9\x79\xf8\xed\x3c\x99\xa7\xa7" +
	"\xa7\xe1\xe9\x29\xc0\x25\x16\xa8\x62\x8d\x29\x24\x32\x45\x01\x17\x12\x0a\xa9\x61\x2d\xd3\x3c\x7b\x14\xbc\xa4\x94" +
	"\x5b\x95\xe0\x14\x76\x3b\x10\x73\x7e\x86\xaa\x0a\x89\xc0\x26\x4e\x6e\xe3\x05\xf2\xcc\x95\x7d\xae\xaa\x30\xcc\xd7" +
	"\x1b\xa9\x34\x8c\xc3\x60\x94\xc8\x42\xe3\x83\x1e\x85\xc1\x28\x5b\xd3\xaf\xdd\x0e\xf2\x0c\xc4\xcf\x71\xf9\x0b\xea" +
	"\xa5\x4c\x4b\x38\xa9\xaa\x30\x18\x95\x8f\x45\x42\xab\x4a\xad\xf2\x62\x51\x9a\x95\x58\xa4\x66\x7a\xb7\xa3\x4d\xd7" +
	"\x8f\x1b\x2c\xab\x6a\xa4\xf3\x35\x8e\x76\x3b\x2c\x52\x3a\x2d\x18\x2d\x72\xbd\x8a\x6f\x44\x22\xd7\xa7\xb7\xb1\x4e" +
	"\x96\x78\x2e\x53\x3c\x4d\xf1\xee\xc0\x79\x7b\xf7\xd0\x3f\xb9\xd1\x3d\x06\x4e\x40\xc5\xc5\x02\xe1\xdb\xcd\xed\x62" +
	"\x02\xdf\x6e\x62\xbd\x84\xe9\x19\x88\x19\x0b\x5b\x82\x59\x45\xb3\x55\x05\x23\x7a\x8a\xf5\xb2\xaa\x46\x66\x2f\x11" +
	"\xaa\xaa\x30\x0a\xc3\x86\x92\x91\x87\x35\xa6\x1f\x37\xa4\x46\x71\x29\xdf\xc5\x6b\xac\xaa\x9f\x3e\x61\xa1\xa1\xd4" +
	"\x6a\x9b\x68\xd8\x85\xc1\xec\x02\x82\x20\x08\x00\xc0\xe8\x27\x0c\xce\x15\xc6\x1a\xaf\xf3\x35\x02\x00\x29\x44\xd0" +
	"\x73\x18\x5c\x60\x16\x6f\x57\x7a\xae\x63\x8d\x90\xe2\x9d\xe0\xa7\x30\x30\x03\xf6\xc7\x1b\x9f\x15\x29\x3e\x60\x69" +
	"\xc6\x3f\xfc\x61\xc9\x87\xc1\x1c\x57\x98\x68\xa9\xdc\x16\x77\xae\x1b\xff\x0f\xaa\x32\x97\x05\xe4\x85\xfe\xfb\xdf" +
	"\x42\x12\xb2\x66\x1e\xde\xf0\xcb\x6f\x98\x55\x55\xe8\x84\xfb\xe8\x2d\xb8\x96\x9b\x3c\x39\x97\x45\x96\x2f\x68\x3f" +
	"\xaa\x2c\x4e\x90\xc4\x64\xb1\xaf\x65\x57\x11\x63\xe2\x97\x9f\x22\x18\xbf\xe9\xce\x4e\x00\x95\x92\x2a\xa2\xa3\x4e" +
	"\x4f\x7b\x5a\x9c\x69\x54\x90\x97\x10\x17\x90\x6b\xc2\xba\x54\x90\x49\xd5\x5b\x57\x0a\x98\x69\x58\xc6\x66\x65\x8a" +
	"\x85\xce\x93\x78\xe5\xf1\xa7\x25\x91\xaf\x59\x21\xba\x13\xc0\x87\x04\x37\x1a\xf4\x32\xa6\xff\x10\x8c\xe1\xd6\x0c" +
	"\x35\x50\xa8\xb7\xaa\x28\x21\xee\x1d\x26\x86\x2d\x6e\x78\xf5\x35\xf2\x0e\x1f\xf4\x38\xd1\x0f\x60\x2f\x92\x38\x37" +
	"\xbf\x0f\x2a\x22\x38\x5f\xc9\x12\xc7\x51\xad\xfc\xf7\xef\xdf\x7f\x1c\x3c\xcb\x43\x18\xbd\x42\x5b\xbc\x30\xb0\x46" +
	"\xda\x63\x3c\xab\x71\xe2\xb1\x96\x95\x94\x50\xd0\x40\x9f\x3b\xa6\xad\xd4\x8c\xad\x90\xcb\xe2\x5c\xae\x37\x2b\xd4" +
	"\x48\x17\x34\x77\x83\x90\xd8\xd1\x74\x02\x52\x91\x2d\x58\xa8\x09\x1d\x94\x67\x20\x0b\x04\x99\x24\x5b\x85\xa9\x80" +
	"\x39\x62\x9b\x61\xc1\xac\x90\x75\xd7\x52\x21\xe4\x45\x26\xd5\x9a\xc9\x8a\x30\xdb\x16\x09\x8c\x73\x0d\x6f\xf6\x69" +
	"\x23\x82\x97\x68\x1b\x76\x61\x18\xe4\x19\x7c\x93\x6b\x51\xf3\x40\x44\x68\x26\x08\x58\x36\x33\xf1\x93\x52\xe3\x08" +
	"\xbe\x39\x83\x22\x5f\xf1\x5c\x60\x94\x46\xef\x93\xf6\xaa\x30\x08\xaa\xb0\x3d\xbf\x4f\x7b\x21\xad\x0c\x83\x14\xef" +
	"\x0c\xf6\xa6\x67\x0d\x29\xbe\x3c\x51\x18\x06\xc8\xdc\xda\x39\x63\x3c\x71\xe0\xb2\x99\xbb\xc6\x62\xd1\x36\x8f\x65" +
	"\x9f\xa3\x6c\xad\x89\x23\xa9\xb2\x31\xf9\xf9\x4f\xa8\x74\x63\x0e\xd0\xb2\x07\x81\x29\x7c\xf7\x69\xc4\x9c\x44\xc4" +
	"\x75\xe8\xa8\xe1\x84\x08\x12\x9a\x8e\x31\x92\x05\x37\xb1\xe3\x04\x6d\xf0\xee\xf9\x6c\x7a\xb6\x8e\x76\x8e\xea\x53" +
	"\x9e\x18\x5f\xeb\x2e\x5e\xdf\x15\x35\x97\x41\xd3\x68\x09\xeb\x78\xf3\xc1\xf8\x3d\xe7\x17\x1d\x8b\xef\xf0\x7e\x88" +
	"\xc4\x38\x62\xdf\xd7\x27\xbd\xab\x65\xfd\x7e\x68\x9e\x34\x6b\xce\x9c\xc2\x3a\xbe\xc5\x71\xef\xe4\x68\x42\x1a\x63" +
	"\xf9\xbe\xb5\xd2\x10\x15\x8e\x40\xfc\x40\x12\x37\x02\xd7\x91\xc5\x28\x34\x21\xb6\xfc\x7d\xad\xd3\x23\xd8\x07\x05" +
	"\xef\x7a\xd5\x57\x80\xdf\xd8\xb7\x0f\x5e\x03\x14\x4c\x99\x30\x93\x88\xae\xdb\x30\x56\xdb\x0b\xa2\xbc\x48\xa4\x52" +
	"\x98\x10\x78\x88\xc6\x77\x25\xa1\xc5\x10\xb4\x88\x59\x97\x0b\x92\xb9\xc0\xfb\x31\x65\x1d\x1c\x65\xa0\xaa\xa2\x30" +
	"\xb0\xf8\x5e\x97\x0b\xf1\xef\x62\x1d\xab\x72\x19\xaf\xc6\x28\xae\xe2\xc7\x95\x8c\xd3\x67\x81\x79\xeb\xf6\xc3\xc6" +
	"\xec\xde\x07\xdc\xef\x87\x34\x42\x94\x67\x17\x53\x68\x7e\x50\xcc\x2e\x26\x61\xe0\xc7\xc8\x29\x10\xa7\x34\xd8\x04" +
	"\xf2\x29\x2f\x6d\xde\x69\xd6\x0f\xe7\x53\x40\xe1\xbf\xd3\xbc\x9d\xa8\x0f\xaa\x27\x6c\x5c\x9f\xd6\x1c\x98\x77\x9a" +
	"\xa2\x6d\x36\x8a\xfb\x3b\xed\xd0\xc4\x9b\xb6\x41\x7e\xea\x4d\xdb\x21\x82\x63\xe7\xd6\x3e\x05\xb2\x2e\xba\xae\xa5" +
	"\x03\xd9\x20\xb0\x22\x68\xc2\x7e\x0b\x64\x37\xdb\xac\xf6\x66\xe8\x43\x4c\xfc\x62\xad\x7e\xc8\xd8\x35\xcd\x5d\xc5" +
	"\x54\x5a\xf6\x6c\x26\xf7\xda\xf0\xca\x21\x82\x7f\x88\x97\xd7\xb3\x21\xab\xaf\x9e\x18\xba\x4e\x07\x2d\xfd\xe7\xdb" +
	"\xd9\x5d\x7a\xe3\xc3\xd8\x63\x67\x90\xc0\x59\xcf\x2a\xa3\xdd\x4e\x5c\x29\xa9\xe5\x3f\xb7\xab\x95\xd9\x3b\x32\x96" +
	"\x61\x4f\x30\x01\x79\x4b\xe6\x4e\x84\xf1\x92\x1f\x86\xd6\xff\xc1\xd4\xe5\xad\x4f\x97\x97\x73\x84\x3c\x74\xd0\xd1" +
	"\xa2\xcd\x51\xf7\xa4\x33\xae\xca\x7a\x69\x3a\xfb\x30\x93\x70\x66\x99\xaa\x63\x95\x0d\x55\x1a\xd7\x9b\x15\xe5\xe8" +
	"\xa3\x64\x95\x63\xa1\x47\x20\xc0\xf8\xf4\x66\xa6\x34\x9c\x35\x53\x7e\xac\x4b\x31\xcb\x0b\x6f\x3b\xaf\x38\x39\x10" +
	"\x2e\x6c\x24\xb4\x23\x55\x75\xce\x1b\xdb\xf9\xe7\xfc\xb1\x48\xde\xae\x56\xd7\x72\x28\x2d\xa2\xa4\xa4\x34\x31\xdf" +
	"\xec\x9d\x80\xdc\xe8\x12\x84\x10\xa6\x88\x12\xb4\xfd\xd7\x0d\xa5\x2b\x91\xb9\xc2\x7e\x25\xd5\x44\xa9\xe0\x92\x14" +
	"\x0b\x56\xb3\xe0\xc2\xcf\xe0\x91\x79\x6a\x95\xcd\x87\xe5\xb2\xf0\xcf\xbb\x44\xed\x8e\xa3\x70\x05\x9e\x5b\x81\x5e" +
	"\x96\xfc\x0f\xaa\xfb\x06\x4f\x2e\xf7\x1d\x5d\xd6\x25\xd2\xd0\xe9\x8e\x60\xcd\x82\x17\xc6\x9f\xe4\x66\xbe\xbd\x39" +
	"\x56\x05\xcb\xb8\x48\x57\xa8\x80\x40\x3b\xee\xcd\xee\xf1\xa6\xd6\x83\x5a\x2b\x70\x02\xd3\x3d\x8d\x72\xa9\x31\x5b" +
	"\xf0\x0d\xd9\x94\x5e\x8d\x28\x65\x04\xc3\xec\x9b\x2a\xa1\x4b\x8c\x3d\xd0\x4b\x89\x5d\x1d\xaf\x87\xfd\x91\xe3\x60" +
	"\xaa\x62\x50\x3d\x60\xf5\x2f\x8a\x72\xbf\x77\xe0\x00\xef\x5a\x10\x76\xd4\x5d\xbc\x43\xd2\xcd\x0a\xba\x25\x7b\x85" +
	"\xfc\x75\xab\x87\xe7\x1b\x61\x3d\x56\xbc\x62\xbc\x7b\xeb\x9b\xe4\x37\xbd\x69\x9a\x04\x66\x32\x0c\x92\x65\x5c\x14" +
	"\xb8\xaa\xbb\x00\x89\x49\x6b\x0f\x79\xcb\x76\xae\xdc\x39\x6e\x9c\xde\xb4\x14\xda\xa6\x3f\x81\x23\xe8\x47\x4d\x12" +
	"\x6f\x45\xb0\xe1\xc5\x92\x3a\x3b\x83\xd1\x88\x63\xc1\x26\x2e\xf2\x64\x3c\x72\x13\x79\x09\x0a\xef\xb6\xb9\xc2\x74" +
	"\x14\xd9\xea\xc9\xe5\x73\x1f\x3b\x34\x69\x7b\x7a\x33\x85\xf4\x86\xc2\xa5\xa5\x30\x75\x67\xf0\x18\x33\x33\xb5\x1c" +
	"\xdb\x2c\xbd\x09\x27\x5d\x82\x11\x3c\xe1\x51\x15\xae\xa5\xed\xdc\x1c\x8b\x36\x12\x12\x95\x4a\x38\xfd\xa5\xea\x81" +
	"\xd8\xb3\x65\x33\xfc\x7f\x14\x06\xf7\x9c\x33\x97\x8f\x45\x22\x7e\x8f\x73\x7d\xa9\xe4\x76\xb3\xab\xc2\x20\xd1\x0f" +
	"\x13\x48\xe2\x22\xc1\x15\x47\x57\xcb\xcb\xef\xb9\x5e\x9e\xf3\x28\x97\xb1\xa4\x9f\x81\xca\x22\xb8\x5f\x88\xb7\x69" +
	"\x3a\xa6\x03\x16\xd2\xf8\x22\x93\xde\xa7\x98\xa1\x82\xfb\x85\xb8\x90\x05\x72\xf9\xe9\x92\xf3\x44\x1c\xbc\x79\x4e" +
	"\x7a\x23\xb2\x10\x22\x32\x05\x74\x27\x93\x0b\x4a\xce\x51\xcc\x73\x6a\x92\xa9\x29\x3d\x27\x71\x89\xc0\x9a\xf8\xf1" +
	"\x84\x7e\xf3\x60\x65\x6a\xe9\x6a\xdc\x5c\x05\xee\x1a\x7a\x3c\x43\x18\x90\x34\xa4\x1b\x2e\xbd\x13\x2e\x27\x89\x50" +
	"\x64\x36\xd6\xd5\xc5\x8f\x27\x34\x1a\x06\x46\x69\x63\xd6\xad\xdb\xd7\x94\xb3\x4a\x85\x15\x0c\x77\xfa\x7c\x60\xb4" +
	"\x43\x73\x1b\x21\xcf\xf0\x4e\x2f\x43\x4c\x18\xd0\xa2\x39\x72\xc3\xc0\xae\x7b\x87\xf7\xcd\xd2\x39\x6a\x76\xdf\x24" +
	"\x98\xbb\x3a\x6c\xc2\xf4\x46\x9c\x9b\xf7\x71\x22\xdc\x4d\x80\x44\x98\x1b\x30\x90\xa4\x46\xa1\x85\x84\x5d\x5c\x97" +
	"\xeb\x26\x61\x33\x6c\x88\x59\xba\xe2\x8c\x59\x6e\x35\x19\xfb\xff\xd8\xbc\x6e\xc7\x1c\xb5\x37\x3f\x1e\xd8\x13\xf5" +
	"\x12\x79\x12\xa5\x8b\x2b\x4b\x2f\x62\xfb\x1c\x63\x8b\x3f\x21\x31\x21\xc1\x5f\x51\xe5\xae\xbd\x53\xd7\x50\x6e\xc9" +
	"\x25\x6a\xa3\xac\x3c\xad\x25\x30\x77\xf0\x70\xe5\x5c\x17\x51\xd8\x26\xeb\xb8\xfb\x4a\x7d\xa6\x4e\xfc\xdb\xdb\x6b" +
	"\x32\x4c\x76\x2b\x9a\x03\x10\xf8\x2b\xa5\x89\x5f\x09\x1b\x65\x0f\x1c\x8e\x67\x87\x90\xf2\x33\x20\x52\xd6\x81\xaa" +
	"\x2d\xf8\x50\x12\xb3\xc2\xa2\x06\x4a\x49\xac\x67\x52\x41\x4c\xc9\xd1\xf4\xcc\x3a\xd7\x7a\x9a\x8f\x7d\x26\x08\x71" +
	"\x4f\x88\xf9\xb2\xf8\xe3\x20\x64\x64\xff\x10\x53\x09\xc8\xcf\xd0\x07\x66\xf9\x2c\x64\x7e\xcd\x92\x81\x2b\xdb\xd7" +
	"\xc2\x9d\x55\x41\xed\xed\xb7\x37\x06\x67\x86\xdb\xe1\xe4\xb8\xd5\x99\x1c\xea\x14\x05\x2f\x03\xc3\x10\x1a\xea\x14" +
	"\xf2\x78\xeb\x8f\xe0\x07\x22\x63\x80\xc3\xc2\x07\x6c\xed\x36\xb4\xac\x59\x8c\xb4\x68\xbd\x61\x15\x1d\x0b\x80\x2f" +
	"\x58\xc5\xbd\xaa\x67\x09\x86\x3a\xa6\x57\xb7\x8b\xaa\xda\xd7\xe6\xe7\x06\x9c\x46\x6e\x5c\x39\x6a\xef\xf0\xbe\x2d" +
	"\x20\xb7\xbf\xce\x5d\x02\x2e\xf6\xa7\xe0\xc7\xea\xef\x33\x0a\xd7\xff\x0d\xfd\xb5\x05\xfc\x6c\xfd\x71\xad\xde\xb9" +
	"\x44\x5f\xb2\x52\xe7\x72\xb4\x97\xaf\x0c\x28\xb0\xdd\x50\x7e\x51\x46\x31\xc4\x07\x5d\xef\xfa\xae\xf7\x32\x8a\x36" +
	"\x67\xd6\xe2\x57\xce\x77\x1d\x9d\xde\x34\xc1\xb1\x21\xf4\xd7\x4c\x9d\xea\xe0\xd4\xee\x3c\x9e\x0c\xb4\x37\x8e\x82" +
	"\xcf\x57\x6a\x81\x70\xb5\xf3\xd1\xc3\x8f\x81\xad\x21\xeb\xc1\x76\x02\xcf\x43\xce\x66\x7b\x33\xa0\xaa\x72\xbb\xf2" +
	"\xb1\xca\x89\xa3\xe3\xb1\x7d\x98\x98\x5d\x4c\x5c\xe9\xf5\xf6\x9e\x8b\xc8\x67\x9d\xbf\x40\x0d\x0a\xcb\x8d\x2c\x4a" +
	"\xdc\x67\x33\xc7\x8f\x31\x9c\xfb\x12\xe5\xa4\xea\x76\x9f\x5d\xf3\xb8\xee\x30\x0f\xf4\x87\x7f\x36\xc1\xaa\x6c\x75" +
	"\x88\x87\xcd\xff\x74\x77\x4b\xe1\x1d\x70\xb2\xdb\xb3\x2e\xb4\xcc\x0b\x03\xf6\xed\x35\x4f\xbd\x2f\x6c\xbc\x8f\x69" +
	"\xcc\x8d\x21\xe8\x75\xbf\xaa\xf8\x57\x5e\x6a\x2c\x86\xff\xd2\x6f\x1b\x78\xdd\x4f\x28\xfc\x96\x99\x25\xd9\xb4\xcc" +
	"\x96\x4e\x33\x03\xda\x6a\x1a\x6a\x83\x1d\xb5\xba\xa5\x96\xca\xc2\x7c\x9f\xc3\xdd\x1b\x43\x9b\x9b\x34\xa6\x15\x06" +
	"\xc3\x7f\x59\xde\xd3\x65\x33\x1c\x76\xbb\x6c\x87\xd8\xac\x6b\xe3\x2b\x85\x59\xfe\x30\xd0\x89\xeb\x1f\xde\xba\xc1" +
	"\x56\x29\xbb\x56\x33\xad\x33\x4b\x68\x76\x4c\x4c\x6b\x76\x86\x5a\x6b\x86\x8b\x49\xab\xfd\x46\x1a\x9a\x7a\x1d\x2e" +
	"\xa7\xa3\xe8\xa9\x3e\x5c\x69\xbc\x50\x9b\x97\x08\x9e\x44\xc1\xab\x37\xd6\x6c\xb4\xaf\x9b\x49\xc3\x9d\xe2\xa6\xd1" +
	"\x06\x70\xb8\xd3\xc6\x7f\xdb\xf5\x72\x90\xd2\xcf\x41\xec\x97\x75\xe2\x5a\xe5\xeb\xf9\x36\xcb\xf2\x87\x71\xd9\xa4" +
	"\x25\x23\x31\x8a\xe0\x07\x18\x89\xda\xd0\xa3\x09\x94\x5e\xa8\x75\xee\xb2\xc9\x55\xf6\x25\x2b\x81\xd7\xf0\x7b\xdd" +
	"\x8c\xbe\xec\x07\xca\xb6\x57\x7f\x71\x46\xdf\x22\x73\x38\x9b\x37\x0e\x78\xc2\x1f\x50\x1a\xa6\x1c\xb0\x45\xc7\x0b" +
	"\x36\x29\x3e\xf3\xe4\xb6\xfa\x7f\x0f\x6d\x7b\x7b\x22\xd9\x1c\x95\xe2\xdd\x6f\xf5\x69\x5d\x0d\xf4\x82\x8c\xcb\x86" +
	"\xdc\x29\xc7\x6a\xa2\xe6\x4a\x66\xe0\x3c\x69\x9b\x72\x27\x2b\x1a\xd6\x4d\x23\xc9\xf7\x2d\xbe\xad\x48\xd5\x9e\xba" +
	"\xbb\x19\x4a\xf4\x83\xfd\x62\xca\xb0\x69\x52\x23\x3f\xfe\xd5\x48\x6d\xd7\xda\xe6\xf0\xd3\x53\x98\x65\x50\x48\xfe" +
	"\x62\x8c\x5b\xfe\x49\x8e\x9f\xf2\x62\x01\x7a\x89\x05\x7f\xa6\x26\xb7\xda\x56\xc4\xfc\xe1\x59\xbc\x52\x18\xa7\x8f" +
	"\xfc\x09\xa0\x61\x1d\xd3\x6e\xb7\x79\xb0\xc3\xec\xb7\xa0\xbd\x6e\xb3\x17\x94\xba\x1d\xf2\x27\x9a\xcd\xcd\x89\x7c" +
	"\xde\x8f\x27\xa5\x60\xdf\xd7\xca\x05\xc2\x9a\x99\xa6\x31\xed\xad\xb0\x59\xe5\x53\x3e\xd0\xfb\x98\xca\x30\x62\x8e" +
	"\x8a\x42\x9b\xd9\xd5\x69\xde\x7f\x03\x00\x00\xff\xff\xcf\x1f\x28\xcf\x31\x2c\x00\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11313,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1581478642, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
