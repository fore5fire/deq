// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl (10.839kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x6f\xdb\x46\x12\x7f\x26\xff\x8a\x29\x91\x06\x62\x2a\xaf\x71\xc0\xe1\x1e\x84\xf8\x21\x67\xf7\x5c\x01\xd7\xd4\xa8\x7d\xd7\x00\x41\x11\xd0\xe4\x50\x22\x2c\x71\xe5\xdd\x55\x6c\x43\xe0\xff\x7e\x98\xd9\x5d\x7e\x4b\x76\x9c\x3a\xed\x05\x68\x4d\xee\xc7\xcc\xec\xcc\x6f\xe7\x4b\x3c\x3e\x3e\x0e\x8f\x8f\x01\xce\xb1\x44\x95\x18\xcc\x20\x95\x19\x0a\x38\x93\x50\x4a\x03\x6b\x99\x15\xf9\x83\xe0\x25\x5a\x6e\x55\x8a\x33\xd8\xed\x40\x5c\xf2\x33\x54\x55\x48\x04\x36\x49\x7a\x93\x2c\x90\x67\x2e\xdc\x73\x55\x85\x61\xb1\xde\x48\x65\x60\x12\x06\x51\x2a\x4b\x83\xf7\x26\x0a\x83\x28\x5f\xd3\x9f\xdd\x0e\x8a\x1c\xc4\x4f\x89\xfe\x19\xcd\x52\x66\x1a\x8e\xaa\x2a\x0c\x22\xfd\x50\xa6\xb4\x4a\x1b\x55\x94\x0b\x6d\x57\x62\x99\xd9\xe9\xdd\x8e\x36\x5d\x3d\x6c\x50\x57\x55\x64\x8a\x35\x46\xbb\x1d\x96\x19\x71\x0b\xa2\x45\x61\x56\xc9\xb5\x48\xe5\xfa\xf8\x26\x31\xe9\x12\x4f\x65\x86\xc7\x19\xde\x1e\xe0\xb7\x77\x0f\xfd\x27\x37\x66\x20\xc0\x11\xa8\xa4\x5c\x20\xbc\xda\xdc\x2c\xa6\xf0\x6a\x93\x98\x25\xcc\x4e\x40\xcc\xf9\xb0\x1a\xec\x2a\x9a\xad\x2a\x88\xe8\x29\x31\xcb\xaa\x8a\xec\x5e\x22\x54\x55\x61\x1c\x86\x0d\x25\x7b\x1e\xd6\x98\x79\xd8\x90\x1a\xc5\xb9\x7c\x9f\xac\xb1\xaa\x7e\xfc\x8c\xa5\x01\x6d\xd4\x36\x35\xb0\x0b\x83\xf9\x19\x04\x41\x10\x00\x80\xd5\x4f\x18\x9c\x2a\x4c\x0c\x5e\x15\x6b\x04\x00\x52\x88\xa0\xe7\x30\x38\xc3\x3c\xd9\xae\xcc\xa5\x49\x0c\x42\x86\xb7\x82\x9f\xc2\xc0\x0e\xb8\x7f\xad\xf1\x79\x99\xe1\x3d\x6a\x3b\xfe\xf1\x77\x47\x3e\x0c\x2e\x71\x85\xa9\x91\xca\x6f\xf1\x7c\xfd\xf8\x7f\x51\xe9\x42\x96\x50\x94\xe6\x1f\x7f\x0f\xe9\x90\xb5\xf0\xf0\x86\x5f\x7e\xc5\xbc\xaa\x42\x7f\xb8\x4f\xad\x05\x57\x72\x53\xa4\xa7\xb2\xcc\x8b\x05\xed\x47\x95\x27\x29\xd2\x31\xf9\xd8\x57\xb2\xaf\x88\x09\xc9\xcb\x4f\x31\x4c\xde\xf4\x67\xa7\x80\x4a\x49\x15\x13\xab\xe3\xe3\x81\x16\xe7\x06\x15\x14\x1a\x92\x12\x0a\x43\x58\x97\x0a\x72\xa9\x06\xeb\xb4\x80\xb9\x81\x65\x62\x57\x66\x58\x9a\x22\x4d\x56\x2d\xf9\x8c\x24\xf2\xb5\x28\x44\x77\x0a\x78\x9f\xe2\xc6\x80\x59\x26\xf4\x3f\x04\x6b\xb8\x35\x43\x0d\x14\x9a\xad\x2a\x35\x24\x03\x66\x62\xdc\xe2\x56\xd6\xb6\x46\xde\xe3\xbd\x99\xa4\xe6\x1e\xdc\x45\x12\xa7\xf6\xef\x41\x45\x04\xa7\x2b\xa9\x71\x12\xd7\xca\xff\xf0\xe1\xc3\xa7\x51\x5e\x2d\x84\xd1\x2b\x74\x8f\x17\x06\xce\x48\x7b\x8c\xe7\x34\x4e\x32\xd6\x67\x25\x25\x94\x34\x30\x94\x8e\x69\x2b\x35\x67\x2b\x14\xb2\x3c\x95\xeb\xcd\x0a\x0d\xd2\x05\x2d\xfc\x20\xa4\x6e\x34\x9b\x82\x54\x64\x0b\x3e\xd4\x94\x18\x15\x39\xc8\x12\x41\xa6\xe9\x56\x61\x26\xe0\x12\xb1\x2b\xb0\x60\x51\xc8\xba\x6b\xa9\x10\x8a\x32\x97\x6a\xcd\x64\x45\x98\x6f\xcb\x14\x26\x85\x81\x37\xfb\xb4\x11\xc3\x73\xb4\x0d\xbb\x30\x0c\x8a\x1c\xbe\x2b\x8c\xa8\x65\x20\x22\x34\x13\x04\x7c\x36\x3b\xf1\xa3\x52\x93\x18\xbe\x3b\x81\xb2\x58\xf1\x5c\x60\x95\x46\xef\xd3\xee\xaa\x30\x08\xaa\xb0\x3b\xbf\x4f\x7b\x21\xad\x0c\x83\x0c\x6f\x2d\xf6\x66\x27\x0d\x29\xbe\x3c\x71\x18\x06\xc8\xd2\xba\x39\x6b\x3c\x71\xe0\xb2\xd9\xbb\xc6\xc7\xa2\x6d\x2d\x91\xdb\x12\xe5\x6b\x43\x12\x49\x95\x4f\xc8\xcf\x7f\x46\x65\x1a\x73\x80\x91\x03\x08\xcc\xe0\xfb\xcf\x11\x4b\x12\x93\xd4\xa1\xa7\x86\x53\x22\x48\x68\x7a\x8a\x91\x1c\xb8\x49\x1c\x7f\xd0\x06\xef\x2d\x9f\x4d\xcf\xce\xd1\x5e\xa2\xfa\x5c\xa4\xd6\xd7\xfa\x8b\x37\x74\x45\xcd\x65\x30\x34\xaa\x61\x9d\x6c\x3e\x5a\xbf\xe7\xfd\xa2\x17\xf1\x3d\xde\x8d\x91\x98\xc4\xec\xfb\x86\xa4\x77\xf5\x59\x5f\x8f\xcd\x93\x66\x2d\xcf\x19\xac\x93\x1b\x9c\x0c\x38\xc7\x53\xd2\x18\x9f\xef\x95\x3b\x0d\x51\xe1\x08\xc4\x0f\x74\xe2\xe6\xc0\x75\x64\xb1\x0a\x4d\x49\xac\xf6\xbe\x0e\xf7\x18\xf6\x41\xa1\x75\xbd\xea\x2b\xc0\x6f\xec\xdb\x47\xaf\x01\x0a\xa6\x4c\x98\x49\x45\xdf\x6d\x58\xab\xed\x05\x51\x51\xa6\x52\x29\x4c\x09\x3c\x44\xe3\x7b\x4d\x68\xb1\x04\x1d\x62\xd6\x7a\x41\x67\x2e\xf1\x6e\x42\x59\x07\x47\x19\xa8\xaa\x38\x0c\x1c\xbe\xd7\x7a\x21\xfe\x53\xae\x13\xa5\x97\xc9\x6a\x82\xe2\x22\x79\x58\xc9\x24\xfb\x22\x30\x6f\xfd\x7e\xd8\xd8\xdd\xfb\x80\xfb\x7a\x4c\x23\x44\x79\x7e\x36\x83\xe6\x1f\x8a\xf9\xd9\x34\x0c\xda\x31\x72\x06\x24\x29\x0d\x36\x81\x7c\xc6\x4b\x9b\x77\x9a\x6d\x87\xf3\x19\xa0\x68\xbf\xd3\xbc\x9b\xa8\x19\xd5\x13\x2e\xae\xcf\x6a\x09\xec\x3b\x4d\xd1\x36\x17\xc5\xdb\x3b\xdd\xd0\xb4\x35\xed\x82\xfc\xac\x35\xed\x86\x08\x8e\xbd\x5b\xfb\x18\xc8\xfa\xe8\xba\x92\x1e\x64\xa3\xc0\x8a\xa1\x09\xfb\x1d\x90\x5d\x6f\xf3\xda\x9b\x61\x1b\x62\xe2\x67\x67\xf5\x43\xc6\xae\x69\xee\x2a\xa6\xd2\xb1\x67\x33\xb9\xd7\x86\x17\x1e\x11\xfc\x8f\x64\x79\x39\x1b\xb2\xfa\xea\x89\xb1\xeb\x74\xd0\xd2\x7f\xbe\x9d\xfd\xa5\xb7\x3e\x8c\x3d\x76\x0e\x29\x9c\x0c\xac\x12\xed\x76\xe2\x42\x49\x23\xff\xb5\x5d\xad\xec\xde\xc8\x5a\x86\x3d\xc1\x14\xe4\x0d\x99\x3b\x15\xd6\x4b\x7e\x1c\x5b\xff\x3b\x53\x97\x37\x6d\xba\xbc\x9c\x23\xe4\x21\x46\x4f\x3e\xda\x25\x9a\xc1\xe9\xac\xab\x72\x5e\x9a\x78\x1f\x16\x12\x4e\x9c\x50\x75\xac\x72\xa1\xca\xe0\x7a\xb3\xa2\x1c\x3d\x4a\x57\x05\x96\x26\x02\x01\xd6\xa7\x37\x33\xda\x4a\xd6\x4c\xb5\x63\x5d\x86\x79\x51\xb6\xb6\xf3\x8a\xa3\x03\xe1\xc2\x45\x42\x37\x52\x55\xa7\xbc\xb1\x9b\x7f\x5e\x3e\x94\xe9\xbb\xd5\xea\x4a\x8e\xa5\x45\x53\x50\xb8\x96\xae\xce\xb0\xbb\x63\x7b\x53\xdb\x05\x53\x13\x8c\x82\x73\xd2\x1f\x38\x05\x82\x8f\x32\xa3\x94\x8b\xcc\xe9\x74\x0a\x72\x43\xf9\x8e\x06\x21\x84\xad\xcd\xc4\x39\x9a\x5f\x78\xd0\x46\x25\x68\x79\x0f\x18\x24\xc3\xff\xa4\xf2\x6e\x94\xb3\xde\xc7\x5a\xd7\x95\xd0\x18\x77\x4f\xb0\x16\xa1\x15\xad\x1f\x95\xe6\x72\x7b\xfd\x54\x15\x2c\x93\x32\x5b\xa1\x02\xc2\xe6\x64\x30\xbb\xc7\x69\x3a\x47\xe9\xac\xc0\x79\x4a\x9f\x1b\xa5\x4c\x13\xb9\x31\x1a\xde\x90\xe1\xe8\xd5\x1e\x45\xc7\x30\x2e\xbe\x2d\x06\xfa\xc4\xd8\xd1\x3c\x97\xd8\x05\xe9\xa1\x97\x6e\x8c\x6a\x61\x7f\x78\x38\x98\x8f\xf4\xcb\x77\x0f\x46\xdf\x05\x70\xa3\x1e\xfb\x87\x78\xcf\x4b\x42\xf0\x5e\x11\x7e\xd9\x9a\xf1\xf9\x51\x51\x5a\xf5\x70\xff\xe2\x35\xf9\x67\x76\xdd\xd4\xe9\x76\x32\x0c\xd2\x65\x52\x96\xb8\xaa\x0b\xf1\xd4\x66\x96\x87\x1c\x56\x37\x5d\xed\xb1\x9b\x64\xd7\x2d\xfa\x53\xe8\xd2\x9f\xc2\x13\xe8\xc7\x4d\x1e\xed\x8e\xe0\x3c\xbc\x23\x75\x72\x02\x51\xc4\xee\x78\x93\x94\x45\x3a\x89\xfc\x44\xa1\x41\xe1\xed\xb6\x50\x98\x45\xb1\x2b\x60\x7c\x4a\xf5\xa9\x47\x93\xb6\x67\xd7\x33\xc8\xae\x29\x62\x39\x0a\x33\xcf\x83\xc7\x58\x98\x99\x93\xd8\x25\xca\x8d\x47\xef\x13\x8c\xe1\x99\x4e\x8d\x4e\x82\x4a\xa5\x9c\x66\x52\x96\x4e\x32\xb8\xf2\x14\xfe\x16\x87\xc1\x1d\xe7\xa6\xfa\xa1\x4c\xc5\x6f\x49\x61\xce\x95\xdc\x6e\x76\x55\x18\xa4\xe6\x7e\x0a\x69\x52\xa6\xb8\xe2\x28\xe6\x18\xfe\x56\x98\xe5\x29\x8f\x72\xb9\x48\x4a\x18\xc9\xe0\x83\xbb\x85\x78\x97\x65\x13\x62\xb0\x90\xd6\x19\xd8\x34\x3a\xc3\x1c\x15\xdc\x2d\xc4\x99\x2c\x91\xcb\xbc\x1a\x24\x1c\x2b\xb3\x6b\x71\x6a\xdf\x27\xa9\xf0\xfa\x82\x54\x58\x3d\x8d\x64\x13\x71\x4d\xd4\xad\xae\x0b\xab\x30\xf0\xf9\x35\xb7\x8e\x1e\xca\xd4\x2a\xcf\x2b\xab\x86\x4f\x6c\x4b\xde\x5e\xee\x15\x68\xce\x2a\xec\x73\x66\xd3\x9f\x19\x3d\xa7\x89\x46\x60\x9d\xbe\x3d\xa2\xbf\x3c\x58\xd9\xea\xb7\x9a\x34\x37\x87\xfb\x7c\xad\xd3\x43\x18\x90\x5e\x48\xcb\x5c\x2c\xa7\x2c\x27\x11\x8a\xed\xc6\xba\x1e\x78\x7b\x44\xa3\x61\x60\xd5\x3f\x61\x2b\xf9\x7d\x4d\x01\xaa\x54\x58\xc1\x78\x6f\xae\x8d\xa3\x6e\x30\x6d\x00\xf5\x27\xc4\x35\xd2\x65\xf8\xf5\xf6\xde\x67\x6e\xdf\x04\xa8\x33\x6d\xbf\xe4\x1c\x8d\x35\x7c\x91\xd5\x27\x10\x42\x3c\x5a\x5f\xd5\xa9\x36\x76\xc9\x7a\xe9\xbe\x51\x37\xa2\xe7\xa2\xf7\x76\x24\xac\x90\xfd\xbc\xf7\x00\x04\xfe\x4a\x59\xc6\x37\xc2\x86\x1e\x80\xc3\xcb\xec\x11\xa2\xbf\x02\x22\xba\x76\xb3\xdd\x83\x8f\xc5\xd9\x15\x96\x35\x50\x34\x89\x9e\x4b\x05\x09\xc5\xef\xd9\x89\xbb\xd0\xf5\x34\xb3\xfd\x42\x10\xe2\x1e\xb7\xf6\xc7\xe2\x8f\x1d\x9f\x3d\xfb\xc7\x84\x0a\x05\x7e\x86\x21\x30\xf5\x17\x21\xf3\x5b\x66\x9c\x5c\xff\xbc\x14\xee\x9c\x0a\xfc\xc4\xe5\xf6\xda\xe2\xcc\x4a\x3b\x9e\xbf\x75\xfa\x57\x63\xfd\x84\xe0\x79\x60\x18\x43\x43\x9d\xe5\x3c\xdd\xfa\x11\xfc\x40\x64\x2c\x70\x6c\x00\x66\x6b\x77\xa1\xe5\xcc\x62\x4f\x8b\xce\x1b\x56\xf1\x53\x01\xf0\x07\x16\x01\x2f\xea\x59\x82\xb1\xbe\xda\xc5\xcd\xa2\xaa\xf6\x35\x83\xb9\x4d\x63\x90\xdb\x1b\x9e\xda\x7b\xbc\xeb\x1e\x90\x9b\x24\xa7\x3e\x47\x14\xfb\xb3\xc4\xa7\xea\xef\x2b\xea\x9e\xff\x0f\xfd\x75\x0f\xf8\xd5\xfa\x7b\xe9\x52\x8f\x2b\xa6\x41\xbe\x32\xa2\xc0\x6e\xdb\xf1\x59\x19\xc5\x98\x1c\x74\xbd\xeb\xbb\x3e\xc8\x28\xba\x92\x39\x8b\x5f\x78\xdf\xf5\xe4\xf4\xa6\x09\x8e\x0d\xa1\xbf\x66\xea\x54\x07\xa7\x6e\x7f\xea\x68\xa4\x02\x7f\x12\x7c\xbe\x51\x95\xce\xbd\xe5\x4f\x2d\xfc\x58\xd8\x5a\xb2\x2d\xd8\x4e\xe1\xcb\x90\xb3\xd9\x5e\x8f\xa8\x4a\x6f\x57\x6d\xac\x72\xe2\xe8\x65\xec\x32\x13\xf3\x33\x86\x09\xe5\x84\xef\xee\xb8\x70\xf9\x22\xfe\x0b\x34\xa0\x50\x6f\x64\xa9\x71\x9f\xcd\xbc\x3c\xd6\x70\xfe\x7b\x85\xa3\xaa\xdf\xa3\xf4\x2d\xc6\xba\x0f\x39\xd2\x45\xfc\xc9\x06\x2b\xdd\xe9\x23\x8e\x9b\xff\xf1\x06\x8c\xc2\x5b\xe0\x64\x77\x60\x5d\xe8\x98\x17\x46\xec\x3b\xe8\xbd\xb5\xbe\xc3\x68\x7d\x72\x61\x6f\x0c\x41\xaf\xff\xdb\xfb\xbf\x0b\x6d\xb0\x1c\xff\x3d\xd8\xf5\xd7\xfa\x3f\xb4\xb7\xbb\x3a\x8e\x64\xd3\xd5\x59\x7a\xcd\x8c\x68\xab\xe9\xf9\x8c\x36\x7d\xea\xae\x4f\x26\x4b\xfb\x15\x07\xf7\x1e\x2c\x6d\x6e\x31\xd8\x6e\x0d\x8c\xff\xfe\xb8\xa7\x11\x64\x25\xec\x37\x82\x0e\x89\x59\xd7\xf9\x17\x0a\xf3\xe2\x7e\xa4\x59\x34\x64\xde\xb9\xc1\x4e\x29\xbb\x4e\xbf\xa7\x37\x4b\x68\xf6\x42\xcc\x6a\x71\xc6\xba\x3f\x56\x8a\x69\xa7\x43\x44\x1a\x9a\xb5\xfa\x33\x5e\x47\xf1\x63\xad\x22\x6d\xbd\x50\x57\x96\x18\x1e\x45\xc1\x8b\xb7\x85\x5c\xb4\xaf\x1b\x18\xe3\xcd\xcc\xa6\x4d\x04\x70\xb8\x4f\xc4\xbf\x00\xb6\x72\x10\xdd\xce\x41\xdc\xf7\x57\xe2\x4a\x15\xeb\xcb\x6d\x9e\x17\xf7\x13\xdd\xa4\x25\x91\x88\x62\xf8\x01\x22\x51\x1b\x3a\x9a\x82\x6e\x85\x5a\xef\x2e\x1f\xed\x28\xb1\x10\xbd\xf2\xf1\x85\x32\x7a\x3d\x0c\x94\x5d\xaf\xfe\xec\x8c\xbe\x43\xe6\x70\x36\x6f\x1d\xf0\x94\x3f\xb3\xb3\x42\x79\x60\x8b\x9e\x17\x6c\x52\x7c\x96\xc9\x6f\x6d\xff\x6a\xd6\xf5\xf6\x44\xb2\x61\x95\xe1\xed\xaf\x35\xb7\xbe\x06\x06\x41\xc6\x67\x43\x9e\xcb\x53\x35\x51\x4b\x25\x73\xf0\x9e\xb4\x4b\xb9\x97\x15\x8d\xeb\xa6\x39\xc9\xeb\x8e\xdc\xee\x48\xd5\x9e\xba\xbb\x19\x4a\xcd\xbd\xfb\xae\xc6\x8a\x69\x53\xa3\x76\xfc\xab\x91\xda\xad\xb5\x2d\xf3\xe3\x63\x98\xe7\x50\x4a\xfe\xae\x88\xbb\xd2\x69\x81\x9f\x8b\x72\x01\x66\x89\x25\x7f\xcc\x24\xb7\xc6\x55\xc4\xfc\x79\x52\xb2\x52\x98\x64\x0f\xfc\xa1\x98\x15\x1d\xb3\x7e\x87\x73\xb4\xab\xd9\x6e\x7b\xb6\x3a\x9c\xad\xa0\xd4\xef\xef\x3e\xd2\xe0\x6c\x38\x32\xbf\xb7\x47\x5a\xb0\xef\xeb\xe4\x02\x61\x2d\x4c\xd3\x0c\x6d\xad\x70\x59\xe5\x63\x3e\xb0\xf5\xc9\x8d\x15\xc4\xb2\x8a\x43\x97\xd9\xd5\x69\xde\xff\x02\x00\x00\xff\xff\x3b\x4b\x8d\xf5\x57\x2a\x00\x00")

func outGoTplBytes() ([]byte, error) {
	return bindataRead(
		_outGoTpl,
		"out.go.tpl",
	)
}

func outGoTpl() (*asset, error) {
	bytes, err := outGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.go.tpl", size: 10839, mode: os.FileMode(0644), modTime: time.Unix(1567031996, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x3a, 0xfc, 0xce, 0x90, 0x15, 0xec, 0xf6, 0xa, 0xf2, 0xae, 0xfa, 0xee, 0x38, 0xb, 0xcf, 0x9c, 0x73, 0x8, 0x56, 0x48, 0x80, 0xab, 0x6, 0x5b, 0xd9, 0x38, 0x71, 0x6f, 0x4, 0xba, 0xaf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": outGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out.go.tpl": &bintree{outGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
