// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x6f\xe3\x36\x12\xff\x2c\xfd\x15\x53\xa1\x2d\xac\xad\xc3\xe0" +
	"\x80\xc3\x7d\x30\x9a\x0f\xbd\xa4\x97\x06\xb8\x6e\x83\x26\x77\x2d\xb0\x28\x16\x8a\x34\xb2\x85\xd8\xa2\x43\xd2\x9b" +
	"\x04\x86\xfe\xf7\xc3\x0c\x49\x89\x92\x65\xe7\xd1\x66\xdb\x0b\xb0\x1b\x89\x8f\xe1\x3c\x7e\x9c\x57\x74\x7c\x7c\x1c" +
	"\x1f\x1f\x03\x9c\x63\x8d\x2a\x33\x58\x40\x2e\x0b\x14\x70\x26\xa1\x96\x06\x56\xb2\xa8\xca\x47\xc1\x4b\xb4\xdc\xa8" +
	"\x1c\x67\xb0\xdd\x82\xb8\xe2\x67\x68\x9a\x98\x08\xac\xb3\xfc\x36\x9b\x23\xcf\x5c\xba\xe7\xa6\x89\xe3\x6a\xb5\x96" +
	"\xca\xc0\x24\x8e\x92\x5c\xd6\x06\x1f\x4c\x12\x47\x49\xb9\xa2\x5f\xdb\x2d\x54\x25\x88\x1f\x32\xfd\x23\x9a\x85\x2c" +
	"\x34\x1c\x35\x4d\x1c\x25\xfa\xb1\xce\x69\x95\x36\xaa\xaa\xe7\xda\xae\xc4\xba\xb0\xd3\xdb\x2d\x6d\xba\x7e\x5c\xa3" +
	"\x6e\x9a\xc4\x54\x2b\x4c\xb6\x5b\xac\x0b\x3a\x2d\x4a\xe6\x95\x59\x66\x37\x22\x97\xab\xe3\xdb\xcc\xe4\x0b\x3c\x95" +
	"\x05\x1e\x17\x78\x77\xe0\xbc\xbd\x7b\xe8\x9f\x5c\x9b\x1d\x06\x8e\x40\x65\xf5\x1c\xe1\xcb\xf5\xed\x7c\x0a\x5f\xae" +
	"\x33\xb3\x80\xd9\x09\x88\x0b\x16\x56\x83\x5d\x45\xb3\x4d\x03\x09\x3d\x65\x66\xd1\x34\x89\xdd\x4b\x84\x9a\x26\x4e" +
	"\xe3\xb8\xa3\x64\xe5\x61\x8d\x99\xc7\x35\xa9\x51\x9c\xcb\xf7\xd9\x0a\x9b\xe6\xfb\x4f\x58\x1b\xd0\x46\x6d\x72\x03" +
	"\xdb\x38\xba\x38\x83\x28\x8a\x22\x00\xb0\xfa\x89\xa3\x53\x85\x99\xc1\xeb\x6a\x85\x00\x40\x0a\x11\xf4\x1c\x47\x67" +
	"\x58\x66\x9b\xa5\xb9\x32\x99\x41\x28\xf0\x4e\xf0\x53\x1c\xd9\x01\xf7\x13\x8c\x5f\xd4\x05\x3e\xa0\xb6\xe3\x1f\x7e" +
	"\x73\xe4\xe3\xe8\x0a\x97\x98\x1b\xa9\xfc\x16\x7f\xae\x1f\xff\x2f\x2a\x5d\xc9\x1a\xaa\xda\xfc\xe3\xef\x31\x09\xd9" +
	"\x32\x0f\xef\xf8\xe5\x67\x2c\x9b\x26\xf6\xc2\x7d\x0c\x16\x5c\xcb\x75\x95\x9f\xca\xba\xac\xe6\xb4\x1f\x55\x99\xe5" +
	"\x48\x62\xb2\xd8\xd7\x72\xa8\x88\x09\xf1\xcb\x4f\x29\x4c\xde\x0d\x67\xa7\x80\x4a\x49\x95\xd2\x51\xc7\xc7\x3b\x5a" +
	"\xbc\x30\xa8\xa0\xd2\x90\xd5\x50\x19\xc2\xba\x54\x50\x4a\xb5\xb3\x4e\x0b\xb8\x30\xb0\xc8\xec\xca\x02\x6b\x53\xe5" +
	"\xd9\x32\xe0\xcf\x48\x22\xdf\xb2\x42\x74\xa7\x80\x0f\x39\xae\x0d\x98\x45\x46\xff\x21\x58\xc3\xad\x18\x6a\xa0\xd0" +
	"\x6c\x54\xad\x21\xdb\x39\x4c\x8c\x5b\xdc\xf2\x1a\x6a\xe4\x3d\x3e\x98\x49\x6e\x1e\xc0\x5d\x24\x71\x6a\x7f\x1f\x54" +
	"\x44\x74\xba\x94\x1a\x27\x69\xab\xfc\x5f\x7f\xfd\xf5\xe3\xe8\x59\x01\xc2\xe8\x15\xfa\xe2\xc5\x91\x33\xd2\x1e\xe3" +
	"\x39\x8d\x13\x8f\xad\xac\xa4\x84\x9a\x06\x76\xb9\x63\xda\x4a\x5d\xb0\x15\x2a\x59\x9f\xca\xd5\x7a\x89\x06\xe9\x82" +
	"\x56\x7e\x10\x72\x37\x5a\x4c\x41\x2a\xb2\x05\x0b\x35\xa5\x83\xaa\x12\x64\x8d\x20\xf3\x7c\xa3\xb0\x10\x70\x85\xd8" +
	"\x67\x58\x30\x2b\x64\xdd\x95\x54\x08\x55\x5d\x4a\xb5\x62\xb2\x22\x2e\x37\x75\x0e\x93\xca\xc0\xbb\x7d\xda\x48\xe1" +
	"\x35\xda\x86\x6d\x1c\x47\x55\x09\x5f\x54\x46\xb4\x3c\x10\x11\x9a\x89\x22\x96\xcd\x4e\x7c\xaf\xd4\x24\x85\x2f\x4e" +
	"\xa0\xae\x96\x3c\x17\x59\xa5\xd1\xfb\xb4\xbf\x2a\x8e\xa2\x26\xee\xcf\xef\xd3\x5e\x4c\x2b\xe3\xa8\xc0\x3b\x8b\xbd" +
	"\xd9\x49\x47\x8a\x2f\x4f\x1a\xc7\x11\x32\xb7\x6e\xce\x1a\x4f\x1c\xb8\x6c\xf6\xae\xb1\x58\xb4\x2d\x60\x39\xe4\xa8" +
	"\x5c\x19\xe2\x48\xaa\x72\x42\x7e\xfe\x13\x2a\xd3\x99\x03\x8c\xdc\x81\xc0\x0c\xbe\xfa\x94\x30\x27\x29\x71\x1d\x7b" +
	"\x6a\x38\x25\x82\x84\xa6\xe7\x18\xc9\x81\x9b\xd8\xf1\x82\x76\x78\x0f\x7c\x36\x3d\x3b\x47\x7b\x85\xea\x53\x95\x5b" +
	"\x5f\xeb\x2f\xde\xae\x2b\xea\x2e\x83\xa1\x51\x0d\xab\x6c\xfd\xc1\xfa\x3d\xef\x17\x3d\x8b\xef\xf1\x7e\x8c\xc4\x24" +
	"\x65\xdf\xb7\x4b\x7a\xdb\xca\xfa\xf5\xd8\x3c\x69\xd6\x9e\x39\x83\x55\x76\x8b\x93\x9d\x93\xd3\x29\x69\x8c\xe5\xfb" +
	"\xd2\x49\x43\x54\x38\x02\xf1\x03\x49\xdc\x09\xdc\x46\x16\xab\xd0\x9c\xd8\x0a\xf7\xf5\x4e\x4f\x61\x1f\x14\x82\xeb" +
	"\xd5\x5e\x01\x7e\x63\xdf\x3e\x7a\x0d\x50\x30\x65\xc2\x4c\x2e\x86\x6e\xc3\x5a\x6d\x2f\x88\xaa\x3a\x97\x4a\x61\x4e" +
	"\xe0\x21\x1a\x5f\x69\x42\x8b\x25\xe8\x10\xb3\xd2\x73\x92\xb9\xc6\xfb\x09\x65\x1d\x1c\x65\xa0\x69\xd2\x38\x72\xf8" +
	"\x5e\xe9\xb9\xf8\x4f\xbd\xca\x94\x5e\x64\xcb\x09\x8a\xcb\xec\x71\x29\xb3\xe2\x45\x60\xde\xf8\xfd\xb0\xb6\xbb\xf7" +
	"\x01\xf7\xeb\x31\x8d\x10\xe5\x8b\xb3\x19\x74\x3f\x28\x2e\xce\xa6\x71\x14\xc6\xc8\x19\x10\xa7\x34\xd8\x05\xf2\x19" +
	"\x2f\xed\xde\x69\x36\x0c\xe7\x33\x40\x11\xbe\xd3\xbc\x9b\x68\x0f\x6a\x27\x5c\x5c\x9f\xb5\x1c\xd8\x77\x9a\xa2\x6d" +
	"\x2e\x8a\x87\x3b\xdd\xd0\x34\x98\x76\x41\x7e\x16\x4c\xbb\x21\x82\xe3\xe0\xd6\x3e\x05\xb2\x21\xba\xae\xa5\x07\xd9" +
	"\x28\xb0\x52\xe8\xc2\x7e\x0f\x64\x37\x9b\xb2\xf5\x66\x18\x42\x4c\xfc\xe8\xac\x7e\xc8\xd8\x2d\xcd\x6d\xc3\x54\x7a" +
	"\xf6\xec\x26\xf7\xda\xf0\xd2\x23\x82\x7f\x88\x97\xb7\xb3\x21\xab\xaf\x9d\x18\xbb\x4e\x07\x2d\xfd\xe7\xdb\xd9\x5f" +
	"\x7a\xeb\xc3\xd8\x63\x97\x90\xc3\xc9\x8e\x55\x92\xed\x56\x5c\x2a\x69\xe4\xbf\x36\xcb\xa5\xdd\x9b\x58\xcb\xb0\x27" +
	"\x98\x82\xbc\x25\x73\xe7\xc2\x7a\xc9\x0f\x63\xeb\x7f\x63\xea\xf2\x36\xa4\xcb\xcb\x39\x42\x1e\x3a\xe8\xd9\xa2\x5d" +
	"\xa1\xd9\x91\xce\xba\x2a\xe7\xa5\xe9\xec\xc3\x4c\xc2\x89\x63\xaa\x8d\x55\x2e\x54\x19\x5c\xad\x97\x94\xa3\x27\xf9" +
	"\xb2\xc2\xda\x24\x20\xc0\xfa\xf4\x6e\x46\x5b\xce\xba\xa9\x30\xd6\x15\x58\x56\x75\xb0\x9d\x57\x1c\x1d\x08\x17\x2e" +
	"\x12\xba\x91\xa6\x39\xe5\x8d\xfd\xfc\xf3\xea\xb1\xce\xbf\x5b\x2e\xaf\xe5\x58\x5a\x34\x05\x85\x2b\xe9\xea\x0c\xbb" +
	"\x3b\xb5\x37\x35\x2c\x98\xba\x60\x14\x9d\x93\xfe\xc0\x29\x10\x7c\x94\x19\xa5\x5c\x15\x4e\xa7\x53\x90\x6b\xca\x77" +
	"\x34\x08\x21\x6c\x6d\x26\xce\xd1\xfc\xc4\x83\x36\x2a\x41\xe0\x3d\x60\x27\x19\xfe\x27\x95\x77\xa3\x27\xeb\x7d\x47" +
	"\xeb\xb6\x12\x1a\x3b\xdd\x13\x6c\x59\x08\xa2\xf5\x93\xdc\x5c\x6d\x6e\x9e\xab\x82\x45\x56\x17\x4b\x54\x40\xd8\x9c" +
	"\xec\xcc\xee\x71\x9a\xce\x51\x3a\x2b\x70\x9e\x32\x3c\x8d\x52\xa6\x89\x5c\x1b\x0d\xef\xc8\x70\xf4\x6a\x45\xd1\x29" +
	"\x8c\xb3\x6f\x8b\x81\x21\x31\x76\x34\xaf\x25\x76\x49\x7a\x18\xa4\x1b\xa3\x5a\xd8\x1f\x1e\x0e\xe6\x23\xc3\xf2\xdd" +
	"\x83\xd1\x77\x01\xdc\xa8\xc7\xfe\xa1\xb3\x2f\x6a\x42\xf0\x5e\x16\x7e\xda\x98\xf1\xf9\x51\x56\x82\x7a\x78\x78\xf1" +
	"\xba\xfc\xb3\xb8\xe9\xea\x74\x3b\x19\x47\xf9\x22\xab\x6b\x5c\xb6\x85\x78\x6e\x33\xcb\x43\x0e\xab\x9f\xae\x0e\x8e" +
	"\x9b\x14\x37\x01\xfd\x29\xf4\xe9\x4f\xe1\x19\xf4\xd3\x2e\x8f\x76\x22\x38\x0f\xef\x48\x9d\x9c\x40\x92\xb0\x3b\x5e" +
	"\x67\x75\x95\x4f\x12\x3f\x51\x69\x50\x78\xb7\xa9\x14\x16\x49\xea\x0a\x18\x9f\x52\x7d\x1c\xd0\xa4\xed\xc5\xcd\x0c" +
	"\x8a\x1b\x8a\x58\x8e\xc2\xcc\x9f\xc1\x63\xcc\xcc\xcc\x71\xec\x12\xe5\xce\xa3\x0f\x09\xa6\xf0\x4a\xa7\x46\x92\xa0" +
	"\x52\x39\xa7\x99\x94\xa5\x13\x0f\xae\x3c\x85\xbf\xa5\x71\x74\xcf\xb9\xa9\x7e\xac\x73\xf1\x4b\x56\x99\x73\x25\x37" +
	"\xeb\x6d\x13\x47\xb9\x79\x98\x42\x9e\xd5\x39\x2e\x39\x8a\xb9\x03\x7f\xa9\xcc\xe2\x94\x47\xb9\x5c\x24\x25\x8c\x64" +
	"\xf0\xd1\xfd\x5c\x7c\x57\x14\x13\x3a\x60\x2e\xad\x33\xb0\x69\x74\x81\x25\x2a\xb8\x9f\x8b\x33\x59\x23\x97\x79\x3e" +
	"\x09\xce\x05\x89\x38\xe2\xf0\xac\xc8\x5e\xc4\xd4\xd6\xa7\x83\x44\x29\xd2\x9c\x02\xd8\xe7\xc2\xe6\x2a\x33\x7a\xce" +
	"\x33\x8d\xc0\x0a\xf8\xf6\x88\x7e\xf3\x60\x63\x4b\xd5\x66\xd2\xc1\x9c\x9b\x72\x01\xab\x10\x47\x24\x04\xa9\x84\x2b" +
	"\xdb\x9c\xab\x35\x22\x94\xda\x8d\x6d\xf2\xfe\xed\x11\x8d\xc6\x91\xd5\xd5\x84\x55\xea\xf7\x75\xd5\xa2\x52\x71\x03" +
	"\xe3\x8d\xb4\xd0\xe8\xfd\xc8\xd7\xb7\xfe\x5e\xd5\xbc\x08\x0d\xdd\xa5\x64\x9d\x17\x37\xe2\xd4\xbe\x4f\x72\xe1\xf1" +
	"\x09\xb9\xb0\xb8\x1c\xc9\xde\xd2\xd8\xd9\xd0\x2d\x6e\xeb\xd8\x5e\x42\x4a\xfc\xf6\xed\xd6\x5e\xd6\x94\x15\xf1\x1c" +
	"\xa1\xff\x84\xc8\x4b\x00\x7a\x43\x0d\xf9\x36\x45\x5b\x0b\xf8\x25\xe7\x68\xac\xb2\xaa\xa2\x95\x40\x08\xf1\x64\x05" +
	"\xd8\x16\x03\xd8\x27\xeb\xb9\xfb\x4c\xfd\x92\x41\x10\xd9\xdb\x33\xb1\x4c\x0e\x33\xf3\x03\x10\xf8\x2b\xe5\x41\x9f" +
	"\x09\x1b\x7a\x07\x1c\x9e\x67\x8f\x10\xfd\x3b\x20\xa2\xdb\x40\xd0\x17\x7c\x2c\x13\x58\x62\xdd\x02\x45\x13\xeb\xa5" +
	"\x54\x90\x51\x86\x31\x3b\x71\x5e\xac\x9d\xe6\x63\x5f\x08\xc2\x7d\xbe\xfc\x8f\xc5\x1f\x7b\x7b\x2b\xfb\x87\x8c\x4a" +
	"\x19\x7e\x86\x5d\x60\xea\x17\x21\xf3\x73\xe6\xc4\x5c\xa1\xbd\xb1\xd7\xf6\x13\x57\x9b\x1b\x8b\x33\xcb\xed\x78\x86" +
	"\xd9\xeb\xb0\x8d\x75\x3c\xa2\xd7\x81\x61\x0c\x0d\x6d\x1e\xf6\x7c\xeb\x27\xf0\x0d\x91\xb1\xc0\x61\xe1\x23\xb6\x76" +
	"\x1f\x5a\xce\x2c\x56\x5a\x74\xde\xb0\x49\x9f\x0b\x80\x3f\xb0\x4c\x79\x53\xcf\x12\x8d\x75\xfe\x2e\x6f\xe7\x4d\xb3" +
	"\xaf\x5d\xcd\x8d\x24\x83\xdc\x80\xf1\xd4\xde\xe3\x7d\x5f\x40\x6e\xe3\x9c\xfa\x2c\x56\xec\xcf\x63\x9f\xab\xbf\xdf" +
	"\x51\x99\xfd\x7f\xe8\xaf\x2f\xe0\xef\xd6\xdf\x5b\x17\xa3\x5c\xd3\xed\xe4\x2b\x23\x0a\xec\x37\x46\x5f\x95\x51\x8c" +
	"\xf1\x41\xd7\xbb\xbd\xeb\x3b\x19\x45\x9f\x33\x67\xf1\x4b\xef\xbb\x9e\x9d\xde\x74\xc1\xb1\x23\xf4\xd7\x4c\x9d\xda" +
	"\xe0\xd4\xef\xa0\x1d\x8d\xf4\x08\x9e\x05\x9f\xcf\xd4\x47\xe0\x8a\xe3\x63\x80\x1f\x0b\x5b\x4b\x36\x80\xed\x14\x5e" +
	"\x86\x9c\xf5\xe6\x66\x44\x55\x7a\xb3\x0c\xb1\xca\x89\xa3\xe7\xb1\x7f\x98\xb8\x38\x63\x98\x50\x4e\xf8\xdd\x3d\x57" +
	"\x6b\x2f\x3a\x7f\x8e\x06\x14\xea\xb5\xac\x35\xee\xb3\x99\xe7\xc7\x1a\xce\x7f\x51\x71\xd4\x0c\xbb\xa8\xbe\x09\xda" +
	"\x76\x4a\x47\xfa\x9c\x3f\xd8\x60\xa5\x7b\x9d\xce\x71\xf3\x3f\xdd\x22\x52\x78\x07\x9c\xec\xee\x58\x17\x7a\xe6\x85" +
	"\x11\xfb\xee\x74\x07\x83\x2f\x45\x82\x8f\x42\xec\x8d\x21\xe8\x0d\xbf\x0e\xf8\x77\xa5\x0d\xd6\xe3\x7f\xb1\x76\x1d" +
	"\xc0\xe1\xa7\x00\x61\xdf\xc9\x91\xec\xfa\x4e\x0b\xaf\x99\x11\x6d\x75\x5d\xa9\xd1\xb6\x54\xdb\x97\x2a\x64\x6d\xbf" +
	"\x33\xe1\xee\x88\xa5\xcd\x4d\x10\xdb\x4f\x82\xf1\xbf\x90\xee\x69\x55\x59\x0e\x87\xad\xaa\x43\x6c\xb6\xb5\xf1\xa5" +
	"\xc2\xb2\x7a\x18\x69\x67\xed\x1e\xde\xbb\xc1\x4e\x29\xdb\x5e\x47\x6a\x30\x4b\x68\xf6\x4c\xcc\x5a\x76\xc6\xfa\x53" +
	"\x96\x8b\x69\xaf\x87\x45\x1a\x9a\x05\x1d\x24\xaf\xa3\xf4\xa9\x66\x96\xb6\x5e\xa8\xcf\x4b\x0a\x4f\xa2\xe0\xcd\x1b" +
	"\x57\x2e\xda\xb7\x5d\x9b\xf1\x76\x6b\xd7\xc8\x02\x38\xdc\xc9\xe2\xbf\x51\x06\x39\x88\x0e\x73\x10\xf7\x85\x98\xb8" +
	"\x56\xd5\xea\x6a\x53\x96\xd5\xc3\x44\x77\x69\x49\x22\x92\x14\xbe\x81\x44\xb4\x86\x4e\xa6\xa0\x83\x50\xeb\xdd\x65" +
	"\x97\xab\xec\x4b\x56\xa2\xa0\xa1\xf6\xb6\x19\xbd\xde\x0d\x94\x7d\xaf\xfe\xea\x8c\xbe\x47\xe6\x70\x36\x6f\x1d\xf0" +
	"\x94\x3f\x04\xb4\x4c\x79\x60\x8b\x81\x17\xec\x52\x7c\xe6\xc9\x6f\x0d\xff\xae\xd7\xf7\xf6\x44\xb2\x3b\xaa\xc0\xbb" +
	"\x9f\xdb\xd3\x86\x1a\xd8\x09\x32\x3e\x1b\xf2\xa7\x3c\x57\x13\x2d\x57\xb2\x04\xef\x49\xfb\x94\x07\x59\xd1\xb8\x6e" +
	"\x3a\x49\xbe\xee\xf1\xed\x44\x6a\xf6\xd4\xdd\xdd\x50\x6e\x1e\xdc\x97\x3f\x96\x4d\x9b\x1a\x85\xf1\xaf\x45\x6a\xbf" +
	"\xd6\xb6\x87\x1f\x1f\xc3\x45\x09\xb5\xe4\x2f\x9f\xb8\x6f\x9e\x57\xf8\xa9\xaa\xe7\x60\x16\x58\xf3\xe7\x56\x72\x63" +
	"\x5c\x45\xcc\x1f\x50\x65\x4b\x85\x59\xf1\xc8\x9f\xb2\x59\xd6\xb1\x18\xb6\x75\x47\x5b\xb9\x61\xaf\x37\x68\xeb\x06" +
	"\x41\x69\xd8\x81\x7e\xa2\xab\xdb\x9d\xc8\xe7\x7d\x7b\xa4\x05\xfb\xbe\x5e\x2e\x10\xb7\xcc\x74\x1d\xe0\x60\x85\xcb" +
	"\x2a\x9f\xf2\x81\xc1\x47\x41\x96\x11\x7b\x54\x1a\xbb\xcc\xae\x4d\xf3\xfe\x17\x00\x00\xff\xff\xaa\x41\x7d\xb8\xf9" +
	"\x2a\x00\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11001,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1581228208, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
