// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x6f\xe3\x36\x12\xff\x2c\xfd\x15\x53\xa3\xdd\xb3\xb6\x0e\x73" +
	"\x07\x1c\xee\x83\xb1\xf9\xd0\x4b\x7a\xdb\x00\xd7\x6d\xd0\xe4\xae\x05\x16\xc5\x42\x91\x46\x8e\x10\x5b\xf4\x92\x74" +
	"\x1e\x30\xf4\xbf\x1f\x66\x48\x4a\xd4\xc3\x8e\x93\xed\x6e\x7b\x0b\xb4\xb1\x45\x72\xde\x9c\xc7\xcf\x3a\x3e\x3e\x8e" +
	"\x8f\x8f\x01\xde\x62\x85\x2a\x35\x98\x43\x26\x73\x14\x70\x26\xa1\x92\x06\x56\x32\x2f\x8b\x47\xc1\x5b\xb4\xdc\xa8" +
	"\x0c\xe7\xb0\xdd\x82\xb8\xe4\xcf\x50\xd7\x31\x11\x58\xa7\xd9\x6d\xba\x40\x5e\xb9\x70\x9f\xeb\x3a\x8e\xcb\xd5\x5a" +
	"\x2a\x03\xd3\x38\x9a\x64\xb2\x32\xf8\x60\x26\x71\x34\x29\x56\xf4\x67\xbb\x85\xb2\x00\xf1\x43\xaa\x7f\x44\x73\x23" +
	"\x73\x0d\x47\x75\x1d\x47\x13\xfd\x58\x65\xb4\x4b\x1b\x55\x56\x0b\x6d\x77\x62\x95\xdb\xe5\xed\x96\x0e\x5d\x3d\xae" +
	"\x51\xd7\xf5\xc4\x94\x2b\x9c\x6c\xb7\x58\xe5\xc4\x2d\x9a\x2c\x4a\xb3\x4c\xaf\x45\x26\x57\xc7\xb7\xa9\xc9\x6e\xf0" +
	"\x54\xe6\x78\x9c\xe3\xc7\x3d\xfc\x76\x9e\xa1\xff\xe4\xda\x0c\x04\x38\x02\x95\x56\x0b\x84\xaf\xd7\xb7\x8b\x19\x7c" +
	"\xbd\x4e\xcd\x0d\xcc\x4f\x40\x9c\xb3\xb2\x1a\xec\x2e\x5a\xad\x6b\x98\xd0\xa7\xd4\xdc\xd4\xf5\xc4\x9e\x25\x42\x75" +
	"\x1d\x27\x71\xdc\x52\xb2\xfa\xb0\xc5\xcc\xe3\x9a\xcc\x28\xde\xca\x77\xe9\x0a\xeb\xfa\xfb\x3b\xac\x0c\x68\xa3\x36" +
	"\x99\x81\x6d\x1c\x9d\x9f\x41\x14\x45\x11\x00\x58\xfb\xc4\xd1\xa9\xc2\xd4\xe0\x55\xb9\x42\x00\x20\x83\x08\xfa\x1c" +
	"\x47\x67\x58\xa4\x9b\xa5\xb9\x34\xa9\x41\xc8\xf1\xa3\xe0\x4f\x71\x64\x1f\xb8\x7f\xc1\xf3\xf3\x2a\xc7\x07\xd4\xf6" +
	"\xf9\xfb\xdf\x1c\xf9\x38\xba\xc4\x25\x66\x46\x2a\x7f\xc4\xf3\xf5\xcf\xff\x8b\x4a\x97\xb2\x82\xb2\x32\xff\xf8\x7b" +
	"\x4c\x4a\x36\xc2\xc3\x6b\xfe\xf2\x33\x16\x75\x1d\x7b\xe5\x3e\x04\x1b\xae\xe4\xba\xcc\x4e\x65\x55\x94\x0b\x3a\x8f" +
	"\xaa\x48\x33\x24\x35\x59\xed\x2b\xd9\x37\xc4\x94\xe4\xe5\x4f\x09\x4c\x5f\xf7\x57\x67\x80\x4a\x49\x95\x10\xab\xe3" +
	"\xe3\x81\x15\xcf\x0d\x2a\x28\x35\xa4\x15\x94\x86\x62\x5d\x2a\x28\xa4\x1a\xec\xd3\x02\xce\x0d\xdc\xa4\x76\x67\x8e" +
	"\x95\x29\xb3\x74\x19\xc8\x67\x24\x91\x6f\x44\x21\xba\x33\xc0\x87\x0c\xd7\x06\xcc\x4d\x4a\xff\x43\xb0\x8e\x5b\x71" +
	"\xa8\x81\x42\xb3\x51\x95\x86\x74\xc0\x4c\x8c\x7b\xdc\xca\x1a\x5a\xe4\x1d\x3e\x98\x69\x66\x1e\xc0\x5d\x24\x71\x6a" +
	"\xff\xee\x35\x44\x74\xba\x94\x1a\xa7\x49\x63\xfc\x5f\x7f\xfd\xf5\xc3\x28\xaf\x20\xc2\xe8\x2b\x74\xd5\x8b\x23\xe7" +
	"\xa4\x1d\xce\x73\x16\x27\x19\x1b\x5d\xc9\x08\x15\x3d\x18\x4a\xc7\xb4\x95\x3a\x67\x2f\x94\xb2\x3a\x95\xab\xf5\x12" +
	"\x0d\xd2\x05\x2d\xfd\x43\xc8\xdc\xd3\x7c\x06\x52\x91\x2f\x58\xa9\x19\x31\x2a\x0b\x90\x15\x82\xcc\xb2\x8d\xc2\x5c" +
	"\xc0\x25\x62\x57\x60\xc1\xa2\x90\x77\x57\x52\x21\x94\x55\x21\xd5\x8a\xc9\x8a\xb8\xd8\x54\x19\x4c\x4b\x03\xaf\x77" +
	"\x59\x23\x81\x97\x58\x1b\xb6\x71\x1c\x95\x05\x7c\x55\x1a\xd1\xc8\x40\x44\x68\x25\x8a\x58\x37\xbb\xf0\xbd\x52\xd3" +
	"\x04\xbe\x3a\x81\xaa\x5c\xf2\x5a\x64\x8d\x46\xdf\x67\xdd\x5d\x71\x14\xd5\x71\x77\x7d\x97\xf5\x62\xda\x19\x47\x39" +
	"\x7e\xb4\xb1\x37\x3f\x69\x49\xf1\xe5\x49\xe2\x38\x42\x96\xd6\xad\x59\xe7\x89\x3d\x97\xcd\xde\x35\x56\x8b\x8e\x05" +
	"\x22\x87\x12\x15\x2b\x43\x12\x49\x55\x4c\x29\xcf\xdf\xa1\x32\xad\x3b\xc0\xc8\x41\x08\xcc\xe1\x9b\xbb\x09\x4b\x92" +
	"\x90\xd4\xb1\xa7\x86\x33\x22\x48\xd1\x74\x88\x93\x5c\x70\x93\x38\x5e\xd1\x36\xde\x83\x9c\x4d\x9f\x5d\xa2\xbd\x44" +
	"\x75\x57\x66\x36\xd7\xfa\x8b\x37\x4c\x45\xed\x65\x30\xf4\x54\xc3\x2a\x5d\xbf\xb7\x79\xcf\xe7\x45\x2f\xe2\x3b\xbc" +
	"\x1f\x23\x31\x4d\x38\xf7\x0d\x49\x6f\x1b\x5d\x5f\x8d\xad\x93\x65\x2d\xcf\x39\xac\xd2\x5b\x9c\x0e\x38\x27\x33\xb2" +
	"\x18\xeb\xf7\xb5\xd3\x86\xa8\x70\x05\xe2\x0f\xa4\x71\xab\x70\x53\x59\xac\x41\x33\x12\x2b\x3c\xd7\xe1\x9e\xc0\xae" +
	"\x50\x08\xae\x57\x73\x05\xf8\x1b\xe7\xf6\xd1\x6b\x80\x82\x29\x53\xcc\x64\xa2\x9f\x36\xac\xd7\x76\x06\x51\x59\x65" +
	"\x52\x29\xcc\x28\x78\x88\xc6\x37\x9a\xa2\xc5\x12\x74\x11\xb3\xd2\x0b\xd2\xb9\xc2\xfb\x29\x75\x1d\x5c\x65\xa0\xae" +
	"\x93\x38\x72\xf1\xbd\xd2\x0b\xf1\x9f\x6a\x95\x2a\x7d\x93\x2e\xa7\x28\x2e\xd2\xc7\xa5\x4c\xf3\x67\x05\xf3\xc6\x9f" +
	"\x87\xb5\x3d\xbd\x2b\x70\x5f\x8d\x59\x84\x28\x9f\x9f\xcd\xa1\xfd\x87\xe2\xfc\x6c\x16\x47\x61\x8d\x9c\x03\x49\x4a" +
	"\x0f\xdb\x42\x3e\xe7\xad\xed\x77\x5a\x0d\xcb\xf9\x1c\x50\x84\xdf\x69\xdd\x2d\x34\x8c\x9a\x05\x57\xd7\xe7\x8d\x04" +
	"\xf6\x3b\x2d\xd1\x31\x57\xc5\xc3\x93\xee\xd1\x2c\x58\x76\x45\x7e\x1e\x2c\xbb\x47\x14\x8e\xbd\x5b\xfb\x54\x90\xf5" +
	"\xa3\xeb\x4a\xfa\x20\x1b\x0d\xac\x04\xda\xb2\xdf\x09\xb2\xeb\x4d\xd1\x64\x33\x0c\x43\x4c\xfc\xe8\xbc\xbe\xcf\xd9" +
	"\x0d\xcd\x6d\xcd\x54\x3a\xfe\x6c\x17\x77\xfa\xf0\xc2\x47\x04\xff\x23\x59\x3e\x9f\x0f\xd9\x7c\xcd\xc2\xd8\x75\xda" +
	"\xeb\xe9\x3f\xde\xcf\xfe\xd2\xdb\x1c\xc6\x19\xbb\x80\x0c\x4e\x06\x5e\x99\x6c\xb7\xe2\x42\x49\x23\xff\xb5\x59\x2e" +
	"\xed\xd9\x89\xf5\x0c\x67\x82\x19\xc8\x5b\x72\x77\x26\x6c\x96\x7c\x3f\xb6\xff\x37\xa6\x2e\x6f\x43\xba\xbc\x9d\x2b" +
	"\xe4\x3e\x46\x07\xab\x76\x89\x66\xa0\x9d\x4d\x55\x2e\x4b\x13\xef\xfd\x42\xc2\x89\x13\xaa\xa9\x55\xae\x54\x19\x5c" +
	"\xad\x97\xd4\xa3\x4f\xb2\x65\x89\x95\x99\x80\x00\x9b\xd3\xdb\x15\x6d\x25\x6b\x97\xc2\x5a\x97\x63\x51\x56\xc1\x71" +
	"\xde\x71\xb4\xa7\x5c\xb8\x4a\xe8\x9e\xd4\xf5\x29\x1f\xec\xf6\x9f\x97\x8f\x55\xf6\xdd\x72\x79\x25\xc7\xda\x22\x6a" +
	"\x4a\xb4\xad\xf9\xf6\xec\x0c\xe4\xda\x68\x10\x42\xd8\x21\x4a\xd0\xf1\x9f\xd6\xd4\xae\x24\xf6\x0a\x87\x93\x54\x5b" +
	"\xa5\xa2\xb7\x64\x58\x70\x96\x05\x5f\x7e\x46\x59\x96\xb9\x33\x36\x33\x2b\x65\x15\xf2\x7b\x8b\xc6\xb3\xa3\x72\x05" +
	"\x41\x5a\x81\x41\x97\xfc\x4f\x9a\xfb\x46\x39\xeb\x5d\xac\x75\x33\x22\x8d\x71\xf7\x04\x1b\x11\x82\x32\xfe\xa4\x34" +
	"\x97\x9b\xeb\x43\x4d\x70\x93\x56\xf9\x12\x15\x50\xd0\x4e\x07\xab\x3b\xb2\xa9\xcb\xa0\xce\x0b\xdc\xc0\xf4\xb9\x51" +
	"\x2f\x35\x65\x0f\xbe\x26\x9f\xd2\x57\xab\x8a\x4e\x60\x5c\x7c\x3b\x25\xf4\x89\x71\x06\x7a\x29\xb1\x8b\xc3\xed\xb0" +
	"\xbb\x72\xec\x6d\x55\x6c\x54\x8f\x78\xfd\x77\x8d\xf2\x10\x3b\xf0\x01\xef\x21\x08\xf7\xd4\x5f\xbc\x7d\xda\x9d\x57" +
	"\x74\x4b\x76\x2a\xf9\xd3\xc6\x8c\xaf\xb7\xca\x06\xa2\x04\xc3\x78\xff\xd6\xb7\xcd\x6f\x7e\xdd\x82\x04\x76\x31\x8e" +
	"\xb2\x9b\xb4\xaa\x70\xd9\xa0\x00\x99\x6d\x6b\xf7\x65\xcb\x66\x38\xbc\x1f\x32\xcb\xb8\x3e\xda\xc1\xb8\xb7\xe6\xef" +
	"\x55\xba\x5c\x3e\x82\xbc\x43\xa5\xca\x9c\x6a\x07\xcd\x95\xb9\x2d\x9c\xe0\xa5\x49\xab\xdc\x75\x8a\x56\x1e\xc6\xab" +
	"\xce\x0b\xc8\xaf\xff\xa2\x07\x9b\x4b\xcd\xc8\x96\x46\x1e\xd4\xab\xf0\xb9\xc2\x8f\x9b\x92\x26\xca\xa0\xb9\xef\x89" +
	"\x35\xcd\xaf\x3b\x11\xd0\x35\xc8\x0c\x0e\x30\x48\xd2\x4e\x1d\xce\x0c\xae\x1e\x3a\x52\x27\x27\x30\x99\x70\xf1\x6a" +
	"\x9e\x40\x7e\xed\xbb\x85\x53\xfb\x8c\x47\xc3\xd1\x43\xd1\x3a\xad\xca\x6c\x3a\x19\xd1\x6b\xe2\xe6\x49\x1e\x14\x7d" +
	"\xeb\xfa\xa1\x27\x0d\xd1\xc8\xaf\xe7\x90\x5f\xcf\x5a\x11\xe6\x9e\x11\x3f\x63\x35\xe6\x4e\x57\x37\x90\xb4\x95\xb3" +
	"\x4f\x30\x81\x27\x8a\x87\xc2\x95\x74\x20\xd5\xa1\x17\x8b\x34\x45\xa5\x32\xee\xf4\x69\x50\x22\xf1\x1c\x42\x00\x7f" +
	"\x4b\xe2\xe8\x9e\xc7\x03\xfd\x58\x65\xe2\x97\xb4\x34\x6f\x95\xdc\xac\xb7\x75\x1c\x65\xe6\x61\x06\x59\x5a\x65\xb8" +
	"\xe4\x46\xc2\xc9\xf2\x4b\x69\x6e\x4e\xf9\x29\x4f\xec\x64\x9f\x91\x21\x2a\xba\x5f\x88\xef\xf2\x7c\x4a\x0c\x16\xd2" +
	"\xa6\x5d\x3b\xc9\xe4\x58\xa0\x82\xfb\x85\x38\x93\x15\xb2\x6f\x58\xba\x37\x47\x90\x89\xbd\x49\xc6\x6b\x4f\xf3\xc4" +
	"\xb4\xbd\xa4\x8c\x67\x06\x2c\x20\x8e\x88\x39\xa9\xc2\xd4\x33\x1e\x74\x89\x87\x3b\x18\x47\x77\xa9\x82\xa2\x54\xda" +
	"\x7c\xaf\x94\xcf\x3e\x85\x54\xbe\x43\xb6\xba\xb0\x54\x1c\x5a\x56\x59\x17\x45\x41\x8b\xfc\xea\x55\x4b\x25\xe8\xcf" +
	"\xa2\xf6\xa1\xed\x96\x6d\x1c\x35\x61\xe4\x97\xe3\x1a\xc6\xa1\xcd\x30\x3c\xba\xbd\x48\x37\x4e\x9e\x91\x8e\x5f\x16" +
	"\x37\x71\x44\x9b\x2e\x91\x11\x12\xb7\xef\x1d\xde\xb7\x5b\x2f\xd1\x70\xbd\x22\xa3\xfa\x4b\xc4\x3d\x67\x7e\x2d\xfc" +
	"\xed\xcb\x84\xbf\x0f\x90\x09\x97\x74\x86\xfd\x6e\x12\xbb\xc0\x70\x9b\x1b\x7c\xc2\x76\xa8\x56\x0c\x71\x9e\x2f\x79" +
	"\x44\x90\x1b\x43\x4e\xf8\x6b\x78\xf5\xc5\x25\x9a\x60\x7d\x3a\x72\x26\x19\x4c\x2e\xa4\x4a\x37\xba\x9a\x3c\x95\xb0" +
	"\x7f\x0e\xf1\xc5\x1f\xd0\x89\x91\xe2\x9f\xd1\xe4\x1e\xcf\x6a\x86\x46\xbf\xe5\x2d\x1a\x6b\xac\x32\x6f\x34\x10\x42" +
	"\x3c\x09\x15\x34\x53\x23\x76\xc9\x7a\xe9\xbe\x10\xb0\xd6\x2b\xf8\x3b\xc1\x35\x2b\x64\x7f\x84\xdb\x13\x02\x7f\xa6" +
	"\xbe\xf8\x0b\xc5\x86\x1e\x04\x87\x97\xd9\x47\x88\xfe\x84\x10\xd1\x4d\xb9\xea\x2a\x3e\xd6\xb5\x2d\xb1\x6a\x02\x45" +
	"\x93\xe8\x94\xcb\x53\xea\x06\x9b\x64\xde\x2c\x33\xdb\x67\x06\x21\x0e\x53\xff\x00\x8a\xfe\xf4\xf8\x63\xf4\xda\xea" +
	"\xfe\x3e\xa5\x99\x97\x3f\xc3\x30\x30\xf5\xb3\x22\xf3\x4b\xce\x48\x3c\xca\x7f\xae\xb8\x73\x26\x68\xb2\xfd\xe6\xda" +
	"\xc6\x99\x95\x76\x7c\x1a\xe8\x40\xb1\x63\xd0\x58\xf4\xb2\x60\x18\x8b\x86\xa6\x99\x3c\xdc\xfb\x13\xf8\x96\xc8\xd8" +
	"\xc0\x61\xe5\x23\xf6\x76\x37\xb4\x9c\x5b\xac\xb6\xe8\xb2\x61\x9d\x1c\x1a\x00\xbf\xe3\xd8\xfa\x59\x33\x4b\x34\x06" +
	"\x11\x5f\xdc\x2e\xea\x7a\xd7\xef\x1a\x8c\x38\x1a\x64\xa4\xce\x53\x7b\x87\xf7\x5d\x05\x19\xef\x3b\xf5\x6d\xb8\xd8" +
	"\xdd\x88\x1f\x6a\xbf\x4f\x98\xd4\xff\x3f\xec\xd7\x55\xf0\x93\xed\xc7\xe0\x44\xef\x12\xfd\x9e\xd0\x04\xcf\xdf\x83" +
	"\x7e\x65\xc4\x80\x5d\x04\xfd\x45\x1d\xc5\x98\x1c\x74\xbd\x9b\xbb\x3e\xe8\x28\xba\x92\x39\x8f\x5f\xf8\xdc\x75\x70" +
	"\x7b\xd3\x16\xc7\x96\xd0\x9f\xb3\x75\x6a\x8a\x53\x17\x6a\x3d\x1a\xc1\x73\x0e\x0a\x9f\x2f\x84\xf9\xf0\xb4\xf3\x21" +
	"\x88\x1f\x1b\xb6\x96\x6c\x10\xb6\x33\x78\x5e\xe4\xac\x37\xd7\x23\xa6\xd2\x9b\x65\x18\xab\xdc\x38\x7a\x19\xbb\xcc" +
	"\xc4\xf9\xd9\xcc\x8f\x5e\xdf\xdd\xf3\x4c\xfb\x2c\xfe\x0b\x34\xa0\x50\xaf\x65\xa5\x71\x97\xcf\xbc\x3c\xd6\x71\xfe" +
	"\xd5\x9b\xa3\xba\x0f\xb7\x7b\xb4\xbc\x81\xd4\x47\x00\xf1\x1f\x6c\xb1\xd2\x1d\x48\x7c\xdc\xfd\x4f\xc3\x79\x0a\x3f" +
	"\x02\x37\xbb\x03\xef\x42\xc7\xbd\x30\xe2\xdf\x01\x5a\x1c\xbc\x52\x14\xbc\x3d\x64\x6f\x0c\x85\x5e\xff\x35\x92\x7f" +
	"\x97\xda\x60\x35\xfe\x6a\x83\xc3\x0c\xfa\xef\x8c\x84\x18\xa1\x23\xd9\x62\x84\x37\xde\x32\x23\xd6\x6a\x11\xc4\x51" +
	"\x08\xb1\xc1\x10\x73\x59\xd9\x17\x92\x18\xc3\xb1\xb4\x19\xaa\xb1\x50\x1a\x8c\xff\x94\xde\xfd\x09\xbe\x27\x61\x1f" +
	"\xa5\xdb\x27\x66\x33\x1b\x5f\x28\x2c\xca\x87\x11\x24\x6f\xc8\xbc\x73\x83\x9d\x51\xb6\x1d\x48\xad\xb7\x4a\xd1\xec" +
	"\x85\x98\x37\xe2\x8c\x01\x6c\x56\x8a\x59\x07\x84\x23\x0b\xcd\x03\x9c\xcb\xdb\x28\x79\x0a\x8d\xd3\x36\x0b\x75\x65" +
	"\x49\xe0\xc9\x28\x78\x31\xbc\xd6\xe0\x60\x0e\xa9\x3a\x1c\x70\x73\xf5\xbf\x81\xa5\xc6\xc1\xf2\x16\x80\x03\x78\x12" +
	"\x82\x0b\x10\x54\x12\x36\x6c\x4b\xdc\xdb\x85\xe2\x4a\x95\xab\xcb\x4d\x51\x94\x0f\x53\xdd\x76\x2a\x13\x31\x49\xe0" +
	"\x5b\x98\x88\xc6\xf7\x93\x19\xe8\xa0\xfa\xfa\x0c\xda\xb6\x2f\xbb\xfa\x97\xc8\x42\x81\xe1\x44\xf9\x99\x9a\x7c\x3d" +
	"\xac\x9d\xdd\x44\xff\xe2\x26\xbf\x43\x66\x7f\x83\x6f\x73\xf2\x8c\x5f\x22\xb5\x42\xf9\x58\x17\xbd\xc4\xd8\x76\xfd" +
	"\x2c\x93\x3f\xda\xc1\x1c\x3b\x05\x80\x48\xb6\xac\x72\xfc\xf8\x73\xc3\xad\x6f\x81\x41\xdd\xf1\x0d\x92\xe7\x72\xa8" +
	"\x25\x1a\xa9\x64\x01\x3e\xb9\x76\x29\xf7\x1a\xa5\x71\xdb\xb4\x9a\xbc\xea\xc8\xed\x54\xaa\x77\x8c\xe2\xed\xa3\xcc" +
	"\x3c\xb8\xb7\xc6\xac\x98\xb6\x5b\x0a\x4b\x62\x13\xa9\xdd\xf1\xdb\x32\xb7\xbf\x86\x54\x92\xdf\x9a\xe3\xdf\x03\xb2" +
	"\x12\xef\xdc\xaf\x29\x15\xff\xa4\x22\x37\xc6\x0d\xc9\xfc\xf2\x5d\xba\x54\x98\xe6\x8f\xfc\x1a\xa4\x15\x1d\x73\xa2" +
	"\xa4\xf9\xad\x00\x2b\x45\x96\x6a\x07\x28\xbf\x39\xa2\xbf\x73\xeb\x17\xfe\x95\x62\xee\x79\xd7\x16\x9e\x0e\xea\x54" +
	"\x1f\x3a\x7f\x02\xd6\x6e\x39\x32\xbf\x37\x47\x5a\x70\x3a\xec\xb4\x07\x71\x23\x0c\xc5\xc1\x9b\x23\xa2\x10\xec\x70" +
	"\x8d\xe6\x53\x69\x31\x78\xa1\xcc\x0a\x62\x59\x25\xb1\x6b\xf6\x9a\xce\xef\x7f\x01\x00\x00\xff\xff\xb1\xba\xd0\x7c" +
	"\x35\x2d\x00\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11573,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1596344910, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
