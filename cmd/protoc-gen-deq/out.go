// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// out.go.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x1a\x69\x6f\xdb\x46\xf6\x33\xf9\x2b\x5e\x89\x36\x10\x53\x79\x8c\x05\x16\xfb\x41\x88\x3f\x64\xed\xac\x6b\x60\x9b\x1a\xb5\x77\x1b\x20\x28\x02\x9a\x7c\x94\x08\x4b\x1c\x79\x66\xe4\x03\x02\xff\xfb\xe2\xbd\x99\xe1\x2d\xf9\x48\x9d\x76\x03\xb4\x26\xe7\x78\xf7\x2d\x1e\x1e\x1e\x86\x87\x87\x00\xa7\x58\xa2\x4a\x0c\x66\x90\xca\x0c\x05\x9c\x48\x28\xa5\x81\x95\xcc\x8a\xfc\x41\xf0\x11\x2d\x37\x2a\xc5\x19\x6c\xb7\x20\x2e\xf8\x19\xaa\x2a\x24\x00\xeb\x24\xbd\x4e\xe6\xc8\x3b\xe7\xee\xb9\xaa\xc2\xb0\x58\xad\xa5\x32\x30\x09\x83\x28\x95\xa5\xc1\x7b\x13\x85\x41\x94\xaf\xe8\xcf\x76\x0b\x45\x0e\xe2\xa7\x44\xff\x8c\x66\x21\x33\x0d\x07\x55\x15\x06\x91\x7e\x28\x53\x3a\xa5\x8d\x2a\xca\xb9\xb6\x27\xb1\xcc\xec\xf6\x76\x4b\x97\x2e\x1f\xd6\xa8\xab\x2a\x32\xc5\x0a\xa3\xed\x16\xcb\x8c\xb0\x05\xd1\xbc\x30\xcb\xe4\x4a\xa4\x72\x75\x78\x9d\x98\x74\x81\xc7\x32\xc3\xc3\x0c\x6f\xf6\xe0\xdb\x79\x87\xfe\x93\x6b\x33\x20\xe0\x00\x54\x52\xce\x11\xbe\x5f\x5f\xcf\xa7\xf0\xfd\x3a\x31\x0b\x98\x1d\x81\x38\x63\x66\x35\xd8\x53\xb4\x5b\x55\x10\xd1\x53\x62\x16\x55\x15\xd9\xbb\x04\xa8\xaa\xc2\x38\x0c\x1b\x48\x96\x1f\x96\x98\x79\x58\x93\x18\xc5\xa9\xfc\x98\xac\xb0\xaa\x3e\xdc\x62\x69\x40\x1b\xb5\x49\x0d\x6c\xc3\xe0\xec\x04\x82\x20\x08\x00\xc0\xca\x27\x0c\x8e\x15\x26\x06\x2f\x8b\x15\x02\x00\x09\x44\xd0\x73\x18\x9c\x60\x9e\x6c\x96\xe6\xc2\x24\x06\x21\xc3\x1b\xc1\x4f\x61\x60\x17\xdc\xbf\xd6\xfa\x59\x99\xe1\x3d\x6a\xbb\xfe\xf9\x77\x07\x3e\x0c\x2e\x70\x89\xa9\x91\xca\x5f\xf1\x78\xfd\xfa\x7f\x51\xe9\x42\x96\x50\x94\xe6\x1f\x7f\x0f\x89\xc9\x9a\x78\x78\xcb\x2f\xbf\x62\x5e\x55\xa1\x67\xee\x4b\xeb\xc0\xa5\x5c\x17\xe9\xb1\x2c\xf3\x62\x4e\xf7\x51\xe5\x49\x8a\xc4\x26\xb3\x7d\x29\xfb\x82\x98\x10\xbd\xfc\x14\xc3\xe4\x6d\x7f\x77\x0a\xa8\x94\x54\x31\xa1\x3a\x3c\x1c\x48\xf1\xcc\xa0\x82\x42\x43\x52\x42\x61\xc8\xd6\xa5\x82\x5c\xaa\xc1\x39\x2d\xe0\xcc\xc0\x22\xb1\x27\x33\x2c\x4d\x91\x26\xcb\x16\x7d\x46\x12\xf8\x9a\x14\x82\x3b\x05\xbc\x4f\x71\x6d\xc0\x2c\x12\xfa\x1f\x82\x55\xdc\x8a\x4d\x0d\x14\x9a\x8d\x2a\x35\x24\x03\x64\x62\x5c\xe3\x96\xd6\xb6\x44\x3e\xe2\xbd\x99\xa4\xe6\x1e\x9c\x23\x89\x63\xfb\x77\xaf\x20\x82\xe3\xa5\xd4\x38\x89\x6b\xe1\x7f\xfa\xf4\xe9\xcb\x28\xae\x96\x85\xd1\x2b\x74\xd9\x0b\x03\xa7\xa4\x1d\xca\x73\x12\x27\x1a\x6b\x5e\x49\x08\x25\x2d\x0c\xa9\x63\xd8\x4a\x9d\xb1\x16\x0a\x59\x1e\xcb\xd5\x7a\x89\x06\xc9\x41\x0b\xbf\x08\xa9\x5b\xcd\xa6\x20\x15\xe9\x82\x99\x9a\x12\xa2\x22\x07\x59\x22\xc8\x34\xdd\x28\xcc\x04\x5c\x20\x76\x09\x16\x4c\x0a\x69\x77\x25\x15\x42\x51\xe6\x52\xad\x18\xac\x08\xf3\x4d\x99\xc2\xa4\x30\xf0\x76\x97\x34\x62\x78\x89\xb4\x61\x1b\x86\x41\x91\xc3\x77\x85\x11\x35\x0d\x04\x84\x76\x82\x80\x79\xb3\x1b\x1f\x94\x9a\xc4\xf0\xdd\x11\x94\xc5\x92\xf7\x02\x2b\x34\x7a\x9f\x76\x4f\x85\x41\x50\x85\xdd\xfd\x5d\xd2\x0b\xe9\x64\x18\x64\x78\x63\x6d\x6f\x76\xd4\x80\x62\xe7\x89\xc3\x30\x40\xa6\xd6\xed\x59\xe5\x89\x3d\xce\x66\x7d\x8d\xd9\xa2\x6b\x2d\x92\xdb\x14\xe5\x2b\x43\x14\x49\x95\x4f\x28\xce\xdf\xa2\x32\x8d\x3a\xc0\xc8\x81\x09\xcc\xe0\x87\xdb\x88\x29\x89\x89\xea\xd0\x43\xc3\x29\x01\x24\x6b\x7a\x8a\x92\x9c\x71\x13\x39\x9e\xd1\xc6\xde\x5b\x31\x9b\x9e\x5d\xa0\xbd\x40\x75\x5b\xa4\x36\xd6\x7a\xc7\x1b\x86\xa2\xc6\x19\x0c\xad\x6a\x58\x25\xeb\xcf\x36\xee\xf9\xb8\xe8\x49\xfc\x88\x77\x63\x20\x26\x31\xc7\xbe\x21\xe8\x6d\xcd\xeb\x9b\xb1\x7d\x92\xac\xc5\x39\x83\x55\x72\x8d\x93\x01\xe6\x78\x4a\x12\x63\xfe\xbe\x77\xdc\x10\x14\xce\x40\xfc\x40\x1c\x37\x0c\xd7\x99\xc5\x0a\x34\x25\xb2\xda\xf7\x3a\xd8\x63\xd8\x65\x0a\x2d\xf7\xaa\x5d\x80\xdf\x38\xb6\x8f\xba\x01\x0a\x86\x4c\x36\x93\x8a\x7e\xd8\xb0\x5a\xdb\x69\x44\x45\x99\x4a\xa5\x30\x25\xe3\x21\x18\x3f\x68\xb2\x16\x0b\xd0\x59\xcc\x4a\xcf\x89\xe7\x12\xef\x26\x54\x75\x70\x96\x81\xaa\x8a\xc3\xc0\xd9\xf7\x4a\xcf\xc5\x7f\xca\x55\xa2\xf4\x22\x59\x4e\x50\x9c\x27\x0f\x4b\x99\x64\xcf\x32\xe6\x8d\xbf\x0f\x6b\x7b\x7b\x97\xe1\xbe\x19\x93\x08\x41\x3e\x3b\x99\x41\xf3\x0f\xc5\xd9\xc9\x34\x0c\xda\x39\x72\x06\x44\x29\x2d\x36\x89\x7c\xc6\x47\x9b\x77\xda\x6d\xa7\xf3\x19\xa0\x68\xbf\xd3\xbe\xdb\xa8\x11\xd5\x1b\x2e\xaf\xcf\x6a\x0a\xec\x3b\x6d\xd1\x35\x97\xc5\xdb\x37\xdd\xd2\xb4\xb5\xed\x92\xfc\xac\xb5\xed\x96\xc8\x1c\x7b\x5e\xfb\x98\x91\xf5\xad\xeb\x52\x7a\x23\x1b\x35\xac\x18\x9a\xb4\xdf\x31\xb2\xab\x4d\x5e\x47\x33\x6c\x9b\x98\xf8\xd9\x69\x7d\x9f\xb2\x6b\x98\xdb\x8a\xa1\x74\xf4\xd9\x6c\xee\xd4\xe1\xb9\xb7\x08\xfe\x47\xb4\xbc\x9e\x0e\x59\x7c\xf5\xc6\x98\x3b\xed\xd5\xf4\x9f\xaf\x67\xef\xf4\x36\x86\x71\xc4\xce\x21\x85\xa3\x81\x56\xa2\xed\x56\x9c\x2b\x69\xe4\xbf\x36\xcb\xa5\xbd\x1b\x59\xcd\x70\x24\x98\x82\xbc\x26\x75\xa7\xc2\x46\xc9\xcf\x63\xe7\x7f\x67\xe8\xf2\xba\x0d\x97\x8f\x73\x86\xdc\x87\xe8\xc9\xac\x5d\xa0\x19\x70\x67\x43\x95\x8b\xd2\x84\x7b\x3f\x91\x70\xe4\x88\xaa\x73\x95\x4b\x55\x06\x57\xeb\x25\xd5\xe8\x51\xba\x2c\xb0\x34\x11\x08\xb0\x31\xbd\xd9\xd1\x96\xb2\x66\xab\x9d\xeb\x32\xcc\x8b\xb2\x75\x9d\x4f\x1c\xec\x49\x17\x2e\x13\xba\x95\xaa\x3a\xe6\x8b\xdd\xfa\xf3\xe2\xa1\x4c\xdf\x2f\x97\x97\x72\xac\x2c\x9a\x82\x49\xd4\x1c\x6d\xd6\xb7\xb7\x63\xeb\xa9\xed\x86\xa9\x49\x46\xc1\x29\xc9\x0f\x9c\x00\xc1\x67\x99\x51\xc8\x45\xe6\x64\x3a\x05\xb9\xa6\x7a\x47\x83\x10\xc2\xf6\x66\xe2\x14\xcd\x2f\xbc\x68\xb3\x12\xb4\xa2\x07\x0c\x8a\xe1\x7f\x52\x7b\x37\x8a\x59\xef\x42\xad\xeb\x4e\x68\x0c\xbb\x07\x58\x93\xd0\xca\xd6\x8f\x52\x73\xb1\xb9\x7a\xaa\x08\x16\x49\x99\x2d\x51\x01\xd9\xe6\x64\xb0\xbb\x23\x68\xba\x40\xe9\xb4\xc0\x75\x4a\x1f\x1b\x95\x4c\x13\xb9\x36\x1a\xde\x92\xe2\xe8\xd5\xb2\xa2\x63\x18\x27\xdf\x36\x03\x7d\x60\x1c\x68\x5e\x0a\xec\x9c\xe4\xd0\x2b\x37\x46\xa5\xb0\x3b\x3d\xec\xad\x47\xac\xe9\x0e\x9a\xbc\x97\x18\x72\x7b\x0a\xe0\x6d\xda\x0f\x13\xdc\xaa\x77\xa1\x7d\x2c\x9c\x95\xe4\x08\x3b\x39\xf9\x65\x63\xc6\xf7\x1b\x8e\x5a\xa4\xb4\xda\xea\xbe\xff\x36\x65\x6c\x76\xd5\xb4\xfb\x76\x33\x0c\xd2\x45\x52\x96\xb8\xac\xfb\xf9\xd4\x16\xa8\xfb\xe2\x5e\xb7\xea\xed\xa1\x9b\x64\x57\x2d\xf8\x53\xe8\xc2\x9f\xc2\x13\xe0\xc7\x4d\x39\xee\x58\x70\x89\xc2\x81\x3a\x3a\x82\x28\xe2\xa8\xbe\x4e\xca\x22\x9d\x44\x7e\xa3\xd0\xa0\xf0\x66\x53\x28\xcc\xa2\xd8\xf5\x41\xbe\x32\xfb\xd2\x83\x49\xd7\xb3\xab\x19\x64\x57\x94\xf8\x1c\x84\x99\xc7\xc1\x6b\x4c\xcc\xcc\x51\xec\xea\xed\x26\x31\xf4\x01\xc6\xf0\xc2\xd8\x48\x9c\xa0\x52\x29\x57\xab\x54\xec\x13\x0d\xae\xcb\x85\xbf\xc5\x61\x70\xc7\x25\xae\x7e\x28\x53\xf1\x5b\x52\x98\x53\x25\x37\xeb\x6d\x15\x06\xa9\xb9\x9f\x42\x9a\x94\x29\x2e\x39\x19\x3a\x84\xbf\x15\x66\x71\xcc\xab\xdc\x75\x92\x10\x46\x1a\x81\xe0\x6e\x2e\xde\x67\xd9\x84\x10\xcc\xa5\x8d\x29\xb6\x1a\xcf\x30\x47\x05\x77\x73\x71\x22\x4b\xe4\xd6\x93\xa9\x7b\x77\x00\xa9\xd8\xe3\x43\x9e\x41\x12\xfc\xa4\x31\x4e\x9e\xc8\xb5\x10\x40\x18\x10\x6a\x62\x84\x61\xa7\xdc\xaa\x11\x06\x77\x31\x0c\x6e\x13\x05\x79\xa1\xb4\xf9\xa0\x94\xf7\x3a\xea\xe1\x5d\x8d\x67\x39\x61\x9a\x88\x5c\x2b\x00\x86\xd5\x2d\xf2\xde\xbc\x69\xa0\xb4\x2a\x8c\xa0\x59\xb4\xf5\x1e\xd9\x49\xab\xe6\xf3\xdb\x61\x05\xe3\xc3\xb9\xb6\x05\x74\xb3\x69\x63\x0a\x7f\x42\x62\x23\xe6\x1a\x77\xe6\xe2\x28\xbb\x12\xc7\xf6\x7d\x92\x0a\x6f\xd9\x90\x0a\x6b\xd1\x23\xe5\x63\x1c\x3a\xed\xbb\xc3\x75\x23\xdd\xcc\x13\xea\x52\xdb\x1f\x39\x45\x63\xd5\x5f\x64\x35\x07\x42\x88\x47\x1b\xac\xba\xd6\xc6\x2e\x58\x4f\xdd\x37\x1a\x47\xf4\x82\xeb\xce\x91\x84\x25\xb2\x5f\xf8\xee\x31\x81\xbf\x52\x99\xf1\x8d\x6c\x43\x0f\x8c\xc3\xd3\xec\x2d\x44\x7f\x85\x89\xe8\x3a\x40\x76\x19\x1f\xcb\x90\x4b\x2c\x6b\x43\xd1\x44\x3a\xc5\x8f\x84\x32\x6f\x1d\x40\xea\x6d\x46\xfb\x4c\x23\xc4\x61\xb8\x19\x0c\xf0\xbe\xde\xfe\x78\xe6\x67\x79\xff\x9c\x50\xa7\xc0\xcf\x30\x34\x4c\xfd\x2c\xcb\xfc\x96\x25\x27\x37\x40\xaf\x65\x77\x4e\x04\x7e\xe3\x62\x73\x65\xed\xcc\x52\x3b\x5e\x79\x75\x06\x58\x63\x03\x85\xe0\x65\xc6\x30\x66\x0d\x75\x7d\xf2\x74\xed\x47\xf0\x23\x81\xb1\x86\xc3\xcc\x07\xac\xed\xae\x69\x39\xb5\x58\x6e\xd1\x45\xc3\x2a\x7e\xaa\x01\xfc\x81\x5d\xc0\xab\x46\x96\x60\x6c\xb0\x76\x7e\x3d\xaf\xaa\x5d\xd3\x60\x9e\xd3\x18\xe4\xf9\x86\x87\xf6\x11\xef\xba\x0c\xf2\x94\xe4\xd8\x57\x77\x62\x77\x7d\xf7\x54\xf9\x7d\x45\xe3\xf3\xff\x21\xbf\x2e\x83\x5f\x2d\xbf\xd7\xee\xf5\xb8\xd7\x19\xd4\x2b\x23\x02\xec\xce\x1d\x5f\x54\x51\x8c\xd1\x41\xee\x5d\xfb\xfa\xa0\xa2\xe8\x52\xe6\x34\x7e\xee\x63\xd7\x93\xcb\x9b\x26\x39\x36\x80\xfe\x9a\xa5\xd3\xf3\x92\xd3\x1f\xd1\xa5\x7f\x8b\xac\xc3\xbf\x99\x3f\x94\x69\xb7\xfb\xa9\x1b\x5e\x0e\xc6\xdd\x89\xdc\xc1\xc8\xb0\xe0\x49\x32\xf9\x46\x03\x05\x9e\xa6\x7f\x69\x39\x8c\xf5\x53\x0b\xb6\xe5\xa7\x53\x78\x9e\xab\xac\x37\x57\x23\xb6\xa1\x37\xcb\xb6\x73\x72\xa5\xec\x69\xec\x22\x13\x67\x27\xec\x17\x54\x04\xbf\xbf\xe3\xc6\xf1\x59\xf8\xc9\x44\x14\xea\xb5\x2c\x35\xee\x32\x52\x4f\x8f\xb5\x54\xff\x85\xc6\x41\xd5\x9f\xca\xfa\xa1\x6a\x3d\x79\x1d\x99\x9b\xfe\x64\xb3\xb3\xee\x4c\x4e\xc7\xd5\xff\xf8\xac\x48\xe1\x0d\x70\x75\x3f\xd0\x2e\x74\xd4\x0b\x23\xfa\x1d\x4c\x1b\x5b\x5f\x9e\xb4\x3e\x32\xb1\x86\x4f\xa6\xd7\xff\xda\xe0\xdf\x85\x36\x58\x8e\xff\x02\xee\x1a\xf3\xfe\xa7\x05\xed\x01\x94\x03\xd9\x0c\xa0\x16\x5e\x32\x23\xd2\x6a\xc6\x53\xa3\xf3\xa9\x7a\x40\x95\xc9\xd2\x7e\xb7\xc2\x63\x12\x0b\x9b\xa7\x21\x76\xb0\x04\xe3\xbf\xb8\xee\x98\x59\x59\x0a\xfb\x33\xab\x7d\x64\xd6\x0e\x7e\xae\x30\x2f\xee\x47\xe6\x5a\x43\xe4\x1d\x0f\x76\x42\xd9\x76\x46\x53\xbd\x5d\xb2\x66\x4f\xc4\xac\x26\x67\x6c\x50\x65\xa9\x98\x76\x86\x59\x24\xa1\x59\x6b\x94\xe4\x65\x14\x3f\x36\xd5\xd2\x36\x0a\x75\x69\x89\xe1\x51\x2b\x78\xf5\x09\x96\x0b\xc5\xf5\xa4\x67\x7c\xee\xda\x4c\xb4\x00\x1e\x1b\x69\x35\xa2\x64\xca\xda\x09\xc2\x7d\x71\x26\x2e\x55\xb1\xba\xd8\xe4\x79\x71\x3f\xd1\x4d\xce\x88\x44\x14\xc3\x8f\x10\x89\x5a\xd1\xd1\x14\x74\x2b\x91\xf8\x70\xd9\x24\x92\x5d\xd5\x59\x60\x47\x6b\xed\x7e\xf9\x95\x5a\x18\x3d\xac\x0c\xba\x51\xfd\xc5\x2d\x4c\x07\xcc\xfe\xf6\xc5\x06\xe0\x29\x7f\x58\x68\x89\xf2\x86\x2d\x7a\x51\xb0\xe9\x69\x98\x26\x7f\xb5\x33\xc5\xeb\x44\x7b\x02\xd9\xa0\xca\xf0\xe6\xd7\x1a\x5b\x5f\x02\x83\x24\xe3\xcb\x3f\x8f\xe5\xa9\x92\xa8\xa9\x92\x39\xf8\x48\xda\x85\xdc\x2b\x03\xc7\x65\xd3\x70\xf2\xa6\x43\xb7\x63\xa9\xda\x31\x68\x68\x96\x52\x73\xef\xbe\x24\xb2\x64\xda\x5a\xb0\x9d\xff\x6a\x4b\xed\x0e\x17\x2c\xf2\xc3\x43\x38\xcb\xa1\x94\xfc\x25\x15\x0f\xd0\xd3\x02\x6f\x8b\x72\x0e\x66\x81\x25\x7f\xbe\x25\x37\xc6\x8d\x00\xf8\x83\xac\x64\xa9\x30\xc9\x1e\xf8\xd3\x38\x4b\x3a\x66\x04\x49\xf3\x2f\xc5\x96\x8a\x34\xd1\x6e\x44\xfb\xee\x80\xfe\xce\xac\x5e\xf8\x77\xee\x99\xc7\x5d\xd9\x81\x6f\x2b\x29\xf5\x47\xd1\x8f\x0c\x8a\x1b\x8c\x8c\xef\xdd\x81\x16\x1c\xfb\x3a\xb5\x40\x58\x13\x43\x76\xf0\xee\x80\x20\xb4\x4e\xb8\x32\xfa\xb1\x18\xd8\xfa\xc8\xc8\x12\x62\x51\xb9\x2a\xaf\xa9\x16\xc2\xff\x05\x00\x00\xff\xff\x02\x77\xdd\xd2\x49\x2b\x00\x00")

func outGoTplBytes() ([]byte, error) {
	return bindataRead(
		_outGoTpl,
		"out.go.tpl",
	)
}

func outGoTpl() (*asset, error) {
	bytes, err := outGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.go.tpl", size: 11081, mode: os.FileMode(420), modTime: time.Unix(1594354346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": outGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out.go.tpl": &bintree{outGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
