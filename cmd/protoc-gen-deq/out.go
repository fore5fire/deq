// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x59\x6f\xe3\x46\xf2\x7f\x26\x3f\x45\x45\x48\x06\xe2\x44\x6e\xff" +
	"\xff\xc0\x62\x1f\x84\xf1\x43\xd6\xce\x3a\x02\x36\x13\x23\xf2\x6e\x02\x0c\x82\x01\x4d\x16\x25\xc2\x12\x5b\x6e\xb6" +
	"\x7c\x40\xe0\x77\x5f\x54\x75\x37\xd9\x3c\x24\xcb\x9e\x23\xd9\x01\x12\x93\x7d\xd4\xf9\xeb\xaa\xea\x12\x4f\x4f\x4f" +
	"\xc3\xd3\x53\x80\x4b\x2c\x50\xc5\x1a\x53\x48\x64\x8a\x02\x2e\x24\x14\x52\xc3\x5a\xa6\x79\xf6\x24\x78\x49\x29\xb7" +
	"\x2a\xc1\x29\xec\x76\x20\xe6\xfc\x0c\x55\x15\x12\x81\x4d\x9c\xdc\xc6\x0b\xe4\x99\x2b\xfb\x5c\x55\x61\x98\xaf\x37" +
	"\x52\x69\x18\x87\xc1\x28\x91\x85\xc6\x47\x3d\x0a\x83\x51\xb6\xa6\x3f\xbb\x1d\xe4\x19\x88\x9f\xe2\xf2\x67\xd4\x4b" +
	"\x99\x96\x70\x52\x55\x61\x30\x2a\x9f\x8a\x84\x56\x95\x5a\xe5\xc5\xa2\x34\x2b\xb1\x48\xcd\xf4\x6e\x47\x9b\xae\x9f" +
	"\x36\x58\x56\xd5\x48\xe7\x6b\x1c\xed\x76\x58\xa4\xc4\x2d\x18\x2d\x72\xbd\x8a\x6f\x44\x22\xd7\xa7\xb7\xb1\x4e\x96" +
	"\x78\x2e\x53\x3c\x4d\xf1\xee\x00\xbf\xbd\x7b\xe8\x3f\xb9\xd1\x3d\x01\x4e\x40\xc5\xc5\x02\xe1\xdb\xcd\xed\x62\x02" +
	"\xdf\x6e\x62\xbd\x84\xe9\x19\x88\x19\x2b\x5b\x82\x59\x45\xb3\x55\x05\x23\x7a\x8a\xf5\xb2\xaa\x46\x66\x2f\x11\xaa" +
	"\xaa\x30\x0a\xc3\x86\x92\xd1\x87\x2d\xa6\x9f\x36\x64\x46\x71\x29\xdf\xc7\x6b\xac\xaa\x1f\xef\xb1\xd0\x50\x6a\xb5" +
	"\x4d\x34\xec\xc2\x60\x76\x01\x41\x10\x04\x00\x60\xec\x13\x06\xe7\x0a\x63\x8d\xd7\xf9\x1a\x01\x80\x0c\x22\xe8\x39" +
	"\x0c\x2e\x30\x8b\xb7\x2b\x3d\xd7\xb1\x46\x48\xf1\x4e\xf0\x53\x18\x98\x01\xfb\xcf\x1b\x9f\x15\x29\x3e\x62\x69\xc6" +
	"\x3f\xfc\x61\xc9\x87\xc1\x1c\x57\x98\x68\xa9\xdc\x16\xc7\xd7\x8d\xff\x07\x55\x99\xcb\x02\xf2\x42\xff\xfd\x6f\x21" +
	"\x29\x59\x0b\x0f\x6f\xf9\xe5\x57\xcc\xaa\x2a\x74\xca\x7d\xf4\x16\x5c\xcb\x4d\x9e\x9c\xcb\x22\xcb\x17\xb4\x1f\x55" +
	"\x16\x27\x48\x6a\xb2\xda\xd7\xb2\x6b\x88\x31\xc9\xcb\x4f\x11\x8c\xdf\x76\x67\x27\x80\x4a\x49\x15\x11\xab\xd3\xd3" +
	"\x9e\x15\x67\x1a\x15\xe4\x25\xc4\x05\xe4\x9a\xb0\x2e\x15\x64\x52\xf5\xd6\x95\x02\x66\x1a\x96\xb1\x59\x99\x62\xa1" +
	"\xf3\x24\x5e\x79\xf2\x69\x49\xe4\x6b\x51\x88\xee\x04\xf0\x31\xc1\x8d\x06\xbd\x8c\xe9\x7f\x08\xc6\x71\x6b\x86\x1a" +
	"\x28\xd4\x5b\x55\x94\x10\xf7\x98\x89\x61\x8f\x1b\x59\x7d\x8b\xbc\xc7\x47\x3d\x4e\xf4\x23\xd8\x83\x24\xce\xcd\xdf" +
	"\x83\x86\x08\xce\x57\xb2\xc4\x71\x54\x1b\xff\xf7\xdf\x7f\xff\x38\xc8\xcb\x43\x18\xbd\x42\x5b\xbd\x30\xb0\x4e\xda" +
	"\xe3\x3c\x6b\x71\x92\xb1\xd6\x95\x8c\x50\xd0\x40\x5f\x3a\xa6\xad\xd4\x8c\xbd\x90\xcb\xe2\x5c\xae\x37\x2b\xd4\x48" +
	"\x07\x34\x77\x83\x90\xd8\xd1\x74\x02\x52\x91\x2f\x58\xa9\x09\x31\xca\x33\x90\x05\x82\x4c\x92\xad\xc2\x54\xc0\x1c" +
	"\xb1\x2d\xb0\x60\x51\xc8\xbb\x6b\xa9\x10\xf2\x22\x93\x6a\xcd\x64\x45\x98\x6d\x8b\x04\xc6\xb9\x86\xb7\xfb\xac\x11" +
	"\xc1\x6b\xac\x0d\xbb\x30\x0c\xf2\x0c\xbe\xc9\xb5\xa8\x65\x20\x22\x34\x13\x04\xac\x9b\x99\xf8\x51\xa9\x71\x04\xdf" +
	"\x9c\x41\x91\xaf\x78\x2e\x30\x46\xa3\xf7\x49\x7b\x55\x18\x04\x55\xd8\x9e\xdf\x67\xbd\x90\x56\x86\x41\x8a\x77\x06" +
	"\x7b\xd3\xb3\x86\x14\x1f\x9e\x28\x0c\x03\x64\x69\xed\x9c\x71\x9e\x38\x70\xd8\xcc\x59\x63\xb5\x68\x9b\x27\xb2\x2f" +
	"\x51\xb6\xd6\x24\x91\x54\xd9\x98\xe2\xfc\x3d\x2a\xdd\xb8\x03\xb4\xec\x41\x60\x0a\xdf\xdd\x8f\x58\x92\x88\xa4\x0e" +
	"\x1d\x35\x9c\x10\x41\x42\xd3\x31\x4e\xb2\xe0\x26\x71\x9c\xa2\x0d\xde\xbd\x98\x4d\xcf\x36\xd0\xce\x51\xdd\xe7\x89" +
	"\x89\xb5\xee\xe0\xf5\x43\x51\x73\x18\x34\x8d\x96\xb0\x8e\x37\x1f\x4c\xdc\x73\x71\xd1\x89\xf8\x1e\x1f\x86\x48\x8c" +
	"\x23\x8e\x7d\x7d\xd2\xbb\x5a\xd7\x37\x43\xf3\x64\x59\xc3\x73\x0a\xeb\xf8\x16\xc7\x3d\xce\xd1\x84\x2c\xc6\xfa\x7d" +
	"\x6b\xb5\x21\x2a\x9c\x81\xf8\x81\x34\x6e\x14\xae\x33\x8b\x31\x68\x42\x62\xf9\xfb\x5a\xdc\x23\xd8\x07\x05\xef\x78" +
	"\xd5\x47\x80\xdf\x38\xb6\x0f\x1e\x03\x14\x4c\x99\x30\x93\x88\x6e\xd8\x30\x5e\xdb\x0b\xa2\xbc\x48\xa4\x52\x98\x10" +
	"\x78\x88\xc6\x77\x25\xa1\xc5\x10\xb4\x88\x59\x97\x0b\xd2\xb9\xc0\x87\x31\x55\x1d\x9c\x65\xa0\xaa\xa2\x30\xb0\xf8" +
	"\x5e\x97\x0b\xf1\xef\x62\x1d\xab\x72\x19\xaf\xc6\x28\xae\xe2\xa7\x95\x8c\xd3\x17\x81\x79\xeb\xf6\xc3\xc6\xec\xde" +
	"\x07\xdc\x37\x43\x16\x21\xca\xb3\x8b\x29\x34\xff\x50\xcc\x2e\x26\x61\xe0\xe7\xc8\x29\x90\xa4\x34\xd8\x24\xf2\x29" +
	"\x2f\x6d\xde\x69\xd6\x4f\xe7\x53\x40\xe1\xbf\xd3\xbc\x9d\xa8\x19\xd5\x13\x36\xaf\x4f\x6b\x09\xcc\x3b\x4d\xd1\x36" +
	"\x9b\xc5\xfd\x9d\x76\x68\xe2\x4d\xdb\x24\x3f\xf5\xa6\xed\x10\xc1\xb1\x73\x6a\x9f\x03\x59\x17\x5d\xd7\xd2\x81\x6c" +
	"\x10\x58\x11\x34\x69\xbf\x05\xb2\x9b\x6d\x56\x47\x33\xf4\x21\x26\x7e\xb6\x5e\x3f\xe4\xec\x9a\xe6\xae\x62\x2a\x2d" +
	"\x7f\x36\x93\x7b\x7d\x78\xe5\x10\xc1\xff\x48\x96\x2f\xe7\x43\x36\x5f\x3d\x31\x74\x9c\x0e\x7a\xfa\xcf\xf7\xb3\x3b" +
	"\xf4\x26\x86\x71\xc4\xce\x20\x81\xb3\x9e\x57\x46\xbb\x9d\xb8\x52\x52\xcb\x7f\x6e\x57\x2b\xb3\x77\x64\x3c\xc3\x91" +
	"\x60\x02\xf2\x96\xdc\x9d\x08\x13\x25\x3f\x0c\xad\xff\x83\xa9\xcb\x5b\x9f\x2e\x2f\xe7\x0c\x79\x88\xd1\xd1\xaa\xcd" +
	"\x51\xf7\xb4\x33\xa1\xca\x46\x69\xe2\x7d\x58\x48\x38\xb3\x42\xd5\xb9\xca\xa6\x2a\x8d\xeb\xcd\x8a\x6a\xf4\x51\xb2" +
	"\xca\xb1\xd0\x23\x10\x60\x62\x7a\x33\x53\x1a\xc9\x9a\x29\x3f\xd7\xa5\x98\xe5\x85\xb7\x9d\x57\x9c\x1c\x48\x17\x36" +
	"\x13\xda\x91\xaa\x3a\xe7\x8d\xed\xfa\x73\xfe\x54\x24\x3f\xac\x56\xd7\x72\xa8\x2c\xa2\xa2\xa4\x34\x39\xdf\xec\x9d" +
	"\x80\xdc\xe8\x12\x84\x10\xe6\x12\x25\x68\xfb\x2f\x1b\x2a\x57\x22\x73\x84\xfd\x9b\x54\x93\xa5\x82\x4b\x32\x2c\x58" +
	"\xcb\x82\x4b\x3f\x83\x2c\xf3\xd4\x1a\x9b\x99\xe5\xb2\xf0\xf9\x5d\xa2\x76\xec\x28\x5d\x81\x17\x56\xa0\x57\x25\xff" +
	"\x83\xee\x7d\x83\x9c\xcb\x7d\xac\xcb\xfa\x8a\x34\xc4\xdd\x11\xac\x45\xf0\xd2\xf8\xb3\xd2\xcc\xb7\x37\xc7\x9a\x60" +
	"\x19\x17\xe9\x0a\x15\x10\x68\xc7\xbd\xd9\x3d\xd1\xd4\x46\x50\xeb\x05\x2e\x60\xba\xdc\xa8\x96\x1a\xb3\x07\xdf\x92" +
	"\x4f\xe9\xd5\xa8\x52\x46\x30\x2c\xbe\xb9\x25\x74\x89\x71\x04\x7a\x2d\xb1\xab\xe3\xed\xb0\x3f\x73\x1c\x2c\x55\x0c" +
	"\xaa\x07\xbc\xfe\x59\x51\xee\xf7\x0e\x1c\xe0\x5d\x0b\xc2\x8e\xba\x83\x77\x48\xbb\x59\x41\xa7\x64\xaf\x92\xbf\x6c" +
	"\xf5\xf0\x7c\xa3\xac\x27\x8a\x77\x19\xef\x9e\xfa\xa6\xf8\x4d\x6f\x9a\x26\x81\x99\x0c\x83\x64\x19\x17\x05\xae\xea" +
	"\x2e\x40\x62\xca\xda\x43\xd1\xb2\x5d\x2b\x77\xd8\x8d\xd3\x9b\x96\x41\xdb\xf4\x27\x70\x04\xfd\xa8\x29\xe2\xad\x0a" +
	"\x36\xbd\x58\x52\x67\x67\x30\x1a\x71\x2e\xd8\xc4\x45\x9e\x8c\x47\x6e\x22\x2f\x41\xe1\xdd\x36\x57\x98\x8e\x22\x7b" +
	"\x7b\x72\xf5\xdc\xc7\x0e\x4d\xda\x9e\xde\x4c\x21\xbd\xa1\x74\x69\x29\x4c\x1d\x0f\x1e\x63\x61\xa6\x56\x62\x5b\xa5" +
	"\x37\xe9\xa4\x4b\x30\x82\x67\x22\xaa\xc2\xb5\xb4\x9d\x9b\x63\xd1\x46\x4a\xa2\x52\x09\x97\xbf\x74\x7b\x20\xf1\xec" +
	"\xb5\x19\xfe\x3f\x0a\x83\x07\xae\x99\xcb\xa7\x22\x11\xbf\xc5\xb9\xbe\x54\x72\xbb\xd9\x55\x61\x90\xe8\xc7\x09\x24" +
	"\x71\x91\xe0\x8a\xb3\xab\x95\xe5\xb7\x5c\x2f\xcf\x79\x94\xaf\xb1\x64\x9f\x81\x9b\x45\xf0\xb0\x10\x3f\xa4\xe9\x98" +
	"\x18\x2c\xa4\x89\x45\xa6\xbc\x4f\x31\x43\x05\x0f\x0b\x71\x21\x0b\xe4\xbb\x2c\x4b\xf7\xee\x04\x12\x71\xf0\xe4\x39" +
	"\xed\xc9\x2b\xe3\x06\xb9\xdc\xe4\xf3\x58\x40\x18\x10\x73\x52\x85\xa9\x27\x7c\xfb\x23\x1e\x76\x63\x18\xdc\xc7\x0a" +
	"\xb2\x5c\x95\xfa\x47\xa5\xdc\x91\xcc\xa4\x72\x65\xa3\xd1\x85\xa5\x22\x81\x8d\x09\x98\x56\xbb\x6e\x7c\xf3\xa6\xa1" +
	"\xe2\x15\x2d\x41\x33\x68\x4a\x48\x02\x91\x57\x46\xba\xe9\xb0\x82\xe1\x7e\x9f\x0f\x8f\x76\x82\x6e\xe3\xe4\x05\x31" +
	"\xea\x75\xb8\x09\x03\x5a\x34\x47\x6e\x1b\xd8\x75\xef\xf1\xa1\x59\x3a\x47\xcd\x41\x9c\x8c\xea\x0e\x10\x17\x62\xe9" +
	"\x8d\x38\x37\xef\xe3\x44\xb8\xf3\x00\x89\x30\xe7\x60\xa0\x54\x8d\x42\x0b\x0c\xbb\xb8\xbe\xb4\x9b\xb2\xcd\x88\x21" +
	"\x66\xe9\x8a\xeb\x66\xb9\xd5\xe4\x84\xff\x33\xfe\xb1\x3b\xe6\xa8\xbd\xf9\xf1\xc0\x9e\xa8\x57\xce\x93\x2a\x6d\x74" +
	"\xd5\xd1\x26\x62\xff\x1c\xe3\x8b\x3f\xa1\x3c\x21\xc5\xbf\xa0\xc9\x5d\x93\xa7\xbe\x49\xb9\x25\x97\xa8\x8d\xb1\xf2" +
	"\xb4\xd6\x40\x08\xf1\xec\xfd\xb9\xbe\x4a\x61\x9b\xac\x93\xee\x2b\x75\x9b\x3a\x59\x70\x6f\xc7\xc9\x08\xd9\xbd\xd7" +
	"\x1c\x80\xc0\x5f\xa9\x58\xfc\x4a\xd8\x28\x7b\xe0\x70\x32\x3b\x84\x94\x9f\x00\x91\xb2\x4e\x57\x6d\xc5\x87\x4a\x99" +
	"\x15\x16\x35\x50\x4a\x12\x9d\x62\x79\x4c\x25\x52\x1d\xcc\xeb\x69\x66\xfb\x42\x10\x62\x3f\xf4\xf7\xfa\xb3\x9f\x8e" +
	"\x3f\x6e\xe9\x1a\xdd\x3f\xc4\x74\x11\xe4\x67\xe8\x03\xb3\x7c\x11\x32\xbf\xe6\xc5\x81\xef\xb7\x5f\x0a\x77\xd6\x04" +
	"\x75\xb4\xdf\xde\x18\x9c\x19\x69\x87\x4b\xe4\x56\x7f\x72\xa8\x5f\x14\xbc\x0e\x0c\x43\x68\xa8\x0b\xc9\xe3\xbd\x3f" +
	"\x82\xef\x89\x8c\x01\x0e\x2b\x1f\xb0\xb7\xdb\xd0\xb2\x6e\x31\xda\xa2\x8d\x86\x55\x74\x2c\x00\x3e\xe3\x5d\xee\x8b" +
	"\x46\x96\x60\xa8\x6f\x7a\x75\xbb\xa8\xaa\x7d\xcd\x7e\x6e\xc3\x69\xe4\xf6\x95\xa3\xf6\x1e\x1f\xda\x0a\x72\x13\xec" +
	"\xdc\x95\xe1\x62\x7f\x21\x7e\xac\xfd\x3e\xe1\xfa\xfa\xbf\x61\xbf\xb6\x82\x9f\x6c\x3f\xbe\xb1\x77\x0e\xd1\xe7\xbc" +
	"\xaf\xf3\xa5\xb4\x57\xaf\x0c\x18\xb0\xdd\x56\x7e\x55\x45\x31\x24\x07\x1d\xef\xfa\xac\xf7\x2a\x8a\xb6\x64\xd6\xe3" +
	"\x57\x2e\x76\x1d\x5d\xde\x34\xc9\xb1\x21\xf4\xd7\x2c\x9d\xea\xe4\xd4\xee\x3f\x9e\x0c\x34\x39\x8e\x82\xcf\x57\x6a" +
	"\x84\xf0\x6d\xe7\xa3\x87\x1f\x03\x5b\x43\xd6\x83\xed\x04\x5e\x86\x9c\xcd\xf6\x66\xc0\x54\xe5\x76\xe5\x63\x95\x0b" +
	"\x47\x27\x63\x9b\x99\x98\x5d\x4c\xdc\xd5\xeb\x87\x07\xbe\xd3\xbe\x88\xff\x02\x35\x28\x2c\x37\xb2\x28\x71\x9f\xcf" +
	"\x9c\x3c\xc6\x71\xee\x7b\x94\x93\xaa\xdb\x83\x76\x2d\xe4\xba\xcf\x3c\xd0\x25\xfe\xc9\x24\xab\xb2\xd5\x27\x1e\x76" +
	"\xff\xf3\x3d\x2e\x85\x77\xc0\xc5\x6e\xcf\xbb\xd0\x72\x2f\x0c\xf8\xb7\xd7\x42\xf5\xbe\xb3\xf1\x3e\xa9\x31\x27\x86" +
	"\xa0\xd7\xfd\xb6\xe2\x5f\x79\xa9\xb1\x18\xfe\xbd\xdf\xf6\x0c\xba\x1f\x52\xf8\x8d\x33\x4b\xb2\x69\x9c\x2d\x9d\x65" +
	"\x06\xac\xd5\xb4\xd5\x06\xfb\x6a\x75\x63\x2d\x95\x85\xf9\x4a\x87\x7b\x38\x86\x36\xb7\x6a\x4c\x43\x0c\x86\x7f\x5f" +
	"\xde\xd3\x6b\x33\x12\x76\x7b\x6d\x87\xc4\xac\xef\xc6\x57\x0a\xb3\xfc\x71\xa0\x1f\xd7\x67\xde\x3a\xc1\xd6\x28\xbb" +
	"\x56\x4b\xad\x33\x4b\x68\x76\x42\x4c\x6b\x71\x86\x1a\x6c\x46\x8a\x49\xab\x09\x47\x16\x9a\x7a\x7d\x2e\x67\xa3\xe8" +
	"\xb9\x6e\x5c\x69\xa2\x50\x5b\x96\x08\x9e\x45\xc1\xab\xdb\x6b\x75\x1f\xcc\x76\xaa\x8e\x6f\xb8\xd9\xfc\x5f\xb7\xa5" +
	"\x86\x3b\xc8\x4d\x03\x0e\xe0\xd9\x16\x5c\x63\x5d\x16\xd6\x2f\x4b\xec\x27\x77\xe2\x5a\xe5\xeb\xf9\x36\xcb\xf2\xc7" +
	"\x71\xd9\x54\x2a\x23\x31\x8a\xe0\x7b\x18\x89\xda\xf7\xa3\x09\x94\x5e\xf6\x75\x11\xb4\x29\x5f\xf6\xd5\x2f\x81\x69" +
	"\x05\xfa\x37\xca\x2f\x54\xe4\x97\xfd\xdc\xd9\x0e\xf4\xaf\x2e\xf2\x5b\x64\x0e\x17\xf8\x26\x26\x4f\xf8\xcb\x4a\x23" +
	"\x94\xc3\xba\xe8\x04\xc6\xa6\xea\x67\x99\xdc\xd6\x56\xcf\xb1\x95\x00\x88\x64\xc3\x2a\xc5\xbb\x5f\x6b\x6e\x5d\x0b" +
	"\xf4\xf2\x8e\x2b\x90\x1c\x97\x63\x2d\x51\x4b\x25\x33\x70\xc1\xb5\x4d\xb9\x53\x28\x0d\xdb\xa6\xd1\xe4\x4d\x4b\x6e" +
	"\xab\x52\xb5\xe7\x2a\xde\x0c\x25\xfa\xd1\x7e\x4a\x65\xc4\x34\xd5\x92\x9f\x12\x6b\xa4\xb6\xaf\xdf\x86\xf9\xe9\x29" +
	"\xcc\x32\x28\x24\x7f\x4a\xc6\xbf\x05\x24\x39\xde\xe7\xc5\x02\xf4\x12\x0b\xfe\x7e\x4d\x6e\xb5\xbd\x24\xf3\x17\x69" +
	"\xf1\x4a\x61\x9c\x3e\xf1\xb7\x81\x46\x74\x4c\x89\x52\xc9\x3f\x95\x1b\x29\x92\xb8\xb4\x0d\xe5\x77\x27\xf4\x77\x6a" +
	"\xfc\xc2\x3f\xf4\x4f\x1d\xef\xca\xb4\xa7\xbd\x3c\xd5\x6d\x9d\x3f\xd3\xd6\x6e\x38\x32\xbf\x77\x27\xa5\xe0\x70\xd8" +
	"\x2a\x0f\xc2\x5a\x18\xc2\xc1\xbb\x13\xa2\xe0\xad\xb0\x85\xe6\x73\x61\xd1\xfb\xca\xca\x08\x62\x58\x45\xa1\x2d\xf6" +
	"\xea\xca\xef\xbf\x01\x00\x00\xff\xff\x8c\xb2\xd1\x67\x4a\x2c\x00\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11338,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594355581, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
