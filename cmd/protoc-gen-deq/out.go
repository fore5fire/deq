// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl (10.806kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x6f\xdb\x46\x12\xff\x4c\xfe\x15\x53\x21\x0d\xc4\x54\x5e\xe3\x80\xc3\x7d\x10\xe2\x0f\x39\xbb\xe7\x0a\xb8\xa6\x46\xed\xbb\x06\x08\x8a\x80\x26\x87\x12\x61\x6a\x57\xd9\x5d\xc5\x36\x04\xfe\xef\x87\xd9\x07\xb9\x7c\x48\x7e\xa4\x4e\x7b\x01\x5a\x93\xfb\x98\x99\x9d\xf9\xed\xbc\xc4\xe3\xe3\xe3\xf8\xf8\x18\xe0\x1c\x39\xca\x54\x63\x0e\x99\xc8\x91\xc1\x99\x00\x2e\x34\xac\x45\x5e\x16\xf7\xcc\x2c\x51\x62\x2b\x33\x9c\xc3\x6e\x07\xec\xd2\x3c\x43\x5d\xc7\x44\x60\x93\x66\x37\xe9\x12\xcd\xcc\x85\x7b\xae\xeb\x38\x2e\xd7\x1b\x21\x35\x4c\xe3\x68\x92\x09\xae\xf1\x4e\x4f\xe2\x68\x52\xac\xe9\xcf\x6e\x07\x65\x01\xec\xa7\x54\xfd\x8c\x7a\x25\x72\x05\x47\x75\x1d\x47\x13\x75\xcf\x33\x5a\xa5\xb4\x2c\xf9\x52\xd9\x95\xc8\x73\x3b\xbd\xdb\xd1\xa6\xab\xfb\x0d\xaa\xba\x9e\xe8\x72\x8d\x93\xdd\x0e\x79\x4e\xdc\xa2\xc9\xb2\xd4\x55\x7a\xcd\x32\xb1\x3e\xbe\x49\x75\xb6\xc2\x53\x91\xe3\x71\x8e\x9f\x0f\xf0\xdb\xbb\x87\xfe\x13\x1b\x3d\x10\xe0\x08\x64\xca\x97\x08\xaf\x36\x37\xcb\x19\xbc\xda\xa4\x7a\x05\xf3\x13\x60\x0b\x73\x58\x05\x76\x15\xcd\xd6\x35\x4c\xe8\x29\xd5\xab\xba\x9e\xd8\xbd\x44\xa8\xae\xe3\x24\x8e\x5b\x4a\xf6\x3c\x46\x63\xfa\x7e\x43\x6a\x64\xe7\xe2\x7d\xba\xc6\xba\xfe\xf1\x0b\x72\x0d\x4a\xcb\x6d\xa6\x61\x17\x47\x8b\x33\x88\xa2\x28\x02\x00\xab\x9f\x38\x3a\x95\x98\x6a\xbc\x2a\xd7\x08\x00\xa4\x10\x46\xcf\x71\x74\x86\x45\xba\xad\xf4\xa5\x4e\x35\x42\x8e\x9f\x99\x79\x8a\x23\x3b\xe0\xfe\x05\xe3\x0b\x9e\xe3\x1d\x2a\x3b\xfe\xf1\x77\x47\x3e\x8e\x2e\xb1\xc2\x4c\x0b\xe9\xb7\x78\xbe\x7e\xfc\xbf\x28\x55\x29\x38\x94\x5c\xff\xe3\xef\x31\x1d\xb2\x11\x1e\xde\x98\x97\x5f\xb1\xa8\xeb\xd8\x1f\xee\x53\xb0\xe0\x4a\x6c\xca\xec\x54\xf0\xa2\x5c\xd2\x7e\x94\x45\x9a\x21\x1d\xd3\x1c\xfb\x4a\xf4\x15\x31\x25\x79\xcd\x53\x02\xd3\x37\xfd\xd9\x19\xa0\x94\x42\x26\xc4\xea\xf8\x78\xa0\xc5\x85\x46\x09\xa5\x82\x94\x43\xa9\x09\xeb\x42\x42\x21\xe4\x60\x9d\x62\xb0\xd0\xb0\x4a\xed\xca\x1c\xb9\x2e\xb3\xb4\x0a\xe4\xd3\x82\xc8\x37\xa2\x10\xdd\x19\xe0\x5d\x86\x1b\x0d\x7a\x95\xd2\xff\x10\xac\xe1\xd6\x06\x6a\x20\x51\x6f\x25\x57\x90\x0e\x98\xb1\x71\x8b\x5b\x59\x43\x8d\xbc\xc7\x3b\x3d\xcd\xf4\x1d\xb8\x8b\xc4\x4e\xed\xdf\x83\x8a\x88\x4e\x2b\xa1\x70\x9a\x34\xca\xff\xf0\xe1\xc3\xa7\x51\x5e\x01\xc2\xe8\x15\xba\xc7\x8b\x23\x67\xa4\x3d\xc6\x73\x1a\x27\x19\x9b\xb3\x92\x12\x38\x0d\x0c\xa5\x33\xb4\xa5\x5c\x18\x2b\x94\x82\x9f\x8a\xf5\xa6\x42\x8d\x74\x41\x4b\x3f\x08\x99\x1b\xcd\x67\x20\x24\xd9\xc2\x1c\x6a\x46\x8c\xca\x02\x04\x47\x10\x59\xb6\x95\x98\x33\xb8\x44\xec\x0a\xcc\x8c\x28\x64\xdd\xb5\x90\x08\x25\x2f\x84\x5c\x1b\xb2\x2c\x2e\xb6\x3c\x83\x69\xa9\xe1\xcd\x3e\x6d\x24\xf0\x1c\x6d\xc3\x2e\x8e\xa3\xb2\x80\xef\x4a\xcd\x1a\x19\x88\x08\xcd\x44\x91\x39\x9b\x9d\xf8\x51\xca\x69\x02\xdf\x9d\x00\x2f\x2b\x33\x17\x59\xa5\xd1\xfb\xac\xbb\x2a\x8e\xa2\x3a\xee\xce\xef\xd3\x5e\x4c\x2b\xe3\x28\xc7\xcf\x16\x7b\xf3\x93\x96\x94\xb9\x3c\x49\x1c\x47\x68\xa4\x75\x73\xd6\x78\xec\xc0\x65\xb3\x77\xcd\x1c\x8b\xb6\x05\x22\x87\x12\x15\x6b\x4d\x12\x09\x59\x4c\xc9\xcf\x7f\x41\xa9\x5b\x73\x80\x16\x03\x08\xcc\xe1\xfb\x2f\x13\x23\x49\x42\x52\xc7\x9e\x1a\xce\x88\x20\xa1\xe9\x31\x46\x72\xe0\x26\x71\xfc\x41\x5b\xbc\x07\x3e\x9b\x9e\x9d\xa3\xbd\x44\xf9\xa5\xcc\xac\xaf\xf5\x17\x6f\xe8\x8a\xda\xcb\xa0\x69\x54\xc1\x3a\xdd\x7c\xb4\x7e\xcf\xfb\x45\x2f\xe2\x7b\xbc\x1d\x23\x31\x4d\x8c\xef\x1b\x92\xde\x35\x67\x7d\x3d\x36\x4f\x9a\xb5\x3c\xe7\xb0\x4e\x6f\x70\x3a\xe0\x9c\xcc\x48\x63\xe6\x7c\xaf\xdc\x69\x88\x8a\x89\x40\xe6\x81\x4e\xdc\x1e\xb8\x89\x2c\x56\xa1\x19\x89\x15\xee\xeb\x70\x4f\x60\x1f\x14\x82\xeb\xd5\x5c\x01\xf3\x66\x7c\xfb\xe8\x35\x40\x66\x28\x13\x66\x32\xd6\x77\x1b\xd6\x6a\x7b\x41\x54\xf2\x4c\x48\x89\x19\x81\x87\x68\x7c\xaf\x08\x2d\x96\xa0\x43\xcc\x5a\x2d\xe9\xcc\x1c\x6f\xa7\x94\x75\x98\x28\x03\x75\x9d\xc4\x91\xc3\xf7\x5a\x2d\xd9\x7f\xf8\x3a\x95\x6a\x95\x56\x53\x64\x17\xe9\x7d\x25\xd2\xfc\x49\x60\xde\xfa\xfd\xb0\xb1\xbb\xf7\x01\xf7\xf5\x98\x46\x88\xf2\xe2\x6c\x0e\xed\x3f\x64\x8b\xb3\x59\x1c\x85\x31\x72\x0e\x24\x29\x0d\xb6\x81\x7c\x6e\x96\xb6\xef\x34\x1b\x86\xf3\x39\x20\x0b\xdf\x69\xde\x4d\x34\x8c\x9a\x09\x17\xd7\xe7\x8d\x04\xf6\x9d\xa6\x68\x9b\x8b\xe2\xe1\x4e\x37\x34\x0b\xa6\x5d\x90\x9f\x07\xd3\x6e\x88\xe0\xd8\xbb\xb5\x0f\x81\xac\x8f\xae\x2b\xe1\x41\x36\x0a\xac\x04\xda\xb0\xdf\x01\xd9\xf5\xb6\x68\xbc\x19\x86\x10\x63\x3f\x3b\xab\x1f\x32\x76\x43\x73\x57\x1b\x2a\x1d\x7b\xb6\x93\x7b\x6d\x78\xe1\x11\x61\xfe\x91\x2c\x2f\x67\x43\xa3\xbe\x66\x62\xec\x3a\x1d\xb4\xf4\x9f\x6f\x67\x7f\xe9\xad\x0f\x33\x1e\xbb\x80\x0c\x4e\x06\x56\x99\xec\x76\xec\x42\x0a\x2d\xfe\xb5\xad\x2a\xbb\x77\x62\x2d\x63\x3c\xc1\x0c\xc4\x0d\x99\x3b\x63\xd6\x4b\x7e\x1c\x5b\xff\xbb\xa1\x2e\x6e\x42\xba\x66\xb9\x89\x90\x87\x18\x3d\xfa\x68\x97\xa8\x07\xa7\xb3\xae\xca\x79\x69\xe2\x7d\x58\x48\x38\x71\x42\x35\xb1\xca\x85\x2a\x8d\xeb\x4d\x45\x39\xfa\x24\xab\x4a\xe4\x7a\x02\x0c\xac\x4f\x6f\x67\x94\x95\xac\x9d\x0a\x63\x5d\x8e\x45\xc9\x83\xed\x66\xc5\xd1\x81\x70\xe1\x22\xa1\x1b\xa9\xeb\x53\xb3\xb1\x9b\x7f\x5e\xde\xf3\xec\x5d\x55\x5d\x89\xb1\xb4\x68\x06\x12\xd7\xc2\xd5\x19\x76\x77\x62\x6f\x6a\x58\x30\xb5\xc1\x28\x3a\x27\xfd\x81\x53\x20\xf8\x28\x33\x4a\xb9\xcc\x9d\x4e\x67\x20\x36\x94\xef\x28\x60\x8c\xd9\xda\x8c\x9d\xa3\xfe\xc5\x0c\xda\xa8\x04\x81\xf7\x80\x41\x32\xfc\x4f\x2a\xef\x46\x39\xab\x7d\xac\x55\x53\x09\x8d\x71\xf7\x04\x1b\x11\x82\x68\xfd\xa0\x34\x97\xdb\xeb\xc7\xaa\x60\x95\xf2\xbc\x42\x09\x84\xcd\xe9\x60\x76\x8f\xd3\x74\x8e\xd2\x59\xc1\xe4\x29\x7d\x6e\x94\x32\x4d\xc5\x46\x2b\x78\x43\x86\xa3\x57\x7b\x14\x95\xc0\xb8\xf8\xb6\x18\xe8\x13\x33\x8e\xe6\xb9\xc4\x2e\x48\x0f\xbd\x74\x63\x54\x0b\xfb\xc3\xc3\xc1\x7c\xa4\x5f\xbe\x7b\x30\xfa\x2e\x80\x1b\xf5\xd8\x3f\xc4\x7b\xc1\x09\xc1\x7b\x45\xf8\x65\xab\xc7\xe7\x47\x45\x09\xea\xe1\xfe\xc5\x6b\xf3\xcf\xfc\xba\xad\xd3\xed\x64\x1c\x65\xab\x94\x73\xac\x9a\x42\x3c\xb3\x99\xe5\x21\x87\xd5\x4d\x57\x7b\xec\xa6\xf9\x75\x40\x7f\x06\x5d\xfa\x33\x78\x04\xfd\xa4\xcd\xa3\xdd\x11\x82\x3c\xf7\x53\x6f\x8e\xbc\x72\x7e\x3d\x87\xfc\x9a\x22\x8f\xe3\x36\xf7\x6c\xcd\x98\x21\x3a\x77\x9c\x5d\xc2\xdb\x7a\xe6\x3e\xc1\x04\x9e\xe9\x9c\x48\x4a\x94\x32\x33\xe9\x22\x65\xdb\x24\x83\x2b\x33\xe1\x6f\x49\x1c\xdd\x9a\x1c\x53\xdd\xf3\x8c\xfd\x96\x96\xfa\x5c\x8a\xed\x66\x57\xc7\x51\xa6\xef\x66\x90\xa5\x3c\xc3\xca\x44\x23\xc7\xf0\xb7\x52\xaf\x4e\xcd\xa8\x29\xfb\xa8\x1a\x1b\xc9\xc4\xa3\xdb\x25\x7b\x97\xe7\x53\x62\xb0\x14\xf6\x52\xdb\x74\x38\xc7\x02\x25\xdc\x2e\xd9\x99\xe0\x68\xca\xb5\xc6\xd8\x26\xe6\xe5\xd7\xec\xd4\xbe\x4f\x33\xe6\xf5\x05\x19\xb3\x7a\x1a\xc9\x0a\x92\x86\xa8\x5b\xdd\x14\x48\x71\xe4\xf3\x64\xd3\x02\xba\xe7\x99\x55\x9e\x57\x56\x03\x83\xc4\x96\xae\xbd\x1c\x2a\x52\x26\x3b\xb0\xcf\xb9\x4d\x63\xe6\xf4\x9c\xa5\x0a\xc1\xe8\xf4\xed\x11\xfd\x35\x83\xb5\xad\x62\xeb\x69\x7b\x03\x4c\xbf\x2e\x38\x3d\xc4\x11\xe9\x85\xb4\x6c\x8a\xde\xcc\xc8\x49\x84\x12\xbb\xb1\xc9\xeb\xdf\x1e\xd1\x68\x1c\x59\xf5\x4f\x8d\x95\xfc\xbe\xb6\x90\x94\x32\xae\x61\xbc\xc7\x16\xe2\xa8\x1b\x14\x5b\x40\xfd\x09\xf1\x89\x74\x19\x7f\xbd\xbd\xf7\x99\xdb\x17\xf3\x4d\xc6\xec\x97\x9c\xa3\xb6\x86\x2f\xf3\xe6\x04\x8c\xb1\x07\xeb\xa4\x26\x65\xc6\x2e\x59\x2f\xdd\x37\xea\x2a\xf4\x5c\xed\xde\xce\x82\x15\xb2\x9f\xbf\x1e\x80\xc0\x5f\x29\x5b\xf8\x46\xd8\x50\x03\x70\x78\x99\x3d\x42\xd4\x57\x40\x44\x35\x6e\xb6\x7b\xf0\xb1\x78\x59\x21\x6f\x80\xa2\x48\xf4\x42\x48\x48\x29\x0e\xcf\x4f\xdc\x85\x6e\xa6\x0d\xdb\x27\x82\x10\xf7\xb8\xb5\x3f\x16\x7f\xc6\xf1\xd9\xb3\x7f\x4c\x29\xe1\x37\xcf\x30\x04\xa6\x7a\x12\x32\xbf\x65\xe6\x68\xea\x98\x97\xc2\x9d\x53\x81\x9f\xb8\xdc\x5e\x5b\x9c\x59\x69\xc7\xf3\xb0\x4e\x1f\x6a\xac\x2f\x10\x3d\x0f\x0c\x63\x68\x88\x36\x29\x2f\xb3\x27\x59\x7f\x02\x3f\x10\x19\x0b\x1c\x1b\x80\x8d\xb5\xbb\xd0\x72\x66\xb1\xa7\x45\xe7\x0d\xeb\xe4\xb1\x00\xf8\x03\x93\xf9\x17\xf5\x2c\xd1\x58\x7f\xec\xe2\x66\x59\xd7\xfb\x9a\xba\xa6\xdd\xa2\xd1\xb4\x29\x3c\xb5\xf7\x78\xdb\x3d\xa0\x69\x76\x9c\xfa\x1c\x91\xed\xcf\x12\x1f\xab\xbf\xaf\xa8\x5f\xfe\x3f\xf4\xd7\x3d\xe0\x57\xeb\xef\xa5\x4b\x36\x53\xf9\x0c\xf2\x95\x11\x05\x76\xdb\x87\xcf\xca\x28\xc6\xe4\xa0\xeb\xdd\xdc\xf5\x41\x46\xd1\x95\xcc\x59\xfc\xc2\xfb\xae\x67\xa5\x37\x9b\xed\xf5\x80\x0d\xb6\xf4\xff\x9a\x19\x55\x13\xb3\xba\xed\xa7\xa3\x91\x02\xfb\x51\xa8\xfa\x46\x45\xb8\x69\x1d\x7f\x0a\x60\x65\xd1\x6c\xc9\x06\x68\x9e\xc1\xd3\x00\x35\x66\x43\x89\x6a\x5b\x85\x10\x36\xf9\xa4\x97\xb1\xcb\x8c\x2d\xce\x0c\x7a\x28\x55\x7c\x77\x6b\xea\x99\x27\xf1\x5f\xa2\x06\x89\x6a\x23\xb8\xc2\x7d\x36\xf3\xf2\x58\xc3\xf9\xcf\x11\x8e\xea\x7e\x0b\xd2\x77\x10\x9b\x36\xe3\x48\x93\xf0\x27\x1b\xc3\x54\xa7\x4d\x38\x6e\xfe\x87\xfb\x2b\x12\x3f\x83\xc9\x81\x07\xd6\x85\x8e\x79\x61\xc4\xbe\x83\xd6\x5a\xf0\x99\x45\xf0\x45\x85\xbd\x31\x04\xbd\xfe\x4f\xeb\xff\x2e\x95\x46\x3e\xfe\x73\xaf\x6b\x9f\xf5\x7f\x47\x0f\x9b\x36\x8e\x64\xdb\xb4\x59\x79\xcd\x8c\x68\xab\x6d\xe9\x8c\xf6\x74\x9a\xa6\x4e\x2e\xb8\xfd\x48\xc3\xb4\x24\x2c\x6d\xd3\x79\xb0\xcd\x18\x18\xff\x79\x71\x4f\x9f\xc7\x4a\xd8\xef\xf3\x1c\x12\xb3\x29\xff\x2f\x24\x16\xe5\xdd\x48\x2f\x68\xc8\xbc\x73\x83\x9d\x52\xba\x6d\xa0\xde\x2c\xa1\xd9\x0b\x31\x6f\xc4\x19\x6b\x0a\x59\x29\x66\x9d\xc6\x11\x69\x68\x1e\xb4\x6d\xbc\x8e\x92\x87\x3a\x48\xca\x7a\xa1\xae\x2c\x09\x3c\x88\x82\x17\xef\x16\xb9\x24\xa0\xe9\x6b\x8c\xf7\x2a\xdb\xee\x11\xc0\xe1\xf6\x91\xf9\x81\x2f\x48\x4d\x54\x98\x9a\xb8\xcf\xab\xd8\x95\x2c\xd7\x97\xdb\xa2\x28\xef\xa6\xaa\xcd\x56\x26\x6c\x92\xc0\x0f\x30\x61\x8d\xa1\x27\x33\x50\x41\x04\xf6\xee\xf2\xc1\x46\x93\x11\xa2\x57\x55\xbe\x50\xa2\xaf\x86\x81\xb2\xeb\xd5\x9f\x9d\xe8\x77\xc8\x1c\x4e\xf2\xad\x03\x9e\x99\xaf\xe8\xac\x50\x1e\xd8\xac\xe7\x05\xdb\xcc\xdf\xc8\xe4\xb7\x86\x3f\x8a\x75\xbd\x3d\x91\x6c\x59\xe5\xf8\xf9\xd7\x86\x5b\x5f\x03\x83\x20\xe3\x93\x24\xcf\xe5\xb1\x9a\x68\xa4\x12\x05\x78\x4f\xda\xa5\xdc\x4b\x96\xc6\x75\xd3\x9e\xe4\x75\x47\x6e\x77\xa4\x7a\x4f\x39\xde\x0e\x65\xfa\xce\x7d\x36\x63\xc5\xb4\xa9\x51\x18\xff\x1a\xa4\x76\x4b\x70\xcb\xfc\xf8\x18\x16\x05\x70\x61\x3e\x1b\x2a\x15\x48\xcc\x4a\xfc\x52\xf2\x25\xe8\x15\x72\xf3\xad\x92\xd8\x6a\x57\x28\x9b\xaf\x8f\xd2\x4a\x62\x9a\xdf\x9b\xef\xc0\xac\xe8\x98\xf7\x1b\x9f\xa3\xcd\xce\xb0\x1b\x1a\x34\x3e\x83\xa0\xd4\x6f\xfb\x3e\xd0\xf7\x6c\x39\x1a\x7e\x6f\x8f\x14\x33\xbe\xaf\x93\x0b\xc4\x8d\x30\x6d\x8f\x34\x58\xe1\x3a\x31\x0f\xf9\xc0\xe0\x8b\x1a\x2b\x88\x65\x95\xc4\x2e\xb3\x6b\xd2\xbc\xff\x05\x00\x00\xff\xff\xbd\x8a\x7f\xc4\x36\x2a\x00\x00")

func outGoTplBytes() ([]byte, error) {
	return bindataRead(
		_outGoTpl,
		"out.go.tpl",
	)
}

func outGoTpl() (*asset, error) {
	bytes, err := outGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.go.tpl", size: 10806, mode: os.FileMode(0644), modTime: time.Unix(1564780812, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xb3, 0x35, 0xcc, 0xc5, 0x1, 0xd5, 0x5f, 0x7c, 0x23, 0xf8, 0xee, 0xff, 0x9b, 0x4c, 0xe7, 0x78, 0x8a, 0xd6, 0xd7, 0xe5, 0x69, 0x32, 0x9a, 0x48, 0x45, 0xd6, 0x78, 0x7, 0xe, 0x41, 0xc5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": outGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out.go.tpl": &bintree{outGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
