// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl (10.616kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x6f\xdb\x46\x12\xff\x4c\xfe\x15\x53\xa1\x2d\xc4\x54\x5e\xe1\xbe\x0a\xf1\x87\x9c\xdd\x73\x05\x5c\x53\xa3\xf6\xa1\x01\x82\x22\xa0\xc9\xa1\x44\x98\xda\x55\x76\x57\xb1\x0d\x81\xff\xfb\x61\xf6\xc5\xa7\xe4\x47\xea\x5c\x2f\x40\x6b\x72\x1f\x33\xb3\x33\xbf\x9d\x97\x38\x9f\xcf\xe3\xf9\x1c\xe0\x02\x39\xca\x54\x63\x0e\x99\xc8\x91\xc1\xb9\x00\x2e\x34\x6c\x44\x5e\x16\x0f\xcc\x2c\x51\x62\x27\x33\x5c\xc0\x7e\x0f\xec\xca\x3c\x43\x5d\xc7\x44\x60\x9b\x66\xb7\xe9\x0a\xcd\xcc\xa5\x7b\xae\xeb\x38\x2e\x37\x5b\x21\x35\x4c\xe3\x68\x92\x09\xae\xf1\x5e\x4f\xe2\x68\x52\x6c\xe8\xcf\x7e\x0f\x65\x01\xec\x97\x54\xfd\x8a\x7a\x2d\x72\x05\x27\x75\x1d\x47\x13\xf5\xc0\x33\x5a\xa5\xb4\x2c\xf9\x4a\xd9\x95\xc8\x73\x3b\xbd\xdf\xd3\xa6\xeb\x87\x2d\xaa\xba\x9e\xe8\x72\x83\x93\xfd\x1e\x79\x4e\xdc\xa2\xc9\xaa\xd4\x55\x7a\xc3\x32\xb1\x99\xdf\xa6\x3a\x5b\xe3\x99\xc8\x71\x9e\xe3\xe7\x23\xfc\x0e\xee\xa1\xff\xc4\x56\x0f\x04\x38\x01\x99\xf2\x15\xc2\xf7\xdb\xdb\xd5\x0c\xbe\xdf\xa6\x7a\x0d\x8b\x53\x60\x4b\x73\x58\x05\x76\x15\xcd\xd6\x35\x4c\xe8\x29\xd5\xeb\xba\x9e\xd8\xbd\x44\xa8\xae\xe3\x24\x8e\x1b\x4a\xf6\x3c\x46\x63\xfa\x61\x4b\x6a\x64\x17\xe2\x7d\xba\xc1\xba\xfe\xf9\x0b\x72\x0d\x4a\xcb\x5d\xa6\x61\x1f\x47\xcb\x73\x88\xa2\x28\x02\x00\xab\x9f\x38\x3a\x93\x98\x6a\xbc\x2e\x37\x08\x00\xa4\x10\x46\xcf\x71\x74\x8e\x45\xba\xab\xf4\x95\x4e\x35\x42\x8e\x9f\x99\x79\x8a\x23\x3b\xe0\xfe\xb5\xc6\x97\x3c\xc7\x7b\x54\x76\xfc\xe3\x9f\x8e\x3c\x09\x1d\x84\x81\x37\xe6\xe5\x77\x2c\xea\x3a\xf6\xc2\x7e\x6a\x2d\xb8\x16\xdb\x32\x3b\x13\xbc\x28\x57\x50\x72\x8d\xb2\x48\x33\x24\xb1\xcd\x31\xae\x45\xff\x60\x53\xe2\x6f\x9e\x12\x98\xbe\xe9\xcf\xce\x00\xa5\x14\x32\x21\x56\xf3\xf9\x40\x2b\x4b\x8d\x12\x4a\x05\x29\x87\x52\x13\x76\x85\x84\x42\xc8\xc1\x3a\xc5\x60\xa9\x61\x9d\xda\x95\x39\x72\x5d\x66\x69\xd5\x92\x4f\x0b\x22\x1f\x44\x21\xba\x33\xc0\xfb\x0c\xb7\x1a\xf4\x3a\xa5\xff\x21\x58\x43\x6c\x0c\x74\x40\xa2\xde\x49\xae\x20\x1d\x30\x63\xe3\x16\xb4\xb2\xb6\x35\xf2\x1e\xef\xf5\x34\xd3\xf7\xe0\x2e\x06\x3b\xb3\x7f\x8f\x2a\x22\x3a\xab\x84\xc2\x69\x12\x94\xff\xe1\xc3\x87\x4f\xa3\xbc\x5a\x88\xa1\x57\xe8\x1e\x2f\x8e\x9c\x91\x0e\x18\xcf\x69\x9c\x64\x0c\x67\x25\x25\x70\x1a\x18\x4a\x67\x68\x4b\xb9\x34\x56\x28\x05\x3f\x13\x9b\x6d\x85\x1a\xe9\xc2\x95\x7e\x10\x32\x37\x9a\xcf\x40\x48\xb2\x85\x39\xd4\x8c\x18\x95\x05\x08\x8e\x20\xb2\x6c\x27\x31\x67\x70\x85\xd8\x15\x98\x19\x51\xc8\xba\x1b\x21\x11\x4a\x5e\x08\xb9\x31\x64\x59\x5c\xec\x78\x06\xd3\x52\xc3\x9b\x43\xda\x48\xe0\x25\xda\x86\x7d\x1c\x47\x65\x01\xdf\x95\x9a\x05\x19\x88\x08\xcd\x44\x91\x39\x9b\x9d\xf8\x59\xca\x69\x02\xdf\x9d\x02\x2f\x2b\x33\x17\x59\xa5\xd1\xfb\xac\xbb\x2a\x8e\xa2\x3a\xee\xce\x1f\xd2\x5e\x4c\x2b\xe3\x28\xc7\xcf\x16\x7b\x8b\xd3\x86\x94\xb9\x3c\x49\x1c\x47\x68\xa4\x75\x73\xd6\x78\xec\xc8\x65\xb3\x77\xcd\x1c\x8b\xb6\xb5\x44\x6e\x4b\x54\x6c\x34\x49\x24\x64\x31\x25\xbf\xfd\x05\xa5\x6e\xcc\x01\x5a\x0c\x20\xb0\x80\x1f\xbe\x4c\x8c\x24\x09\x49\x1d\x7b\x6a\x38\x23\x82\x84\xa6\xa7\x18\xc9\x81\x9b\xc4\xf1\x07\x6d\xf0\xde\xf2\xc1\xf4\xec\x1c\xe7\x15\xca\x2f\x65\x66\x7d\xa7\xbf\x78\x43\x57\xd4\x5c\x06\x4d\xa3\x0a\x36\xe9\xf6\xa3\x75\x70\xde\xcf\x79\x11\xdf\xe3\xdd\x18\x89\x69\x62\x7c\xdf\x90\xf4\x3e\x9c\xf5\xc7\xb1\x79\xd2\xac\xe5\xb9\x80\x4d\x7a\x8b\xd3\x01\xe7\x64\x46\x1a\x33\xe7\xfb\xde\x9d\x86\xa8\x98\x88\x62\x1e\xe8\xc4\xcd\x81\x43\xa4\xb0\x0a\xcd\x48\xac\xf6\xbe\x0e\xf7\x04\x0e\x41\xa1\x75\xbd\xc2\x15\x30\x6f\xc6\xb7\x8f\x5e\x03\x64\x86\x32\x61\x26\x63\x7d\xb7\x61\xad\x76\x10\x44\x25\xcf\x84\x94\x98\x11\x78\x88\xc6\x0f\x8a\xd0\x62\x09\x3a\xc4\x6c\xd4\x8a\xce\xcc\xf1\x6e\x4a\x59\x84\x89\x32\x50\xd7\x49\x1c\x39\x7c\x6f\xd4\x8a\xfd\x87\x6f\x52\xa9\xd6\x69\x35\x45\x76\x99\x3e\x54\x22\xcd\x9f\x05\xe6\x9d\xdf\x0f\x5b\xbb\xfb\x10\x70\x7f\x1c\xd3\x08\x51\x5e\x9e\x2f\xa0\xf9\x87\x6c\x79\x3e\x8b\xa3\x76\x8c\x5c\x00\x49\x4a\x83\x4d\x60\x5e\x98\xa5\xcd\x3b\xcd\xb6\xc3\xf3\x02\x90\xb5\xdf\x69\xde\x4d\x04\x46\x61\xc2\xc5\xe9\x45\x90\xc0\xbe\x13\x8c\x7a\xb7\xed\x31\x70\xf4\x51\x71\x2d\x3c\x38\x46\x01\x91\x40\x13\xae\x3b\xe0\xb8\xd9\x15\xc1\x0b\x61\x1b\x1a\xec\x57\x67\xad\x63\x46\x0a\x34\xf7\xb5\xa1\xd2\xb1\x43\x33\x79\x50\xf7\x97\xde\x92\xe6\x1f\xc9\xf2\x7a\xba\x37\xea\x0b\x13\x63\xd7\xe0\xd5\x2c\xe4\xaf\x99\xf5\x1a\xc6\x47\x16\x90\xc1\xe9\x40\x9f\x93\xfd\x9e\x5d\x4a\xa1\xc5\xbf\x76\x55\x65\xf7\x4e\xac\x4e\xcd\xdd\x9b\x81\xb8\x25\x43\x65\xcc\xfa\xa5\x8f\x63\xeb\xff\x34\xd4\xc5\x6d\x9b\xae\x59\x6e\x62\xd2\x31\x46\x4f\x3e\xda\x15\xea\xc1\xe9\xac\x73\x70\x7e\x91\x78\x1f\x17\x12\x4e\x9d\x50\x21\x3a\xb8\xe0\xa0\x71\xb3\xad\x28\xcb\x9d\x64\x55\x89\x5c\x4f\x80\x81\xf5\xa2\xcd\x8c\xb2\x92\x35\x53\xed\xe8\x92\x63\x51\xf2\xd6\x76\xb3\xe2\xe4\x88\x83\x76\xb1\xc7\x8d\xd4\xf5\x99\xd9\xd8\xcd\xf8\xae\x1e\x78\xf6\xae\xaa\xae\xc5\x58\x22\x32\x03\x89\x1b\xe1\x32\x75\xbb\x3b\xb1\x77\xac\x5d\x72\x34\xee\x3f\xba\x20\xfd\x81\x53\x20\x78\xbf\x3e\x4a\xb9\xcc\x9d\x4e\x67\x20\xb6\x94\x61\x28\x60\x8c\xd9\xea\x86\x5d\xa0\xfe\xcd\x0c\xda\x38\x00\xad\x7b\x0f\x83\xf4\xf3\x9f\x54\x20\x8d\x72\x56\x87\x58\xab\x50\x4b\x8c\x71\xf7\x04\x83\x08\xad\xf8\xf8\xa8\x34\x57\xbb\x9b\xa7\xaa\x60\x9d\xf2\xbc\x42\x09\x84\xcd\xe9\x60\xf6\x80\xbb\x73\x2e\xce\x59\xc1\x64\x06\x7d\x6e\x94\xa4\x4c\xc5\x56\x2b\x78\x43\x86\xa3\x57\x7b\x14\x95\xc0\xb8\xf8\x36\xfd\xee\x13\x33\x2e\xe2\xa5\xc4\x2e\x49\x0f\xbd\x00\x3f\xaa\x85\xc3\x8e\xfd\x68\x06\xd0\x2f\x80\x3d\x18\x7d\x1d\xed\x46\x3d\xf6\x8f\xf1\x5e\x72\x42\xf0\x41\x11\x7e\xdb\xe9\xf1\xf9\x51\x51\x5a\x15\x68\xff\xe2\x35\x19\x5f\x7e\xd3\x54\xba\x76\x32\x8e\xb2\x75\xca\x39\x56\xa1\x84\xce\x6c\x2e\x77\xcc\x61\x75\x13\xc4\x1e\xbb\x69\x7e\xd3\xa2\x3f\x83\x2e\xfd\x19\x3c\x81\x7e\xd2\x64\xae\xee\x08\xad\xcc\xf2\x53\x6f\x8e\xbc\x72\x7e\xb3\x80\xfc\x86\xc2\x8d\xe3\xb6\xf0\x6c\xcd\x98\x21\xba\x70\x9c\x5d\x8a\xd9\x78\xe6\x3e\xc1\x04\x5e\xe8\x9c\x48\x4a\x94\x32\x33\x09\x1a\xe5\xb7\x24\x83\x2b\xec\xe0\x1f\x49\x1c\xdd\x99\xac\x4e\x3d\xf0\x8c\xfd\x91\x96\xfa\x42\x8a\xdd\x76\x5f\xc7\x51\xa6\xef\x67\x90\xa5\x3c\xc3\xca\x44\x23\xc7\xf0\x8f\x52\xaf\xcf\xcc\xa8\x29\xb4\xa8\xfe\x19\xc9\x7d\xa3\xbb\x15\x7b\x97\xe7\x53\x62\xb0\x12\xf6\x52\xdb\x04\x34\xc7\x02\x25\xdc\xad\xd8\xb9\xe0\x68\x0a\xa4\x60\x6c\x13\xf3\xf2\x1b\x76\x66\xdf\xa7\x19\xf3\xfa\x82\x8c\x59\x3d\x8d\xc4\xf3\x24\x10\x75\xab\x43\x49\x12\x47\x3e\x33\x35\x4d\x94\x07\x9e\x59\xe5\x79\x65\x05\x18\x24\xb6\x58\xec\x65\x3f\x91\xc2\x0a\x2d\x44\x0d\x07\x4a\x40\x16\xf4\x9c\xa5\x0a\xc1\xe8\xf4\xed\x09\xfd\x35\x83\xb5\xad\x1b\xeb\x69\x73\x03\x4c\xc7\xab\x75\x7a\x88\x23\xd2\x0b\x69\xd9\x94\x99\x99\x91\x93\x08\x25\x76\x63\xc8\xa4\xdf\x9e\xd0\x68\x1c\x59\xf5\x4f\x8d\x95\xfc\xbe\xa6\x74\x93\x32\xae\x61\xbc\x4b\xd5\xc6\x51\x37\x28\x36\x80\xfa\x1f\xc4\x27\xd2\x65\xfc\xf5\xf6\x3e\x64\x6e\x5f\x3e\x87\x5c\xd7\x2f\xb9\x40\x6d\x0d\x5f\xe6\xe1\x04\x8c\xb1\x47\x2b\x93\x90\xec\x62\x97\xac\x97\xee\x1b\xd5\xf1\x3d\x57\x7b\xb0\x96\xb7\x42\xf6\xf3\xd7\x23\x10\xf8\x3b\x65\x0b\xdf\x08\x1b\x6a\x00\x0e\x2f\xb3\x47\x88\xfa\x0a\x88\xa8\xe0\x66\xbb\x07\x1f\x8b\x97\x15\xf2\x00\x14\x45\xa2\x17\x42\x42\x4a\x71\x78\x71\xea\x2e\x74\x98\x36\x6c\x9f\x09\x42\x3c\xe0\xd6\xfe\x5a\xfc\x19\xc7\x67\xcf\xfe\x31\xa5\x84\xdf\x3c\xc3\x10\x98\xea\x59\xc8\xfc\x96\x99\xa3\xa9\x63\x5e\x0b\x77\x4e\x05\x7e\xe2\x6a\x77\x63\x71\x66\xa5\x1d\xcf\xc3\x3a\x9d\x9f\xb1\x8a\x3e\x7a\x19\x18\xc6\xd0\x10\x6d\x53\x5e\x66\xcf\xb2\xfe\x04\x7e\x22\x32\x16\x38\x36\x00\x1b\x6b\x77\xa1\xe5\xcc\x62\x4f\x8b\xce\x1b\xd6\xc9\x53\x01\xf0\x17\x26\xf3\xaf\xea\x59\xa2\xb1\x8e\xd4\xe5\xed\xaa\xae\x0f\xb5\x51\x4d\xa3\x44\xa3\x5c\x00\x04\x6a\xef\xf1\xae\x7b\x40\xd3\xa6\x38\xf3\x39\x22\x3b\x9c\x25\x3e\x55\x7f\x5f\x51\xbf\xfc\x7f\xe8\xaf\x7b\xc0\xaf\xd6\xdf\x6b\x97\x6c\xa6\xf2\x19\xe4\x2b\x23\x0a\xec\x36\xfe\x5e\x94\x51\x8c\xc9\x41\xd7\x3b\xdc\xf5\x41\x46\xd1\x95\xcc\x59\xfc\xd2\xfb\xae\x17\xa5\x37\xdb\xdd\xcd\x80\x0d\x36\xf4\xff\x9e\x19\x55\x88\x59\xdd\xf6\xd3\xc9\x48\x81\xfd\x24\x54\x7d\xa3\x22\xdc\x34\x7d\x3f\xb5\x60\x65\xd1\x6c\xc9\xb6\xd0\x3c\x83\xe7\x01\x6a\xcc\x86\x12\xd5\xae\x6a\x43\xd8\xe4\x93\x5e\xc6\x2e\x33\xb6\x3c\x37\xe8\xa1\x54\xf1\xdd\x9d\xa9\x67\x9e\xc5\x7f\x85\x1a\x24\xaa\xad\xe0\x0a\x0f\xd9\xcc\xcb\x63\x0d\xe7\x7f\xd0\x3f\xa9\xfb\x2d\x48\xdf\x41\x0c\x6d\xc6\x91\x26\xe1\x2f\x36\x86\xa9\x4e\x9b\x70\xdc\xfc\x8f\xf7\x57\x24\x7e\x06\x93\x03\x0f\xac\x0b\x1d\xf3\xc2\x88\x7d\x07\xad\xb5\xd6\x87\x0a\xad\x6f\x12\xec\x8d\x21\xe8\xf5\x7f\xcc\xfe\x77\xa9\x34\xf2\xf1\x1f\x58\x5d\xfb\xac\xff\xcb\x75\xbb\x69\xe3\x48\x36\x4d\x9b\xb5\xd7\xcc\x88\xb6\x9a\x96\xce\x68\x4f\x27\x34\x75\x72\xc1\xed\x67\x0e\xa6\x25\x61\x69\x9b\xce\x83\x6d\xc6\xc0\xf8\x0f\x7a\x07\xfa\x3c\x56\xc2\x7e\x9f\xe7\x98\x98\xa1\xfc\xbf\x94\x58\x94\xf7\x23\xbd\xa0\x21\xf3\xce\x0d\x76\x4a\xe9\xb6\x81\x7a\xb3\x84\x66\x2f\xc4\x22\x88\x33\xd6\x14\xb2\x52\xcc\x3a\x8d\x23\xd2\xd0\xa2\xd5\xb6\xf1\x3a\x4a\x1e\xeb\x20\x29\xeb\x85\xba\xb2\x24\xf0\x28\x0a\x5e\xbd\x5b\xe4\x92\x80\xd0\xd7\x18\xef\x55\x36\xdd\x23\x80\xe3\xed\xa3\x28\xea\x36\x90\x54\x3b\x35\x71\x1f\x28\xb1\x6b\x59\x6e\xae\x76\x45\x51\xde\x4f\x55\x93\xad\x4c\xd8\x24\x81\x9f\x60\xc2\x82\xa1\x27\x33\x50\xad\x08\xec\xdd\xe5\xa3\x8d\x26\x23\x44\xaf\xaa\x7c\xa5\x44\x5f\x0d\x03\x65\xd7\xab\xbf\x38\xd1\xef\x90\x39\x9e\xe4\x5b\x07\x3c\x33\xdf\xa1\x59\xa1\x3c\xb0\x59\xcf\x0b\x36\x99\xbf\x91\xc9\x6f\x6d\xff\x28\xd6\xf5\xf6\x44\xb2\x61\x95\xe3\xe7\xdf\x03\xb7\xbe\x06\x06\x41\xc6\x27\x49\x9e\xcb\x53\x35\x11\xa4\x12\x05\x78\x4f\xda\xa5\xdc\x4b\x96\xc6\x75\xd3\x9c\xe4\xc7\x8e\xdc\xee\x48\xf5\x81\x72\xbc\x19\xca\xf4\xbd\xfb\x50\xc5\x8a\x69\x53\xa3\x76\xfc\x0b\x48\xed\x96\xe0\x96\xf9\x7c\x0e\xcb\x02\xb8\x30\x1f\xea\x94\x0a\x24\x66\x25\x7e\x29\xf9\x0a\xf4\x1a\xb9\xf9\x3a\x48\xec\xb4\x2b\x94\xcd\xf7\x3e\x69\x25\x31\xcd\x1f\xcc\x97\x57\x56\x74\xcc\xfb\x8d\xcf\xd1\x66\x67\xbb\x1b\xda\x6a\x7c\xb6\x82\x52\xbf\xed\xfb\x48\xdf\xb3\xe1\x68\xf8\xbd\x3d\x51\xcc\xf8\xbe\x4e\x2e\x10\x07\x61\x9a\x1e\x69\x6b\x85\xeb\xc4\x3c\xe6\x03\x5b\xdf\xb0\x58\x41\x2c\xab\x24\x76\x99\x5d\x48\xf3\xfe\x1b\x00\x00\xff\xff\x6e\xcf\xa0\x0a\x78\x29\x00\x00")

func outGoTplBytes() ([]byte, error) {
	return bindataRead(
		_outGoTpl,
		"out.go.tpl",
	)
}

func outGoTpl() (*asset, error) {
	bytes, err := outGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.go.tpl", size: 10616, mode: os.FileMode(0644), modTime: time.Unix(1561780772, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xa9, 0x5c, 0xe9, 0x99, 0xe4, 0xe0, 0x71, 0xba, 0x1c, 0xea, 0x63, 0x23, 0x76, 0xbd, 0xe9, 0xed, 0x8c, 0xd3, 0x38, 0x8d, 0x27, 0x53, 0xc2, 0xde, 0x76, 0xa4, 0x2b, 0x92, 0x94, 0x5d, 0x0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": outGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out.go.tpl": &bintree{outGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
