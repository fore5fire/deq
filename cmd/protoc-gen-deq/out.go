package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\xe3\x38\x12\x3e\x4b\xbf\xa2\x46\xd8\x19\x48\x3d\x8e\x8c\xbd\x1a\xdd\x87\x46\x32\xdb\x63\x60\xa7\x27\xd8\x64\x31\x87\xc6\xa0\x21\x53\x25\x5b\x88\x44\x3a\x14\x9d\x07\x0c\xfd\xf7\x45\x91\x94\x44\x3d\xec\x38\xe9\x64\xa7\x81\xdd\x1c\x62\x4b\x14\xab\xbe\x7a\xb0\x5e\xd6\x7c\x3e\xf7\xe7\x73\x80\x4f\xc8\x51\x26\x0a\x53\x60\x22\xc5\x18\x2e\x04\x70\xa1\xa0\x14\x69\x9e\x3d\xc6\xfa\x91\x4a\xec\x24\xc3\x05\xec\xf7\x10\x5f\xe9\xef\x50\xd7\x3e\x11\xd8\x26\xec\x26\x59\xa3\x5e\xb9\xb4\xdf\xeb\xda\xf7\xf3\x72\x2b\xa4\x82\xd0\xf7\x02\x26\xb8\xc2\x07\x15\xf8\x5e\x90\x95\xf4\xb1\xdf\x9f\x41\x9e\x41\xfc\x6b\x52\xfd\x86\x6a\x23\xd2\x8a\xb6\x78\x41\xf5\xc8\x19\x3d\x55\x29\x99\xf3\x75\x65\x9f\x44\x9e\xea\xe5\xfd\x9e\xf6\x5c\x3f\x6e\xb1\xaa\xeb\x40\xe5\x25\x06\xfb\x3d\xf2\x94\xb8\x79\xc1\x3a\x57\x45\xb2\x8a\x99\x28\xe7\x37\x89\x62\x1b\x3c\x17\x29\xce\x53\xbc\x0d\x9a\x9d\x0e\xb7\x33\xcd\xee\xe0\x96\x79\xc2\x6e\xfa\xcc\x23\xdf\xa7\x2b\x99\xf0\x35\x5a\x0c\x5a\x4a\xf5\xb8\x25\xd1\xe3\x4f\xe2\x73\x52\x62\x5d\xff\x72\x87\x5c\x41\xa5\xe4\x8e\x29\xd8\xfb\xde\xf2\x02\x3c\xcf\xf3\x00\xc0\xc8\xe4\x7b\xe7\x12\x13\x85\xd7\x79\x89\x00\x40\x42\xc4\xf4\xdd\xf7\x2e\x30\x4b\x76\x85\xba\x52\x89\x42\x48\xf1\x36\xd6\xa4\xf4\xa5\xef\x99\xbb\xf6\x6f\xb8\xb8\xe4\x29\x3e\x60\x65\x16\xbf\xfc\x69\x19\x11\xfc\x16\x16\xbc\x73\x2e\xfc\x06\xf7\x57\xe7\xe6\xb5\xd8\xe6\xec\x5c\xf0\x2c\x5f\x43\xce\x15\xca\x2c\x61\x48\x12\x68\x4e\xd7\x62\x28\x63\xd8\xa2\x88\x20\x7c\x37\x5c\x9d\x01\x4a\x29\x64\x44\xac\xe6\xf3\x91\x82\x96\x0a\x25\xe4\x15\x24\x1c\x72\x45\xae\x27\x24\x64\x42\x8e\x9e\xab\x62\x58\x2a\xd8\x24\xe6\xc9\x14\xb9\xca\x59\x52\x38\xf8\x94\x20\xf2\x2d\x14\xa2\x3b\x03\x7c\x60\xb8\x55\xa0\x36\x09\xfd\x43\x30\x36\x29\xb5\xe9\x41\xa2\xda\x49\x5e\x41\x32\x62\x16\x4f\x1b\xd3\x60\x75\x35\xf2\x19\x1f\x54\xc8\xd4\x03\x58\xbf\x8e\xcf\xcd\xe7\x51\x45\x78\xe7\x85\xa8\x30\x8c\x26\x95\xdf\x31\xea\x3c\x87\x14\xe3\x1a\x9b\x96\x7d\x8f\x19\x0b\x1d\xb0\x9c\x55\x37\x01\x6c\x05\x25\x0d\x70\xba\x31\x86\xa6\x69\x4b\xb9\xd4\x26\xc8\x05\x3f\x17\xe5\xb6\x40\x85\x74\x36\xf3\xe6\x26\x30\x7b\x37\x9d\x81\x90\x64\x08\x2d\xd1\x8c\x18\xe5\x19\x08\x8e\x20\x18\xdb\x49\x4c\x63\xb8\x42\xec\x03\x8e\x35\x14\x32\x6d\x29\x24\x42\xce\x33\x21\x4b\x4d\x36\xf6\xb3\x1d\x67\x10\xe6\x0a\xde\x4d\xaa\x22\x82\x97\xe8\x19\xf6\xbe\xef\xe5\x19\xfc\x90\xab\x38\x6f\x00\x10\x11\x5a\xf1\x3c\x2d\x98\x59\xf8\x45\xca\x30\x82\x1f\x3e\x00\xcf\x0b\xbd\xe6\x19\x8d\xd1\xf5\xac\xff\x94\xef\x79\xb5\xdf\x5f\x3f\xa4\x3a\x9f\x9e\xf4\xbd\x14\x6f\x8d\xd7\x2d\x3e\x74\xa4\xf4\xb1\x89\x7c\xdf\x43\x8d\xd6\xae\x19\x8b\xc6\x47\x8e\x99\x39\x65\x5a\x2c\xda\xe6\x40\x76\x11\x65\xa5\x22\x44\x42\x66\x21\x05\xdc\x3b\x94\xaa\xb3\x05\x28\x31\xb2\xff\x02\x7e\xbc\x0b\x34\x92\x88\x50\xfb\x0d\x35\x9c\x11\x41\x72\xa5\x27\x2d\x64\x7d\xda\xb8\xab\x91\xb2\x73\xf3\xfd\x5e\x07\x4f\x0a\xb5\xf4\xdd\x86\xce\x2b\x94\x77\x39\x33\xd1\xb3\x39\x6f\xe3\x08\xd4\x1d\x03\x45\x77\x2b\x28\x93\xed\x17\x13\xd8\x9a\xf8\xd6\xe0\xfb\x8c\xf7\x53\x24\xc2\x48\xc7\xbc\x31\xe9\x7d\x2b\xe8\x4f\x53\xeb\xa4\x56\xc3\x73\x01\x65\x72\x83\xe1\x88\x73\x34\x23\x75\x69\xf9\xfe\x66\xa5\x21\x2a\x64\x4e\x4d\x4e\x4b\xdc\x09\xdc\xe6\x0a\xa3\x4d\x46\xb0\xdc\x7d\x3d\xee\x11\x1c\xf2\x03\xe7\x60\x9d\xe2\xff\x18\x6b\xaa\xe4\x2c\x2c\x1e\x06\x0b\x63\xb1\x83\xde\x93\x73\x26\xa4\x44\x46\x5e\x43\x34\x7e\xac\xc8\x4d\x0c\x41\xeb\x2a\x65\xb5\x26\x79\x39\xde\x87\x94\xf7\x0d\x75\xa8\xeb\xc8\xf7\xac\x67\x97\xd5\x3a\xfe\x37\x2f\x13\x59\x6d\x92\x22\xc4\xf8\x32\x79\x2c\x44\x92\x3e\xcb\x8d\x77\xcd\x7e\xd8\x9a\xdd\x87\x5c\xf6\xa7\xa1\x3a\x88\xea\xf2\x62\x01\xdd\x1f\xc6\xcb\x8b\x99\xef\xb9\x49\xd1\x59\x2e\xab\x35\x2d\x76\xb9\x79\xa1\xb7\x74\xd7\xb4\xea\x66\xe8\x05\x60\xec\x5e\xd3\xba\x5d\x68\x19\xb6\x0b\x36\x41\x2f\x5a\x24\xe6\x9a\xfc\x68\x70\xd6\x9e\xf2\x8e\xa1\x9c\xd7\xa2\xf1\x8e\x91\x47\x44\xd0\xa5\xe8\x9e\x77\xac\x76\x59\x1b\x7f\xd0\xf5\x8d\xf8\x37\x6b\xad\x63\x46\x6a\x69\xee\x6b\x4d\xa5\x67\x87\x6e\xf1\xa0\xfe\x2f\x1b\x4b\xea\x3f\xc2\xf2\x76\x7a\xd7\xaa\x6b\x17\xa6\xce\xc1\x9b\x59\xa7\x39\x67\x26\x64\xe8\x00\x99\x01\x83\x0f\x23\x7d\x06\xfb\x7d\x7c\x29\x85\x12\xff\xd8\x15\x85\xd9\x1b\x18\x9d\xea\xc3\x37\x03\x71\x43\x86\x62\xb1\x09\x4a\x5f\x02\x87\x49\xf0\xa7\x26\x2b\x6e\x5c\x82\xfa\x39\x9d\x86\x8e\x71\x38\x59\xa6\x2b\x54\x23\xb1\x4c\x58\xb0\xd1\x90\x78\x1f\x40\x07\x1f\x2c\x9a\x36\x19\xd8\x5c\xa0\xb0\xdc\x16\x54\xd1\x06\xac\xc8\x91\xab\x00\x62\x30\x41\xb3\x5b\xa9\x0c\xa4\x6e\xc9\x4d\x26\x29\x66\x39\x77\xb6\xeb\x27\xce\x8e\xc4\x63\x9b\x6a\xec\x9d\xba\x3e\xd7\x1b\xfb\x75\xdd\xd5\x23\x67\x1f\x8b\xe2\x5a\x4c\x15\x1d\x33\x90\x58\x0a\x5b\x9a\x9b\xdd\x91\x39\x55\xa6\x4f\x18\x46\x7b\xef\x13\x29\xce\x09\x8d\xe6\xa0\x4e\x52\xce\xd3\x56\x99\x14\xd9\x87\x9b\xba\x1a\x72\x48\x53\xbb\xea\x01\x9a\xb4\x74\x22\xd9\x8f\xf7\x49\xfe\xfa\x60\xaf\x76\xab\x53\x69\x6e\x12\x9e\x16\x28\x81\x5c\x32\x1c\xad\x4e\x84\xb6\x84\xdd\xc4\xd4\xac\xb5\x26\xd0\x55\xc0\x90\x19\x15\x29\xa1\xd8\xaa\x0a\xde\x91\xd5\xe8\xf2\xf7\x2d\x55\x6b\x55\x04\xd3\x4f\x8f\x09\x69\x15\xbf\x84\xd0\x25\x89\x3f\x48\xe2\x93\xc2\x4f\xc7\xee\x23\x9d\xc4\x05\x16\xa7\x51\x76\x4c\xd5\x7a\x6a\x7b\x8c\xbc\xae\x44\x71\x7b\x70\xe7\x8c\x1c\x83\xbb\xe4\xe4\xe9\x7d\xb8\xbf\xef\x94\x73\xb3\xc3\xeb\x30\x75\x9a\x9f\xe1\x51\xec\x4a\xbe\x74\xd5\xf5\xb9\x66\xd1\xf7\xd8\x26\xe1\x1c\x8b\xb6\x8b\xb6\x7d\xd0\xb1\xd8\xd5\xaf\x10\x07\xec\xc2\x74\xe5\xd0\x9f\x41\x9f\xfe\x0c\x4e\xa0\x1f\x75\xa5\xab\x15\xc1\x29\x2d\xbf\x0e\xd6\x28\x40\xa7\xab\x05\xa4\x2b\x4a\x39\x96\xdb\xa2\x61\xab\xef\x69\xa2\x0b\xcb\xd9\xd6\x98\x5d\x90\x1e\x12\x8c\xe0\x85\xe1\x8a\x50\xa2\x94\x4c\x17\x69\x54\xe0\x12\x06\xdb\xd3\xc1\xdf\x23\xdf\xbb\xd7\xa5\x5d\xf5\xc8\x59\xfc\x47\x92\xab\x4f\x52\xec\xb6\xfb\xda\xf7\x98\x7a\x98\x01\x4b\x38\xc3\x42\x67\x24\xcb\xf0\x8f\x5c\x6d\xce\xf5\x5d\xdd\x66\x51\xf7\x33\x51\xfc\x7a\xf7\xeb\xf8\x63\x9a\x86\xc4\x60\x2d\xcc\x41\x37\x55\x68\x8a\x19\x4a\xb8\x5f\xc7\x17\x82\xa3\x6e\x8f\x5a\x63\xeb\xbc\x97\xae\xe2\x73\x73\x1d\xb2\xb8\xd1\x17\xb0\xa6\x6f\x1a\xe7\xdc\xa8\x25\x6a\x9f\x6e\x7b\x12\xdf\x6b\xaa\x53\xd2\x0a\xe9\xcf\x28\xaf\x51\x56\xeb\x06\x91\x69\x15\x07\x15\x90\x57\x61\x81\xc6\x45\x35\x07\x2a\x42\x16\xf4\x9d\x25\x15\x82\xd6\xe9\xfb\x33\xfa\xd4\x37\x6b\xd3\x35\xd6\x61\x77\x02\xf4\xa0\xca\x91\x1e\x7c\x8f\xf4\x42\x5a\xd6\x4d\x26\xd3\x38\x89\x50\x64\x36\xb6\xd5\xf4\xfb\x33\xba\xeb\x7b\x46\xfd\xa1\xb6\x52\xb3\xaf\x6b\xdc\xa4\xf4\x6b\x98\x1e\x54\xb9\x7e\xd4\x4f\x93\x9d\x43\xbd\x7e\xc6\x22\x55\xf9\xdf\x6e\xce\x43\xd6\x6c\x7a\xe3\xb6\x9c\x6d\x1e\xf9\x84\xca\xd8\x35\x7f\xba\xe1\x68\x6b\x58\xec\x93\xfa\x0e\x1b\x73\x03\x70\x58\x92\x3e\xc3\xa2\xaf\x52\x2f\xfc\x85\x46\x6d\xf1\x5b\xbc\xff\xd3\xc6\x7d\x8b\xaa\xed\xaf\xb2\xad\x96\xe5\xff\x47\x96\xb2\xfa\x7f\xaf\x6a\xd6\x9d\xdb\x5b\x99\xda\x2a\xa0\x59\xb8\xda\xad\x8c\x79\x0d\xd8\xe9\xc2\xb2\x37\xe1\x72\x86\x17\x1d\x6e\x9d\x7a\x9f\x69\x75\xa4\xd4\x3a\x95\xce\xbd\x6d\xc2\x73\x76\xb2\x85\x03\xf8\x99\x48\x18\xc7\x30\x65\x86\x36\x75\xdf\x75\xac\x51\x8c\xb0\x68\xbd\xad\x8e\x4e\x35\xff\x2b\xf5\x31\x6f\x7a\x8e\xbd\x7e\x99\x3b\x9a\x0b\xeb\x41\xbb\x42\xb9\x00\x68\xf7\x7e\xc6\xfb\xbe\x28\x51\xaf\xe6\x8d\x0f\x57\xbd\xa7\x6a\xea\x85\x8d\xda\xf7\xa8\xa9\xbe\x28\xdf\xac\xa9\xb7\xea\x44\x75\xaf\x36\x8a\xe8\x13\x6a\xea\x8f\x2a\x5f\x14\x7d\x47\x3f\xb1\x2a\xd1\x9d\xd7\x51\xf4\xed\xa3\xb2\x36\xbd\x6c\x42\xd0\x8b\xd2\xc0\x76\xb7\x1a\xb1\xc1\x8e\xfe\xf7\x97\x79\x9e\x95\x75\x5e\x3c\x52\x70\x7a\x5e\xad\xe4\x0b\xd3\x06\x1e\x3d\x2e\x26\xc7\x0f\x67\x7a\x67\x13\xd3\x88\x93\xb0\xbf\xfa\xc4\x42\x4f\xc9\xbf\x3a\x1e\x6d\x0e\x50\x8f\x80\x8d\xef\xdf\xec\x42\x12\xab\x5d\xe1\x9e\x1e\x5b\xd5\x0d\xa0\x59\x76\xf1\xf2\xe2\x59\x1c\xd7\xa8\x40\x62\xb5\x15\xbc\xc2\x43\x8e\xd2\x20\x30\xde\xd2\xbc\xf2\x70\x56\x0f\x67\xb6\xcd\xc8\xb5\x9d\xcb\x4e\x4c\x55\x7f\x35\xc9\xaf\xea\xcd\x55\xa7\x4d\xfb\xf4\xa0\x49\xe2\x2d\xe8\x52\xd5\x28\x1e\x7a\xa6\x83\x46\x41\x5d\x05\xdb\x56\x09\xbe\xf3\xde\x86\xf3\x8a\x86\xf1\x41\xf2\xa1\xe1\x0f\xfa\xff\xcc\x2b\x85\x7c\xfa\xa7\x66\x3b\x38\x9b\xf8\xf5\xbe\x85\x6f\x49\x76\x03\xac\x4d\xa3\x86\x09\xd5\x74\xe3\xad\xc9\xf9\x56\x3b\xe0\x4a\x05\x37\x2f\x7c\xe8\xf1\x8c\xa1\xad\xa7\x30\x66\x30\x05\xd3\xbf\x6e\x1e\x98\x79\x19\x84\xc3\x99\xd7\x31\x98\xed\x28\xe4\x52\x62\x96\x3f\x4c\xcc\xc5\xc6\xcc\x7b\x47\xd1\x2a\xa5\x3f\x12\x1b\xac\x92\xeb\x36\x20\x16\x2d\x9c\xa9\x01\x99\x41\x31\xeb\x0d\xd1\x48\x43\x0b\x67\x84\xd5\xe8\x28\x7a\x6a\x9a\x56\x99\x70\xd2\xc7\x12\xc1\x93\x5e\xf0\xe6\x93\x33\x5b\x44\xb4\x33\x9e\xe9\x09\x6d\x37\x49\x03\x38\x3e\x4a\xf3\xbc\xfe\x30\xad\x72\x4b\x1b\xfb\x8e\x55\x7c\x2d\xf3\xf2\x6a\x97\x65\xf9\x43\x58\x75\xd5\x4e\x10\x07\x11\xfc\x0c\x41\xdc\x1a\x3a\x98\x41\xe5\xc4\xf4\x26\x1a\x3e\x39\x74\xd3\x20\x06\xed\xde\xdb\x75\x03\xd5\x38\x13\xf7\xe3\xf6\x8b\xbb\x81\x1e\x99\xe3\xdd\x80\x09\xb8\x33\xfd\x36\x9d\x01\xd5\xf8\x76\x3c\x88\x7a\x5d\x8b\xa0\x31\x35\x5b\xdd\xdf\x09\xfb\xd1\x9d\x48\x76\xac\x52\xbc\xfd\x57\xcb\x6d\xa8\x81\x51\x12\x69\x2a\xb0\x86\xcb\xa9\x9a\x68\x51\x89\x0c\x9a\x60\xda\xa7\x3c\xa8\xc6\xa6\x75\xd3\x49\xf2\x53\x0f\xb7\x15\xa9\x3e\x30\x74\xed\x6e\x31\xf5\x60\xdf\xda\x31\x30\x4d\xed\xe5\xe6\xbb\xd6\x59\x7b\xc9\xce\x32\x9f\xcf\x61\x99\x01\x17\xfa\x95\xa5\xbc\x02\x89\x2c\xc7\xbb\x9c\xaf\x41\x6d\x90\xeb\xf7\xa4\xc4\x4e\xd9\x7e\x5a\xbf\xf9\x94\x14\x12\x93\xf4\x51\xbf\x80\x66\xa0\x63\x3a\x9c\x03\x4f\xce\x7e\xdd\xe1\xb0\x33\x07\x76\xf2\xd2\x70\x0a\xfe\xc4\x18\xb8\xe3\xa8\xf9\xbd\x3f\xab\x62\x1d\xfe\x7a\xb9\xdf\x6f\xc1\x74\x23\x63\xe7\x09\x3b\x35\x79\x2a\x0c\x3a\xef\xf4\x18\x20\x86\x95\x4e\x7d\x6e\x75\xe0\xff\x27\x00\x00\xff\xff\xc7\xa2\xf0\x56\x3e\x2a\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
