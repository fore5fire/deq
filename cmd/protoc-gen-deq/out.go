// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x6f\xdb\x46\x12\xff\x4c\xfe\x15\x53\xa2\x0d\xc4\x54\x5e\xe3" +
	"\x80\xc3\x7d\x10\xe2\x0f\x3d\xbb\xe7\x1a\xb8\xa6\x46\xed\xbb\x06\x08\x8a\x80\x26\x87\x12\x61\x89\x2b\xef\xae\xfc" +
	"\x80\xc0\xff\xfd\x30\xb3\xbb\x7c\x4b\x96\x93\x3a\xed\x19\x48\x2c\xed\x72\xe7\xf9\xdb\x79\x99\xc7\xc7\xc7\xe1\xf1" +
	"\x31\xc0\x39\x96\xa8\x12\x83\x19\xa4\x32\x43\x01\x67\x12\x4a\x69\x60\x25\xb3\x22\x7f\x12\xfc\x88\x96\x1b\x95\xe2" +
	"\x0c\xb6\x5b\x10\x57\xfc\x19\xaa\x2a\x24\x02\xeb\x24\xbd\x4d\xe6\xc8\x3b\x97\xee\x73\x55\x85\x61\xb1\x5a\x4b\x65" +
	"\x60\x12\x06\x51\x2a\x4b\x83\x8f\x26\x0a\x83\x28\x5f\xd1\xaf\xed\x16\x8a\x1c\xc4\x4f\x89\xfe\x19\xcd\x42\x66\x1a" +
	"\x8e\xaa\x2a\x0c\x22\xfd\x54\xa6\xf4\x94\x36\xaa\x28\xe7\xda\x3e\x89\x65\x66\xb7\xb7\x5b\x3a\x74\xfd\xb4\x46\x5d" +
	"\x55\x91\x29\x56\x18\x6d\xb7\x58\x66\xc4\x2d\x88\xe6\x85\x59\x26\x37\x22\x95\xab\xe3\xdb\xc4\xa4\x0b\x3c\x95\x19" +
	"\x1e\x67\x78\xb7\x87\xdf\xce\x33\xf4\x4f\xae\xcd\x40\x80\x23\x50\x49\x39\x47\xf8\x76\x7d\x3b\x9f\xc2\xb7\xeb\xc4" +
	"\x2c\x60\x76\x02\xe2\x82\x95\xd5\x60\x9f\xa2\xdd\xaa\x82\x88\x3e\x25\x66\x51\x55\x91\x3d\x4b\x84\xaa\x2a\x8c\xc3" +
	"\xb0\xa1\x64\xf5\x61\x8b\x99\xa7\x35\x99\x51\x9c\xcb\xf7\xc9\x0a\xab\xea\xc7\x7b\x2c\x0d\x68\xa3\x36\xa9\x81\x6d" +
	"\x18\x5c\x9c\x41\x10\x04\x01\x00\x58\xfb\x84\xc1\xa9\xc2\xc4\xe0\x75\xb1\x42\x00\x20\x83\x08\xfa\x1c\x06\x67\x98" +
	"\x27\x9b\xa5\xb9\x32\x89\x41\xc8\xf0\x4e\xf0\xa7\x30\xb0\x0b\xee\xa7\xb5\x7e\x51\x66\xf8\x88\xda\xae\x7f\xfc\xdd" +
	"\x91\x0f\x83\x2b\x5c\x62\x6a\xa4\xf2\x47\x3c\x5f\xbf\xfe\x5f\x54\xba\x90\x25\x14\xa5\xf9\xc7\xdf\x43\x52\xb2\x16" +
	"\x1e\xde\xf2\x97\x5f\x31\xaf\xaa\xd0\x2b\xf7\xa9\xf5\xc0\xb5\x5c\x17\xe9\xa9\x2c\xf3\x62\x4e\xe7\x51\xe5\x49\x8a" +
	"\xa4\x26\xab\x7d\x2d\xfb\x86\x98\x90\xbc\xfc\x29\x86\xc9\xdb\xfe\xee\x14\x50\x29\xa9\x62\x62\x75\x7c\x3c\xb0\xe2" +
	"\x85\x41\x05\x85\x86\xa4\x84\xc2\x10\xd6\xa5\x82\x5c\xaa\xc1\x73\x5a\xc0\x85\x81\x45\x62\x9f\xcc\xb0\x34\x45\x9a" +
	"\x2c\x5b\xf2\x19\x49\xe4\x6b\x51\x88\xee\x14\xf0\x31\xc5\xb5\x01\xb3\x48\xe8\x3f\x04\xeb\xb8\x15\x43\x0d\x14\x9a" +
	"\x8d\x2a\x35\x24\x03\x66\x62\xdc\xe3\x56\xd6\xb6\x45\xde\xe3\xa3\x99\xa4\xe6\x11\xdc\x45\x12\xa7\xf6\xf7\x5e\x43" +
	"\x04\xa7\x4b\xa9\x71\x12\xd7\xc6\xff\xf0\xe1\xc3\xa7\x51\x5e\x2d\x84\xd1\x57\xe8\xaa\x17\x06\xce\x49\x3b\x9c\xe7" +
	"\x2c\x4e\x32\xd6\xba\x92\x11\x4a\x5a\x18\x4a\xc7\xb4\x95\xba\x60\x2f\x14\xb2\x3c\x95\xab\xf5\x12\x0d\xd2\x05\x2d" +
	"\xfc\x22\xa4\x6e\x35\x9b\x82\x54\xe4\x0b\x56\x6a\x4a\x8c\x8a\x1c\x64\x89\x20\xd3\x74\xa3\x30\x13\x70\x85\xd8\x15" +
	"\x58\xb0\x28\xe4\xdd\x95\x54\x08\x45\x99\x4b\xb5\x62\xb2\x22\xcc\x37\x65\x0a\x93\xc2\xc0\xdb\x5d\xd6\x88\xe1\x73" +
	"\xac\x0d\xdb\x30\x0c\x8a\x1c\xbe\x29\x8c\xa8\x65\x20\x22\xb4\x13\x04\xac\x9b\xdd\xf8\x51\xa9\x49\x0c\xdf\x9c\x40" +
	"\x59\x2c\x79\x2f\xb0\x46\xa3\xef\xd3\xee\x53\x61\x10\x54\x61\x77\x7f\x97\xf5\x42\x7a\x32\x0c\x32\xbc\xb3\xd8\x9b" +
	"\x9d\x34\xa4\xf8\xf2\xc4\x61\x18\x20\x4b\xeb\xf6\xac\xf3\xc4\x9e\xcb\x66\xef\x1a\xab\x45\xc7\x5a\x22\xb7\x25\xca" +
	"\x57\x86\x24\x92\x2a\x9f\x50\x9c\xbf\x47\x65\x1a\x77\x80\x91\x03\x08\xcc\xe0\xbb\xfb\x88\x25\x89\x49\xea\xd0\x53" +
	"\xc3\x29\x11\x24\x34\x1d\xe2\x24\x07\x6e\x12\xc7\x2b\xda\xe0\xbd\x15\xb3\xe9\xb3\x0b\xb4\x57\xa8\xee\x8b\xd4\xc6" +
	"\x5a\x7f\xf1\x86\xa1\xa8\xb9\x0c\x86\x56\x35\xac\x92\xf5\x47\x1b\xf7\x7c\x5c\xf4\x22\xbe\xc7\x87\x31\x12\x93\x98" +
	"\x63\xdf\x90\xf4\xb6\xd6\xf5\xcd\xd8\x3e\x59\xd6\xf2\x9c\xc1\x2a\xb9\xc5\xc9\x80\x73\x3c\x25\x8b\xb1\x7e\xdf\x3a" +
	"\x6d\x88\x0a\x67\x20\xfe\x40\x1a\x37\x0a\xd7\x99\xc5\x1a\x34\x25\xb1\xda\xe7\x3a\xdc\x63\xd8\x05\x85\xd6\xf5\xaa" +
	"\xaf\x00\x7f\xe3\xd8\x3e\x7a\x0d\x50\x30\x65\xc2\x4c\x2a\xfa\x61\xc3\x7a\x6d\x27\x88\x8a\x32\x95\x4a\x61\x4a\xe0" +
	"\x21\x1a\xdf\x69\x42\x8b\x25\xe8\x10\xb3\xd2\x73\xd2\xb9\xc4\x87\x09\x55\x1d\x9c\x65\xa0\xaa\xe2\x30\x70\xf8\x5e" +
	"\xe9\xb9\xf8\x4f\xb9\x4a\x94\x5e\x24\xcb\x09\x8a\xcb\xe4\x69\x29\x93\xec\x45\x60\xde\xf8\xf3\xb0\xb6\xa7\x77\x01" +
	"\xf7\xcd\x98\x45\x88\xf2\xc5\xd9\x0c\x9a\x1f\x14\x17\x67\xd3\x30\x68\xe7\xc8\x19\x90\xa4\xb4\xd8\x24\xf2\x19\x3f" +
	"\xda\x7c\xa7\xdd\x76\x3a\x9f\x01\x8a\xf6\x77\xda\x77\x1b\x35\xa3\x7a\xc3\xe5\xf5\x59\x2d\x81\xfd\x4e\x5b\x74\xcc" +
	"\x65\xf1\xf6\x49\xb7\x34\x6d\x6d\xbb\x24\x3f\x6b\x6d\xbb\x25\x82\x63\xef\xd6\x3e\x07\xb2\x3e\xba\xae\xa5\x07\xd9" +
	"\x28\xb0\x62\x68\xd2\x7e\x07\x64\x37\x9b\xbc\x8e\x66\xd8\x86\x98\xf8\xd9\x79\x7d\x9f\xb3\x6b\x9a\xdb\x8a\xa9\x74" +
	"\xfc\xd9\x6c\xee\xf4\xe1\xa5\x47\x04\xff\x90\x2c\xaf\xe7\x43\x36\x5f\xbd\x31\x76\x9d\xf6\x7a\xfa\xcf\xf7\xb3\xbf" +
	"\xf4\x36\x86\x71\xc4\xce\x21\x85\x93\x81\x57\xa2\xed\x56\x5c\x2a\x69\xe4\xbf\x36\xcb\xa5\x3d\x1b\x59\xcf\x70\x24" +
	"\x98\x82\xbc\x25\x77\xa7\xc2\x46\xc9\x8f\x63\xcf\xff\xce\xd4\xe5\x6d\x9b\x2e\x3f\xce\x19\x72\x1f\xa3\x83\x55\xbb" +
	"\x42\x33\xd0\xce\x86\x2a\x17\xa5\x89\xf7\x7e\x21\xe1\xc4\x09\x55\xe7\x2a\x97\xaa\x0c\xae\xd6\x4b\xaa\xd1\xa3\x74" +
	"\x59\x60\x69\x22\x10\x60\x63\x7a\xb3\xa3\xad\x64\xcd\x56\x3b\xd7\x65\x98\x17\x65\xeb\x38\x3f\x71\xb4\x27\x5d\xb8" +
	"\x4c\xe8\x56\xaa\xea\x94\x0f\x76\xeb\xcf\xab\xa7\x32\xfd\x61\xb9\xbc\x96\x63\x65\x11\x15\x25\xda\xe6\x7c\x7b\x36" +
	"\xb6\xf7\xb4\xdd\x2e\x35\xa9\x28\x38\x27\xeb\x81\x33\x1f\xf8\x1c\x33\x4a\xb7\xc8\x9c\x45\xa7\x20\xd7\x54\xed\x68" +
	"\x10\x42\xd8\xce\x4c\x9c\xa3\xf9\x85\x17\x6d\x4e\x82\x56\xec\x80\x41\x29\xfc\x4f\x6a\xee\x46\x39\xeb\x5d\xac\x75" +
	"\xdd\x07\x8d\x71\xf7\x04\x6b\x11\x5a\xb9\xfa\x59\x69\xae\x36\x37\x87\x9a\x60\x91\x94\xd9\x12\x15\x10\x32\x27\x83" +
	"\xdd\x1d\x21\xd3\x85\x49\xe7\x05\xae\x52\xfa\xdc\xa8\x60\x9a\xc8\xb5\xd1\xf0\x96\x1c\x47\x5f\xad\x2a\x3a\x86\x71" +
	"\xf1\x6d\x2b\xd0\x27\xc6\x61\xe6\x73\x89\x5d\x1e\x6e\x87\xdd\xe9\x61\x6f\x3d\x62\xa1\x3b\xe2\xf5\x97\x43\xb9\x3d" +
	"\x05\xf0\xa8\xf6\xc3\x04\xb7\xea\xaf\xd0\x3e\x15\x2e\x4a\xba\x0a\x3b\x35\xf9\x65\x63\xc6\xf7\x1b\x8d\x5a\xa2\xb4" +
	"\xda\xea\xfe\xfd\x6d\xca\xd8\xec\xa6\x69\xf7\xed\x66\x18\xa4\x8b\xa4\x2c\x71\x59\xf7\xf3\xa9\x2d\x50\xf7\xc5\xbd" +
	"\x6e\xd5\xdb\x63\x37\xc9\x6e\x5a\xf4\xa7\xd0\xa5\x3f\x85\x03\xe8\xc7\x4d\x39\xee\x54\x70\x89\xc2\x91\x3a\x39\x81" +
	"\x28\xe2\xa8\xbe\x4e\xca\x22\x9d\x44\x7e\xa3\xd0\xa0\xf0\x6e\x53\x28\xcc\xa2\xd8\xf5\x41\xbe\x32\xfb\xd4\xa3\x49" +
	"\xc7\xb3\x9b\x19\x64\x37\x94\xf8\x1c\x85\x99\xe7\xc1\x6b\x2c\xcc\xcc\x49\xec\xea\xed\x26\x31\xf4\x09\xc6\xf0\x4c" +
	"\x6c\x54\xb8\x92\x6e\x06\xd3\x81\x14\x69\x82\x4a\xa5\x5c\xad\x52\xb1\x4f\x32\xb8\x2e\x17\xfe\x16\x87\xc1\x03\x97" +
	"\xb8\xfa\xa9\x4c\xc5\x6f\x49\x61\xce\x95\xdc\xac\xb7\x55\x18\xa4\xe6\x71\x0a\x69\x52\xa6\xb8\xe4\x64\xe8\x18\xfe" +
	"\x56\x98\xc5\x29\xaf\x72\xd7\x49\x46\x18\x69\x04\x82\x87\xb9\xf8\x21\xcb\x26\xc4\x60\x2e\x6d\x54\xb1\xd5\x78\x86" +
	"\x39\x2a\x78\x98\x8b\x33\x59\x22\xb7\x9e\x2c\xdd\xbb\x23\x48\xc5\xde\x3b\xe4\x55\x24\xd3\x4f\x1a\x78\xf2\x4c\xae" +
	"\xc5\x02\xc2\x80\x98\x93\x2a\x4c\x3d\xe5\x66\x8d\x78\xb8\x83\x61\x70\x9f\x28\xc8\x0b\xa5\xcd\x8f\x4a\xf9\x7b\x47" +
	"\x5d\xbc\xab\xf2\xac\x2e\x2c\x15\x09\x6c\x4d\xc0\xb4\xba\x65\xde\x9b\x37\x0d\x95\x56\x8d\x11\x34\x8b\xb6\xe2\x23" +
	"\xa4\xb4\xaa\x3e\xbf\x1d\x56\x30\x3e\x9e\x6b\x63\xa0\x9b\x4f\xbb\x60\x78\x41\xb4\xd9\x03\x8e\xe6\x8e\x72\xc5\x93" +
	"\xdd\x88\x53\xfb\x7d\x92\x0a\x0f\x57\x48\x85\x85\xe9\x48\x4d\x18\x87\xce\xa5\xee\xe1\xba\x3b\xee\x94\xb9\x24\x6f" +
	"\xd7\x8d\xf5\xdd\x8d\xd9\x10\x87\x28\xfd\x27\x64\x74\xf2\xe8\x2b\x5a\xc8\x0f\x3f\xea\x0e\xc3\x3f\x72\x8e\xc6\x1a" +
	"\xab\xc8\x6a\x0d\x84\x10\xcf\xf6\x95\x75\x8b\x81\x5d\xb2\x5e\xba\xaf\x34\x85\xe9\xe5\x94\x9d\x93\x18\x2b\x64\xbf" +
	"\xde\xdf\x03\x81\xbf\x52\x7d\xf5\x95\xb0\xa1\x07\xe0\xf0\x32\x7b\x84\xe8\x2f\x80\x88\xae\xf3\x42\x57\xf1\xb1\xc2" +
	"\x60\x89\x65\x0d\x14\x4d\xa2\x53\xd0\x4c\xa8\xe0\xa8\xa3\x66\xbd\xcd\x6c\x5f\x08\x42\x1c\xc6\xd8\xc1\xdc\xf2\xcb" +
	"\xf1\xc7\xa3\x4e\xab\xfb\xc7\x84\x1a\x24\xfe\x0c\x43\x60\xea\x17\x21\xf3\x6b\xd6\xda\xdc\xf7\xbd\x72\xd4\xf6\x1b" +
	"\x57\x9b\x1b\x8b\x33\x2b\xed\x78\xc1\xd9\x99\xdb\x8d\xcd\x51\x82\xcf\x03\xc3\x18\x1a\xea\xb2\xec\x70\xef\x47\xf0" +
	"\x3d\x91\xb1\xc0\x61\xe5\x03\xf6\x76\x17\x5a\xce\x2d\x56\x5b\x74\xd1\xb0\x8a\x0f\x05\xc0\x1f\xd8\xfe\xbc\x6a\x64" +
	"\x09\xc6\xe6\x89\x97\xb7\xf3\xaa\xda\x35\x04\xe7\xf1\x94\x41\x1e\xeb\x78\x6a\xef\xf1\xa1\xab\x20\x0f\x87\x4e\x7d" +
	"\x51\x2b\x76\x97\xb5\x87\xda\xef\x0b\x3a\xbe\xff\x0f\xfb\x75\x15\xfc\x62\xfb\x71\x93\xdb\xbb\x44\x7f\x64\x8b\xcb" +
	"\x2d\xde\xa0\x5e\x19\x31\x60\x77\xdc\xfa\x59\x15\xc5\x98\x1c\x74\xbd\xeb\xbb\x3e\xa8\x28\xba\x92\x39\x8f\x5f\xfa" +
	"\xd8\x75\x70\x79\xd3\x24\xc7\x86\xd0\x5f\xb3\x74\xaa\x93\x53\x77\x2e\x77\x34\x32\x32\x38\x08\x3e\x5f\x69\xac\xc0" +
	"\x1d\xc7\xa7\x16\x7e\x2c\x6c\x2d\xd9\x16\x6c\xa7\xf0\x32\xe4\xac\x37\x37\x23\xa6\xd2\x9b\x65\x1b\xab\x5c\x38\x7a" +
	"\x19\xbb\xcc\xc4\xc5\x19\xc3\x84\x6a\xc2\x1f\x1e\xb8\x79\x7c\x11\xff\x39\x1a\x50\xa8\xd7\xb2\xd4\xb8\xcb\x67\x5e" +
	"\x1e\xeb\x38\xff\x9e\xc6\x51\xd5\x9f\xcd\xfa\xd1\x6a\x3d\x7f\x1d\x99\x9e\xfe\x64\x93\x95\xee\xcc\x4f\xc7\xdd\xff" +
	"\xfc\xc4\x48\xe1\x1d\x70\xb1\x3b\xf0\x2e\x74\xdc\x0b\x23\xfe\x1d\x4c\x1d\x5b\xef\x9f\xb4\x5e\x35\xb1\x37\x86\xa0" +
	"\xd7\x7f\xe7\xe0\xdf\x85\x36\x58\x8e\xff\x1d\xdc\x35\xe7\xfd\x17\x0c\xda\x63\x28\x47\xb2\x19\x43\x2d\xbc\x65\x46" +
	"\xac\xd5\x0c\xa9\x46\xa7\x54\xf5\x98\x2a\x93\xa5\x7d\x7b\x85\x87\x25\x96\x36\xcf\x44\xec\x78\x09\xc6\xff\xee\xba" +
	"\x63\x72\x65\x25\xec\x4f\xae\xf6\x89\x59\xf7\xc6\x97\x0a\xf3\xe2\x71\x64\xba\x35\x64\xde\xb9\xc1\xce\x28\xdb\xce" +
	"\x80\xaa\xb7\x4b\x68\xf6\x42\xcc\x6a\x71\xc6\xc6\x55\x56\x8a\x69\x67\xa4\x45\x16\x9a\xb5\x06\x4a\xde\x46\xf1\x73" +
	"\xb3\x2d\x6d\xa3\x50\x57\x96\x18\x9e\x45\xc1\xab\xcf\xb1\x5c\xb6\xaf\xa7\x3d\xe3\xd3\xd7\x66\xae\x05\xf0\xdc\x60" +
	"\xab\x31\x25\x4b\xd6\xae\x41\xdc\x7b\x67\xe2\x5a\x15\xab\xab\x4d\x9e\x17\x8f\x13\xdd\x94\x25\x91\x88\x62\xf8\x1e" +
	"\x22\x51\x3b\x3a\x9a\x82\x6e\xa5\x5a\x1f\x2e\x9b\x5a\x65\x57\xb1\x12\xd8\x01\x5b\xbb\x7d\x7c\xa5\x8a\x5e\x0f\x13" +
	"\x65\x37\xaa\x7f\x76\x45\xdf\x21\xb3\xbf\x9a\xb7\x01\x78\xca\xaf\x17\x5a\xa1\x3c\xb0\x45\x2f\x0a\x36\x25\x3e\xcb" +
	"\xe4\x8f\x76\x26\x79\x9d\x68\x4f\x24\x1b\x56\x19\xde\xfd\x5a\x73\xeb\x5b\x60\x90\x64\x7c\x35\xe4\xb9\x1c\x6a\x89" +
	"\x5a\x2a\x99\x83\x8f\xa4\x5d\xca\xbd\xaa\x68\xdc\x36\x8d\x26\x6f\x3a\x72\x3b\x95\xaa\x1d\x7d\x77\xb3\x94\x9a\x47" +
	"\xf7\x3e\x91\x15\xd3\x96\x46\xed\xfc\x57\x23\xb5\xdb\x6b\x5b\xe6\xc7\xc7\x70\x91\x43\x29\xf9\x7d\x2a\x1e\xa3\xa7" +
	"\x05\xde\x17\xe5\x1c\xcc\x02\x4b\x7e\x89\x4b\x6e\x8c\xeb\x88\xf9\xb5\xac\x64\xa9\x30\xc9\x9e\xf8\x05\x39\x2b\x3a" +
	"\x66\x44\x49\xf3\xdf\x8b\xad\x14\x69\xa2\xdd\x98\xf6\xdd\x11\xfd\x9e\x59\xbf\xf0\x5f\xbb\x67\x9e\x77\x65\x87\xbe" +
	"\xad\xa4\xd4\x1f\x48\x3f\x33\x2c\x6e\x38\x32\xbf\x77\x47\x5a\x70\xec\xeb\xd4\x02\x61\x2d\x0c\xe1\xe0\xdd\x11\x51" +
	"\x68\x3d\xe1\xaa\xca\xe7\x62\x60\xeb\x55\x23\x2b\x88\x65\x15\x87\xae\xb2\xab\xcb\xbc\xff\x05\x00\x00\xff\xff\x82" +
	"\x63\x72\x61\x4f\x2b\x00\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11087,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594355002, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
