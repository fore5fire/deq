package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x46\x12\x7f\x26\xff\x8a\xa9\x90\x06\x62\x2a\xd3\xb8\x57\x21\x7e\xc8\xd9\xbd\xd4\xc0\x35\x35\x6a\x1f\x1a\x20\x28\x02\x9a\x1c\x4a\x84\xa9\x5d\x65\x77\x15\xdb\x10\xf8\xbf\x1f\x66\x76\x49\x2e\x3f\x24\x7f\x24\x4a\xee\xd0\xe6\x21\xa6\xb8\xe4\xcc\x6f\x3e\x76\x66\x76\x86\xc7\xc7\xc7\xe1\xf1\x31\xc0\x5b\x14\xa8\x12\x83\x19\xa4\x32\xc3\x18\xce\x24\x08\x69\x60\x25\xb3\x22\xbf\x8f\xf9\x11\x2d\x37\x2a\xc5\x39\x6c\xb7\x10\x5f\xf2\x35\x54\x55\x48\x04\xd6\x49\x7a\x93\x2c\x90\x57\x2e\xdc\x75\x55\x85\x61\xb1\x5a\x4b\x65\x60\x1a\x06\x93\x54\x0a\x83\x77\x66\x12\x06\x93\x7c\x45\x7f\xb6\x5b\x28\x72\x88\x7f\x49\xf4\xaf\x68\x96\x32\xd3\x70\x54\x55\x61\x30\xd1\xf7\x22\xa5\xa7\xb4\x51\x85\x58\x68\xfb\x24\x8a\xcc\x2e\x6f\xb7\xf4\xd2\xd5\xfd\x1a\x75\x55\x4d\x4c\xb1\xc2\xc9\x76\x8b\x22\x23\x6e\xc1\x64\x51\x98\x32\xb9\x8e\x53\xb9\x3a\xbe\x49\x4c\xba\xc4\x53\x99\xe1\x71\x86\x9f\x98\xca\x11\xa8\x44\x2c\x10\x5e\xac\x6f\x16\x33\x78\xb1\x4e\xcc\x12\xe6\x27\x10\x9f\x33\x4a\x0d\x96\x3e\xad\x56\x15\x4c\xe8\x2a\x31\xcb\xaa\x72\xef\x12\x84\xaa\x0a\xa3\x30\x6c\x29\x59\x20\x2c\xaa\xb9\x5f\x93\xfc\xf1\x5b\xf9\x2e\x59\x61\x55\xfd\xfc\x19\x85\x01\x6d\xd4\x26\x35\xb0\x0d\x83\xf3\x33\x08\x82\x20\x00\x00\x2b\x58\x18\x9c\x2a\x4c\x0c\x5e\x15\x2b\x04\x00\x92\x24\xa6\xeb\x30\x38\xc3\x3c\xd9\x94\xe6\xd2\x24\x06\x21\xc3\x4f\x31\x5f\x85\x81\xbd\xe1\xfe\x79\xf7\xcf\x45\x86\x77\xa8\xed\xfd\x0f\x7f\x3a\xf2\x04\xba\x01\x03\xaf\xf8\xc7\xef\x98\x57\x55\x58\x83\xfd\xe8\x3d\x70\x25\xd7\x45\x7a\x2a\x45\x5e\x2c\xa0\x10\x06\x55\x9e\xa4\x48\xb0\x59\x8c\x2b\xd9\x17\x6c\x4a\xfc\xf9\x2a\x82\xe9\xab\xfe\xea\x0c\x50\x29\xa9\x22\x62\x75\x7c\x3c\xd0\xca\xb9\x41\x05\x85\x86\x44\x40\x61\xc8\xe9\xa4\x82\x5c\xaa\xc1\x73\x3a\x86\x73\x03\xcb\xc4\x3e\x99\xa1\x30\x45\x9a\x94\x1e\x3e\x23\x89\x7c\x03\x85\xe8\xce\x00\xef\x52\x5c\x1b\x30\xcb\x84\xfe\x43\xb0\x86\x58\xb1\x8f\x81\x42\xb3\x51\x42\x43\x32\x60\x16\x8f\x5b\xd0\x62\xf5\x35\xf2\x0e\xef\xcc\x34\x35\x77\xe0\x3c\x3a\x3e\xb5\x7f\xf7\x2a\x22\x38\x2d\xa5\xc6\x69\xd4\x28\xff\xfd\xfb\xf7\x1f\x47\x79\x79\x1e\x43\x3f\xa1\x2b\x5e\x18\x38\x23\xed\x30\x9e\xd3\x38\x61\x6c\x64\x25\x25\x08\xba\x31\x44\xc7\xb4\x95\x3a\x67\x2b\x14\x52\x9c\xca\xd5\xba\x44\x83\xb4\x33\x8b\xfa\x26\xa4\xee\x6e\x36\x03\xa9\xc8\x16\x2c\xd4\x8c\x18\x15\x39\x48\x81\x20\xd3\x74\xa3\x30\x8b\xe1\x12\xb1\x0b\x38\x66\x28\x64\xdd\x95\x54\x08\x85\xc8\xa5\x5a\x31\xd9\x38\xcc\x37\x22\x85\x69\x61\xe0\xd5\x2e\x6d\x44\xf0\x1c\x6d\xc3\x36\x0c\x83\x22\x87\x1f\x0a\x13\x37\x18\x88\x08\xad\x04\x01\xcb\x66\x17\x7e\x56\x6a\x1a\xc1\x0f\x27\x20\x8a\x92\xd7\x02\xab\x34\xfa\x3d\xeb\x3e\x15\x06\x41\x15\x76\xd7\x77\x69\x2f\xa4\x27\xc3\x20\xc3\x4f\xd6\xf7\xe6\x27\x2d\x29\xde\x3c\x51\x18\x06\xc8\x68\xdd\x9a\x35\x5e\xbc\x67\xb3\xd9\xbd\xc6\x62\xd1\x6b\x1e\x64\x1f\x51\xbe\x32\x84\x48\xaa\x7c\x4a\x01\xf7\x33\x2a\xd3\x9a\x03\x8c\x1c\xb8\xc0\x1c\x7e\xfc\x3c\x61\x24\x11\xa1\x0e\x6b\x6a\x38\x23\x82\xe4\x4d\x8f\x31\x92\x73\x6e\x82\x53\x0b\xda\xfa\xbb\x17\xbd\xe9\xda\x05\xce\x4b\x54\x9f\x8b\xd4\xc6\xce\x7a\xe3\x0d\x43\x51\xbb\x19\x0c\xdd\xd5\xb0\x4a\xd6\x1f\x6c\x80\xab\xe3\x5c\x0d\xf1\x1d\xde\x8e\x91\x98\x46\x1c\xfb\x86\xa4\xb7\x8d\xac\x2f\xc7\xd6\x49\xb3\x96\xe7\x1c\x56\xc9\x0d\x4e\x07\x9c\xa3\x19\x69\x8c\xe5\x7b\xe1\xa4\x21\x2a\x9c\x51\xf8\x82\x24\x6e\x05\x6e\x32\x85\x55\x68\x4a\xb0\xfc\xf7\x3a\xdc\x23\xd8\xe5\x0a\xde\xf6\x6a\xb6\x00\xff\xe2\xd8\x3e\xba\x0d\x30\x66\xca\xe4\x33\x69\xdc\x0f\x1b\xd6\x6a\x3b\x9d\xa8\x10\xa9\x54\x0a\x53\x72\x1e\xa2\xf1\xa3\x26\x6f\xb1\x04\x9d\xc7\xac\xf4\x82\x64\x16\x78\x3b\xa5\xf4\xcf\x59\x06\xaa\x2a\x0a\x03\xe7\xdf\x2b\xbd\x88\xff\x23\x56\x89\xd2\xcb\xa4\x9c\x62\x7c\x91\xdc\x97\x32\xc9\x9e\xe4\xcc\x9b\xfa\x7d\x58\xdb\xb7\x77\x39\xee\xcb\x31\x8d\x10\xe5\xf3\xb3\x39\xb4\xff\x30\x3e\x3f\x9b\x85\x81\x9f\x23\xe7\x40\x48\xe9\x66\x9b\x98\xe7\xfc\x68\xfb\x9b\x56\xfd\xf4\x3c\x07\x8c\xfd\xdf\xb4\xee\x16\x1a\x46\xcd\x82\xcb\xd3\xf3\x06\x81\xfd\x4d\x6e\xd4\xdb\x6d\x0f\x39\x47\xdf\x2b\xae\x64\xed\x1c\xa3\x0e\x11\x41\x9b\xae\x3b\xce\x71\xbd\xc9\x9b\x28\x84\xbe\x6b\xc4\xbf\x3a\x6b\xed\x33\x52\x43\x73\x5b\x31\x95\x8e\x1d\xda\xc5\x9d\xba\xbf\xa8\x2d\xc9\xff\x08\xcb\xe1\x74\xcf\xea\x6b\x16\xc6\xb6\xc1\xc1\x2c\x54\x6f\x33\x1b\x35\x38\x46\xe6\x90\xc2\xc9\x40\x9f\x93\xed\x36\xbe\x50\xd2\xc8\x7f\x6d\xca\xd2\xbe\x3b\xb1\x3a\xe5\xbd\x37\x03\x79\x43\x86\x4a\x63\x1b\x97\x3e\x8c\x3d\xff\x27\x53\x97\x37\x3e\x5d\x7e\x9c\x73\xd2\x3e\x46\x8f\x16\xed\x12\xcd\x40\x3a\x1b\x1c\x5c\x5c\x24\xde\xfb\x41\xc2\x89\x03\xd5\x64\x07\x97\x1c\x0c\xae\xd6\x25\x55\xb9\x93\xb4\x2c\x50\x98\x09\xc4\x60\xa3\x68\xbb\xa2\x2d\xb2\x76\xc9\xcf\x2e\x19\xe6\x85\xf0\x5e\xe7\x27\x8e\xf6\x04\x68\x97\x7b\xdc\x9d\xaa\x3a\xe5\x17\xbb\x15\xdf\xe5\xbd\x48\xdf\x94\xe5\x95\x1c\x2b\x44\x66\xa0\x70\x25\x5d\xa5\x6e\xdf\x8e\xec\x1e\xf3\x8f\x1c\x6d\xf8\x0f\xde\x92\xfe\xc0\x29\x10\xea\xb8\x3e\x4a\xb9\xc8\x1a\x9d\x52\xa8\x07\x6f\x6b\xc3\xa0\xc2\xec\xd3\x65\xe7\xdd\x41\x97\x96\x9e\x40\xfa\x9f\x74\x96\x7a\x12\x6e\xdd\x1c\x44\x22\xf0\x53\xe7\xf3\x58\x3d\x24\x0a\x3e\x9b\xdd\x9b\xdb\xa4\x38\x8c\x39\x2e\x37\xd7\x8f\xa5\xbb\x4c\x44\x56\xa2\x02\xda\x7f\xd3\xc1\xea\x8e\x90\xee\xc2\xb8\xf3\x34\xae\x7e\xfa\xdc\xa8\x10\x9b\xca\xb5\xd1\xf0\x8a\x9c\x93\x7e\xfe\xb6\xa6\x42\x55\x47\x30\x0e\xdf\x1e\x31\xfa\xc4\x58\xfd\xcf\x25\x76\x41\x7a\xe8\x15\x31\xa3\x5a\xd8\x9d\xbc\xf6\x56\x39\x74\x5e\x2e\x1f\xc7\xc1\xb3\x5f\xb3\x41\xfd\xce\x42\xbd\x57\xeb\x7e\x84\xbb\x5b\x87\x86\x7d\xb0\xcf\x05\x6d\xf0\x9d\xe8\x7f\xdb\x98\xf1\xf5\x56\x0a\x0f\x8a\x77\x40\xef\xc7\xa5\xb6\x20\xce\xae\xdb\x46\x80\x5d\x0c\x83\x74\x99\x08\x81\x65\xd3\x61\x48\x6d\xa9\xbb\x2f\x9e\x77\xeb\xe7\x1e\xbb\x69\x76\xed\xd1\x9f\x41\x97\xfe\x0c\x1e\x41\x3f\x6a\x0b\x7b\x27\x82\x57\x78\x7f\xec\xad\x51\xd2\xca\xae\xe7\x90\x5d\x53\x36\x76\xdc\xe6\x35\x5b\xbe\xc7\x44\xe7\x8e\xb3\xab\xc0\xdb\xc4\xd5\x27\x18\xc1\x33\x63\x37\xa1\x44\xa5\x52\xae\x5f\xa9\xfc\x27\x0c\xee\xdc\x0b\xff\x88\xc2\xe0\x96\x8b\x5e\x7d\x2f\xd2\xf8\x8f\xa4\x30\x6f\x95\xdc\xac\xb7\x55\x18\xa4\xe6\x6e\x06\x69\x22\x52\x2c\x39\x59\x3b\x86\x7f\x14\x66\x79\xca\x77\xf9\x1c\x4a\xc7\xc3\x91\xa3\x41\x70\xbb\x88\xdf\x64\xd9\x94\x18\x2c\xa4\x8d\x07\xb6\x3e\xcf\x30\x47\x05\xb7\x8b\xf8\x4c\x0a\xe4\xf3\x63\x63\x6c\x2e\x09\xb2\xeb\xf8\xd4\xfe\x9e\xa6\x71\xad\x2f\x48\x63\xab\xa7\x91\x72\x27\x6a\x88\xba\xa7\x9b\x13\x5b\x18\xd4\x85\x3b\xf7\x98\xee\x45\x6a\x95\x57\x2b\xab\x71\x83\xc8\x9e\xa5\x7b\xc5\x61\xa0\xb1\x44\xeb\xa2\xcc\x81\xea\xb3\x39\x5d\xa7\x89\x46\x60\x9d\xbe\x3e\xa2\xbf\x7c\xb3\xb2\xc7\xea\x6a\xda\xee\x00\xee\xe4\x79\xd2\x43\x18\x90\x5e\x48\xcb\x7c\x0a\x4f\x19\x27\x11\x8a\xec\x8b\xcd\x41\xe3\xf5\x11\xdd\x0d\x03\xab\xfe\x29\x5b\xa9\x7e\xaf\x3d\xd9\x2a\x15\x56\x30\xde\xc4\xf3\xfd\xa8\x5b\x33\xb4\x0e\x75\x98\xf4\x4d\xea\x0a\xbf\xdc\xa4\xbb\x2c\x5a\x37\x10\x9a\x6a\xbf\x7e\xe4\x2d\x1a\x6b\xdb\xe2\xe1\xf3\x58\x53\xe2\x63\x97\x54\x8d\xe8\x1b\x75\x2f\x7a\x11\x74\x67\x07\xc3\x82\xec\x57\xed\x4f\xb0\xec\x57\x2b\xa0\xbe\xa3\x71\x1b\x19\x1c\xe6\xbf\xbc\x91\xbf\x59\x29\xfb\x8d\x8c\xae\x07\x56\xaf\x25\xac\xf7\xb5\x7e\xa2\xcd\x75\x93\xf3\xba\xc2\x8e\x15\x2f\x25\x8a\xc6\xf2\x9a\xe0\xe6\x52\x41\x42\x45\xd1\xfc\xc4\x45\xd7\x66\x99\xd9\x3e\xd1\xab\x70\x47\x8e\xf9\xba\x0e\xc5\x59\xc8\xca\xfe\x21\xa1\xc3\x29\x5f\xc3\xd0\xd3\xf4\x97\xbb\xda\xa1\x8e\x32\xdf\xdd\xdd\xfa\x91\x06\xff\xf6\xbb\xef\xe4\x77\x87\x3a\xd3\x7e\xaf\x34\xc6\xf2\xfc\x5d\xa5\xd4\x07\x9a\x6f\xd8\x57\xe0\x4e\xde\xa1\xec\xed\x34\x50\x2f\x5c\x6e\xae\xad\x8d\x2d\xda\xf1\xa3\x76\x67\xf6\x31\xd6\xd3\x0e\x9e\xb7\xd5\xc7\xf6\x7a\xb0\x4e\x44\x91\x3e\xc9\xc6\x13\xf8\x89\xc8\x58\xf7\xb0\x67\x2c\x36\x76\xd7\x81\x9c\x59\xac\xb4\xe8\x7c\xae\x8a\x1e\xeb\x00\x5f\xb1\xd5\x73\xd0\x1d\x1d\x8c\xcd\x64\x2e\x6e\x16\x55\xb5\x6b\x90\xc8\xa3\x02\x83\x6a\x0e\xd0\x50\x7b\x87\xb7\x5d\x01\xb9\x51\x7f\x5a\xb7\x01\xe2\xdd\x8d\x80\xc7\xea\xef\x0b\xba\x5b\xff\x1f\xfa\xeb\x0a\xf8\xc5\xfa\x3b\x74\x43\x8f\x9b\x5b\x83\x5c\x30\xa2\xc0\xee\xe8\xeb\x59\x71\x7b\x0c\x07\x6d\xef\x66\xaf\x0f\xe2\x76\x17\x99\xb3\xf8\x45\x1d\xbb\x9e\x95\x44\xd6\x9b\xeb\x01\x1b\x6c\xe9\xff\x6f\xe6\xad\x27\xe5\xac\x67\x77\x68\xbd\x66\x21\x2b\xfa\xcc\xf6\xcf\xf6\x6e\x28\x5b\x25\xf4\x27\x43\x47\x23\xcd\xdd\x47\x61\xff\x46\x0d\x60\x9e\xc7\x7e\xf4\xfc\xdd\x6e\x33\x4b\xd6\xd3\xd9\x0c\x9e\xe6\xe9\x63\xce\xa5\x50\x6f\x4a\x7f\x6f\xb9\x8a\xb1\x46\xd9\x65\x17\x9f\x9f\x3d\x89\xe3\x02\x0d\x28\xd4\x6b\x29\x34\xee\x72\x9f\x1a\x81\xf5\xa1\xfa\xeb\xba\xa3\xaa\x3f\x0f\xac\xc7\x79\xcd\xcc\x6f\x64\x62\xf7\x8b\x4d\xa7\xba\x33\xb3\x1b\x37\xf8\xc3\xdd\x7c\x85\x9f\x80\xcb\xe0\x81\x3d\xa1\x63\x50\x18\xb1\xe8\x60\x06\xe4\x7d\x35\xe8\x7d\x20\x68\x9d\x95\x9c\xad\xff\x65\xd9\xbf\x0b\x6d\x50\x8c\x7f\xed\xe4\x06\x16\xfd\xcf\xc8\xfc\x11\x81\x23\xd9\x8e\x08\x96\xb5\x66\x46\xb4\xd5\x0e\x10\x46\x27\x08\xcd\x08\x21\x93\xc2\x7e\x73\xc8\x0d\x70\x4b\x9b\xfb\xdc\xb6\xf5\x0f\xe3\x5f\xd7\xec\x98\x2a\x58\x84\xfd\xa9\xc2\x3e\x98\x4d\xb3\xf9\x42\x61\x5e\xdc\x8d\x4c\x1e\x86\xcc\x3b\x7b\xd6\x29\xa5\x3b\x74\xe8\xad\x92\x37\xd7\x20\xe6\x0d\x9c\xb1\x11\x84\x45\x31\xeb\x8c\x29\x48\x43\x73\x6f\x48\x50\xeb\x28\x7a\x68\x5e\xa1\x6d\xdc\xe9\x62\x89\xe0\x41\x2f\x38\xf8\x6c\xc2\xd5\x23\x4d\x17\x7d\x7c\x32\xd6\xce\x2a\x00\xf6\x0f\x2b\x82\xa0\x3b\xae\xd0\x7e\x95\xe4\x3e\xf3\x8d\xaf\x54\xb1\xba\xdc\xe4\x79\x71\x37\xd5\x6d\xe1\x34\x89\x27\x11\xfc\x04\x93\xb8\x31\xf4\x64\x06\xda\x0b\xfe\x75\x80\x7c\x70\xac\xc1\x20\x7a\x27\xcb\x03\x9d\x39\xf4\x30\x67\x77\xe3\xf8\xb3\xcf\x1c\x1d\x32\xfb\xcf\x1b\x36\x00\xcf\xf8\x6b\x6e\x0b\xaa\x76\xec\xb8\x17\x05\xdb\x43\x08\x63\xaa\x5f\xf5\xbf\x50\xe9\x46\x7b\x22\xd9\xb2\xca\xf0\xd3\xef\x0d\xb7\xbe\x06\x06\x49\xa5\xae\xd7\x6a\x2e\x8f\xd5\x44\x83\x4a\xe6\x50\x47\xd2\x2e\xe5\x5e\xdd\x36\xae\x9b\x56\x92\x97\x1d\xdc\x4e\xa4\x6a\x47\xdf\xa7\xbd\x95\x9a\x3b\xf7\xd5\xa8\x85\x69\xab\x34\x3f\xff\x35\x9e\xda\xed\xf5\x58\xe6\xc7\xc7\x70\x9e\x83\x90\xfc\xd5\x6c\xa1\x41\x61\x5a\xe0\xe7\x42\x2c\xc0\x2c\x51\xf0\xa7\xba\x72\x63\xdc\x99\x9d\x3f\xbe\x4d\x4a\x85\x49\x76\xcf\x9f\x41\x5b\xe8\x98\xf5\xc7\x6c\xa3\xa3\x35\x7f\xf6\xe6\x8d\xd9\xbc\xa4\xd4\x1f\x32\x3e\x30\x65\x6b\x39\x32\xbf\xd7\x47\x3a\xe6\xd8\xd7\xa9\x05\xc2\x06\x4c\x3b\x91\xf3\x9e\x70\xdd\x99\x87\x62\xa0\xf7\x41\xa9\x05\x62\x59\x71\xde\xf3\xab\x85\xf0\xbf\x01\x00\x00\xff\xff\x97\x59\x4a\x03\xbe\x30\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
