// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x6f\xdb\x46\x12\x7f\x26\xff\x8a\xa9\xd0\x06\x62\x2a\xaf\x71" +
	"\xc0\xe1\x1e\x84\xf8\x21\x67\xf7\x5c\x03\xd7\xd4\xa8\x7d\xd7\x00\x41\x11\xd0\xe4\x50\x22\x2c\x71\xe5\xdd\x55\x6c" +
	"\x43\xe0\xff\x7e\x98\xd9\x5d\x72\x49\x51\xb2\x9c\xc4\x69\xcf\x40\x62\x72\x3f\x66\xe7\xe3\xb7\xf3\x65\x1e\x1f\x1f" +
	"\xc7\xc7\xc7\x00\xe7\x58\xa1\x4a\x0d\xe6\x90\xc9\x1c\x05\x9c\x49\xa8\xa4\x81\xa5\xcc\xcb\xe2\x51\xf0\x12\x2d\xd7" +
	"\x2a\xc3\x29\x6c\x36\x20\xae\xf8\x19\xea\x3a\x26\x02\xab\x34\xbb\x4d\x67\xc8\x33\x97\xee\xb9\xae\xe3\xb8\x5c\xae" +
	"\xa4\x32\x30\x8e\xa3\x51\x26\x2b\x83\x0f\x66\x14\x47\xa3\x62\x49\xbf\x36\x1b\x28\x0b\x10\x3f\xa7\xfa\x17\x34\x73" +
	"\x99\x6b\x38\xaa\xeb\x38\x1a\xe9\xc7\x2a\xa3\x55\xda\xa8\xb2\x9a\x69\xbb\x12\xab\xdc\x4e\x6f\x36\xb4\xe9\xfa\x71" +
	"\x85\xba\xae\x47\xa6\x5c\xe2\x68\xb3\xc1\x2a\xa7\xd3\xa2\xd1\xac\x34\x8b\xf4\x46\x64\x72\x79\x7c\x9b\x9a\x6c\x8e" +
	"\xa7\x32\xc7\xe3\x1c\xef\xf6\x9c\xb7\x73\x0f\xfd\x93\x2b\xb3\xc5\xc0\x11\xa8\xb4\x9a\x21\x7c\xbf\xba\x9d\x4d\xe0" +
	"\xfb\x55\x6a\xe6\x30\x3d\x01\x71\xc1\xc2\x6a\xb0\xab\x68\xb6\xae\x61\x44\x4f\xa9\x99\xd7\xf5\xc8\xee\x25\x42\x75" +
	"\x1d\x27\x71\xdc\x52\xb2\xf2\xb0\xc6\xcc\xe3\x8a\xd4\x28\xce\xe5\xbb\x74\x89\x75\xfd\xd3\x27\xac\x0c\x68\xa3\xd6" +
	"\x99\x81\x4d\x1c\x5d\x9c\x41\x14\x45\x11\x00\x58\xfd\xc4\xd1\xa9\xc2\xd4\xe0\x75\xb9\x44\x00\x20\x85\x08\x7a\x8e" +
	"\xa3\x33\x2c\xd2\xf5\xc2\x5c\x99\xd4\x20\xe4\x78\x27\xf8\x29\x8e\xec\x80\xfb\x09\xc6\x2f\xaa\x1c\x1f\x50\xdb\xf1" +
	"\x0f\x7f\x38\xf2\x71\x74\x85\x0b\xcc\x8c\x54\x7e\x8b\x3f\xd7\x8f\xff\x17\x95\x2e\x65\x05\x65\x65\xfe\xf1\xf7\x98" +
	"\x84\x6c\x98\x87\xd7\xfc\xf2\x1b\x16\x75\x1d\x7b\xe1\x3e\x06\x0b\xae\xe5\xaa\xcc\x4e\x65\x55\x94\x33\xda\x8f\xaa" +
	"\x48\x33\x24\x31\x59\xec\x6b\xd9\x57\xc4\x98\xf8\xe5\xa7\x04\xc6\xaf\xfb\xb3\x13\x40\xa5\xa4\x4a\xe8\xa8\xe3\xe3" +
	"\x2d\x2d\x5e\x18\x54\x50\x6a\x48\x2b\x28\x0d\x61\x5d\x2a\x28\xa4\xda\x5a\xa7\x05\x5c\x18\x98\xa7\x76\x65\x8e\x95" +
	"\x29\xb3\x74\x11\xf0\x67\x24\x91\x6f\x58\x21\xba\x13\xc0\x87\x0c\x57\x06\xcc\x3c\xa5\xff\x10\xac\xe1\x96\x0c\x35" +
	"\x50\x68\xd6\xaa\xd2\x90\x6e\x1d\x26\x86\x2d\x6e\x79\x0d\x35\xf2\x0e\x1f\xcc\x38\x33\x0f\xe0\x2e\x92\x38\xb5\xbf" +
	"\xf7\x2a\x22\x3a\x5d\x48\x8d\xe3\xa4\x51\xfe\xfb\xf7\xef\x3f\x0e\x9e\x15\x20\x8c\x5e\xa1\x2b\x5e\x1c\x39\x23\xed" +
	"\x30\x9e\xd3\x38\xf1\xd8\xc8\x4a\x4a\xa8\x68\x60\x9b\x3b\xa6\xad\xd4\x05\x5b\xa1\x94\xd5\xa9\x5c\xae\x16\x68\x90" +
	"\x2e\x68\xe9\x07\x21\x73\xa3\xf9\x04\xa4\x22\x5b\xb0\x50\x13\x3a\xa8\x2c\x40\x56\x08\x32\xcb\xd6\x0a\x73\x01\x57" +
	"\x88\x5d\x86\x05\xb3\x42\xd6\x5d\x4a\x85\x50\x56\x85\x54\x4b\x26\x2b\xe2\x62\x5d\x65\x30\x2e\x0d\xbc\xde\xa5\x8d" +
	"\x04\x3e\x47\xdb\xb0\x89\xe3\xa8\x2c\xe0\xbb\xd2\x88\x86\x07\x22\x42\x33\x51\xc4\xb2\xd9\x89\x9f\x94\x1a\x27\xf0" +
	"\xdd\x09\x54\xe5\x82\xe7\x22\xab\x34\x7a\x9f\x74\x57\xc5\x51\x54\xc7\xdd\xf9\x5d\xda\x8b\x69\x65\x1c\xe5\x78\x67" +
	"\xb1\x37\x3d\x69\x49\xf1\xe5\x49\xe2\x38\x42\xe6\xd6\xcd\x59\xe3\x89\x3d\x97\xcd\xde\x35\x16\x8b\xb6\x05\x2c\x87" +
	"\x1c\x15\x4b\x43\x1c\x49\x55\x8c\xc9\xcf\x7f\x42\x65\x5a\x73\x80\x91\x5b\x10\x98\xc2\x0f\x9f\x46\xcc\x49\x42\x5c" +
	"\xc7\x9e\x1a\x4e\x88\x20\xa1\xe9\x10\x23\x39\x70\x13\x3b\x5e\xd0\x16\xef\x81\xcf\xa6\x67\xe7\x68\xaf\x50\x7d\x2a" +
	"\x33\xeb\x6b\xfd\xc5\xdb\x76\x45\xed\x65\x30\x34\xaa\x61\x99\xae\x3e\x58\xbf\xe7\xfd\xa2\x67\xf1\x1d\xde\x0f\x91" +
	"\x18\x27\xec\xfb\xb6\x49\x6f\x1a\x59\x5f\x0d\xcd\x93\x66\xed\x99\x53\x58\xa6\xb7\x38\xde\x3a\x39\x99\x90\xc6\x58" +
	"\xbe\xef\x9d\x34\x44\x85\x23\x10\x3f\x90\xc4\xad\xc0\x4d\x64\xb1\x0a\xcd\x88\xad\x70\x5f\xe7\xf4\x04\x76\x41\x21" +
	"\xb8\x5e\xcd\x15\xe0\x37\xf6\xed\x83\xd7\x00\x05\x53\x26\xcc\x64\xa2\xef\x36\xac\xd5\x76\x82\xa8\xac\x32\xa9\x14" +
	"\x66\x04\x1e\xa2\xf1\x83\x26\xb4\x58\x82\x0e\x31\x4b\x3d\x23\x99\x2b\xbc\x1f\x53\xd6\xc1\x51\x06\xea\x3a\x89\x23" +
	"\x87\xef\xa5\x9e\x89\xff\x54\xcb\x54\xe9\x79\xba\x18\xa3\xb8\x4c\x1f\x17\x32\xcd\x9f\x05\xe6\xb5\xdf\x0f\x2b\xbb" +
	"\x7b\x17\x70\x5f\x0d\x69\x84\x28\x5f\x9c\x4d\xa1\xfd\x41\x71\x71\x36\x89\xa3\x30\x46\x4e\x81\x38\xa5\xc1\x36\x90" +
	"\x4f\x79\x69\xfb\x4e\xb3\x61\x38\x9f\x02\x8a\xf0\x9d\xe6\xdd\x44\x73\x50\x33\xe1\xe2\xfa\xb4\xe1\xc0\xbe\xd3\x14" +
	"\x6d\x73\x51\x3c\xdc\xe9\x86\x26\xc1\xb4\x0b\xf2\xd3\x60\xda\x0d\x11\x1c\x7b\xb7\xf6\x29\x90\xf5\xd1\x75\x2d\x3d" +
	"\xc8\x06\x81\x95\x40\x1b\xf6\x3b\x20\xbb\x59\x17\x8d\x37\xc3\x10\x62\xe2\x17\x67\xf5\x7d\xc6\x6e\x68\x6e\x6a\xa6" +
	"\xd2\xb1\x67\x3b\xb9\xd3\x86\x97\x1e\x11\xfc\x43\xbc\xbc\x9c\x0d\x59\x7d\xcd\xc4\xd0\x75\xda\x6b\xe9\x3f\xdf\xce" +
	"\xfe\xd2\x5b\x1f\xc6\x1e\xbb\x80\x0c\x4e\xb6\xac\x32\xda\x6c\xc4\xa5\x92\x46\xfe\x6b\xbd\x58\xd8\xbd\x23\x6b\x19" +
	"\xf6\x04\x13\x90\xb7\x64\xee\x4c\x58\x2f\xf9\x61\x68\xfd\x1f\x4c\x5d\xde\x86\x74\x79\x39\x47\xc8\x7d\x07\x1d\x2c" +
	"\xda\x15\x9a\x2d\xe9\xac\xab\x72\x5e\x9a\xce\xde\xcf\x24\x9c\x38\xa6\x9a\x58\xe5\x42\x95\xc1\xe5\x6a\x41\x39\xfa" +
	"\x28\x5b\x94\x58\x99\x11\x08\xb0\x3e\xbd\x9d\xd1\x96\xb3\x76\x2a\x8c\x75\x39\x16\x65\x15\x6c\xe7\x15\x47\x7b\xc2" +
	"\x85\x8b\x84\x6e\xa4\xae\x4f\x79\x63\x37\xff\xbc\x7a\xac\xb2\xb7\x8b\xc5\xb5\x1c\x4a\x8b\x28\x29\xd1\x36\xe6\xdb" +
	"\xbd\x89\xbd\xa7\x61\xb9\xd4\x86\xa2\xe8\x9c\xb4\x07\x4e\x7d\xe0\x63\xcc\x20\xdd\x32\x77\x1a\x9d\x80\x5c\x51\xb6" +
	"\xa3\x41\x08\x61\x2b\x33\x71\x8e\xe6\x57\x1e\xb4\x31\x09\x02\xdf\x01\x5b\xa9\xf0\x3f\xa9\xb8\x1b\x3c\x59\xef\x3a" +
	"\x5a\x37\x75\xd0\xd0\xe9\x9e\x60\xc3\x42\x10\xab\x9f\xe4\xe6\x6a\x7d\x73\xa8\x0a\xe6\x69\x95\x2f\x50\x01\x21\x73" +
	"\xbc\x35\xbb\xc3\x65\x3a\x37\xe9\xac\xc0\x59\x4a\xff\x34\x4a\x98\xc6\x72\x65\x34\xbc\x26\xc3\xd1\xab\x15\x45\x27" +
	"\x30\xcc\xbe\x2d\x05\xfa\xc4\xd8\xcd\x7c\x2e\xb1\xcb\xc3\xf5\xb0\x3b\x3c\xec\xcd\x47\x2c\x74\x07\xac\xfe\x7c\x28" +
	"\x87\x5d\x00\x8f\x6a\xdf\x4c\x70\xa3\xfe\x0a\xed\x13\xe1\xa2\xa2\xab\xb0\x53\x92\x5f\xd7\x66\x78\xbe\x95\x28\x60" +
	"\x25\x28\xab\xfb\xf7\xb7\x4d\x63\xf3\x9b\xb6\xdc\xb7\x93\x71\x94\xcd\xd3\xaa\xc2\x45\x53\xcf\x67\x36\x41\xdd\xe7" +
	"\xf7\xba\x59\x6f\xef\xb8\x71\x7e\x13\xd0\x9f\x40\x97\xfe\x04\x0e\xa0\x9f\xb4\xe9\xb8\x13\xc1\x05\x0a\x47\xea\xe4" +
	"\x04\x46\x23\xf6\xea\xab\xb4\x2a\xb3\xf1\xc8\x4f\x94\x1a\x14\xde\xad\x4b\x85\xf9\x28\x71\x75\x90\xcf\xcc\x3e\xf6" +
	"\x68\xd2\xf6\xfc\x66\x0a\xf9\x0d\x05\x3e\x47\x61\xea\xcf\xe0\x31\x66\x66\xea\x38\x76\xf9\x76\x1b\x18\xfa\x04\x13" +
	"\x78\xc2\x37\x2a\x5c\x4a\xd7\x83\xe9\x40\x8a\x24\x41\xa5\x32\xce\x56\x29\xd9\x27\x1e\x5c\x95\x0b\x7f\x4b\xe2\xe8" +
	"\x9e\x53\x5c\xfd\x58\x65\xe2\xf7\xb4\x34\xe7\x4a\xae\x57\x9b\x3a\x8e\x32\xf3\x30\x81\x2c\xad\x32\x5c\x70\x30\x74" +
	"\x07\xfe\x5e\x9a\xf9\x29\x8f\x72\xd5\x49\x4a\x18\x28\x04\xa2\xfb\x99\x78\x9b\xe7\x63\x3a\x60\x26\xad\x57\xb1\xd9" +
	"\x78\x8e\x05\x2a\xb8\x9f\x89\x33\x59\x21\x57\x8b\x3e\x97\xce\xc4\xde\x3b\xe4\x45\x4c\x6c\x99\xdb\xcb\xb7\x22\xcd" +
	"\x99\x84\x7d\xce\x6d\xca\x33\xa5\xe7\x2c\xd5\x08\xac\x80\x37\x47\xf4\x9b\x07\x6b\x5b\xf1\xd6\xe3\x16\xe6\xdc\xdb" +
	"\x0b\x58\x85\x38\x22\x21\x48\x25\x5c\x20\x67\x5c\xf4\x11\xa1\xc4\x6e\x6c\x6a\x80\x37\x47\x34\x1a\x47\x56\x57\x63" +
	"\x56\xa9\xdf\xd7\x16\x9d\x4a\xc5\x35\x0c\xf7\xe3\x42\xa3\x77\x03\x68\xd7\xfa\xcf\x70\x2f\x7b\xd0\xd0\x5e\x4a\xd6" +
	"\x79\x7e\x23\x4e\xed\xfb\x38\x13\x1e\x9f\x90\x09\x8b\xcb\x81\x24\x30\x89\x9d\x0d\xdd\xe2\xa6\x1c\xee\xe4\xb5\xc4" +
	"\x6f\xd7\x6e\xcd\x65\x4d\x58\x11\x87\x08\xfd\x27\x84\x70\x02\xd0\x0b\x6a\xc8\x77\x3b\x9a\x92\xc2\x2f\x39\x47\x63" +
	"\x95\x55\xe6\x8d\x04\x42\x88\x27\x0b\xc9\xa6\xa6\xc0\x2e\x59\xcf\xdd\x37\x6a\xbb\xf4\x82\xc8\xce\xd6\x8b\x65\xb2" +
	"\x9f\xe0\xef\x81\xc0\x5f\x29\xa1\xfa\x46\xd8\xd0\x5b\xe0\xf0\x3c\x7b\x84\xe8\x2f\x80\x88\x6e\x02\x41\x57\xf0\xa1" +
	"\x4c\x60\x81\x55\x03\x14\x4d\xac\x17\x52\x41\x4a\x19\xc6\xf4\xc4\x79\xb1\x66\x9a\x8f\x7d\x26\x08\x77\xf9\xf2\xaf" +
	"\x8b\x3f\xf6\xf6\x56\xf6\x0f\x29\x55\x44\xfc\x0c\xdb\xc0\xd4\xcf\x42\xe6\xb7\x4c\xae\xb9\xd0\x7b\x61\xaf\xed\x27" +
	"\xae\xd6\x37\x16\x67\x96\xdb\xe1\x0c\xb3\xd3\xa8\x1b\x6a\x9c\x44\x9f\x07\x86\x21\x34\x34\x79\xd8\xe1\xd6\x1f\xc1" +
	"\x8f\x44\xc6\x02\x87\x85\x8f\xd8\xda\x5d\x68\x39\xb3\x58\x69\xd1\x79\xc3\x3a\x39\x14\x00\x5f\xb1\xde\x79\x51\xcf" +
	"\x12\x0d\x35\x10\x2f\x6f\x67\x75\xbd\xab\xeb\xcd\xfd\x28\x83\xdc\xc7\xf1\xd4\xde\xe1\x7d\x57\x40\xee\x06\x9d\xfa" +
	"\x2c\x56\xec\xce\x63\x0f\xd5\xdf\x17\x94\x78\xff\x1f\xfa\xeb\x0a\xf8\xc5\xfa\xe3\xaa\xb6\x77\x89\xbe\x66\x4d\xcb" +
	"\x35\xdd\x56\xbe\x32\xa0\xc0\x6e\x7f\xf5\xb3\x32\x8a\x21\x3e\xe8\x7a\x37\x77\x7d\x2b\xa3\xe8\x72\xe6\x2c\x7e\xe9" +
	"\x7d\xd7\xc1\xe9\x4d\x1b\x1c\x5b\x42\x7f\xcd\xd4\xa9\x09\x4e\xdd\x46\xdc\xd1\x40\x8f\xe0\x20\xf8\x7c\xa3\x3e\x02" +
	"\x57\x1c\x1f\x03\xfc\x58\xd8\x5a\xb2\x01\x6c\x27\xf0\x3c\xe4\xac\xd6\x37\x03\xaa\xd2\xeb\x45\x88\x55\x4e\x1c\x3d" +
	"\x8f\xdd\xc3\xc4\xc5\x19\xc3\x84\x72\xc2\xb7\xf7\x5c\xad\x3d\xeb\xfc\x19\x1a\x50\xa8\x57\xb2\xd2\xb8\xcb\x66\x9e" +
	"\x1f\x6b\x38\xff\x61\xc6\x51\xdd\x6f\xc6\xfa\x5e\x6a\xd3\x70\x1d\x68\x97\xfe\x6c\x83\x95\xee\x34\x4c\x87\xcd\xff" +
	"\x74\x8b\x48\xe1\x1d\x70\xb2\xbb\x65\x5d\xe8\x98\x17\x06\xec\xbb\xd5\x66\x0c\x3e\x38\x09\xbe\x2d\xb1\x37\x86\xa0" +
	"\xd7\xff\xc8\xe0\xdf\xa5\x36\x58\x0d\xff\xe1\xdb\x75\xc1\xfa\x5f\x14\x84\x7d\x27\x47\xb2\xed\x3b\xcd\xbd\x66\x06" +
	"\xb4\xd5\x76\xa5\x06\xdb\x52\x4d\x5f\x2a\x97\x95\xfd\x5c\x85\xbb\x23\x96\x36\x37\x41\x6c\x3f\x09\x86\xff\xd0\xba" +
	"\xa3\x55\x65\x39\xec\xb7\xaa\xf6\xb1\xd9\xd4\xc6\x97\x0a\x8b\xf2\x61\xa0\x9d\xb5\x7d\x78\xe7\x06\x3b\xa5\x6c\x3a" +
	"\x1d\xa9\xde\x2c\xa1\xd9\x33\x31\x6d\xd8\x19\xea\x4f\x59\x2e\x26\x9d\x1e\x16\x69\x68\x1a\x74\x90\xbc\x8e\x92\xa7" +
	"\x9a\x59\xda\x7a\xa1\x2e\x2f\x09\x3c\x89\x82\x17\x6f\x5c\xb9\x68\xdf\x74\x6d\x86\xdb\xad\x6d\x23\x0b\x60\x7f\x27" +
	"\x8b\xff\xd4\x19\xe4\x20\x3a\xcc\x41\xdc\x87\x66\xe2\x5a\x95\xcb\xab\x75\x51\x94\x0f\x63\xdd\xa6\x25\x23\x31\x4a" +
	"\xe0\x47\x18\x89\xc6\xd0\xa3\x09\xe8\x20\xd4\x7a\x77\xd9\xe6\x2a\xbb\x92\x95\x28\x68\xa8\xbd\x6c\x46\xaf\xb7\x03" +
	"\x65\xd7\xab\x7f\x76\x46\xdf\x21\xb3\x3f\x9b\xb7\x0e\x78\xc2\xdf\x13\x5a\xa6\x3c\xb0\x45\xcf\x0b\xb6\x29\x3e\xf3" +
	"\xe4\xb7\x86\x7f\x1e\xec\x7a\x7b\x22\xd9\x1e\x95\xe3\xdd\x6f\xcd\x69\x7d\x0d\x6c\x05\x19\x9f\x0d\xf9\x53\x0e\xd5" +
	"\x44\xc3\x95\x2c\xc0\x7b\xd2\x2e\xe5\x5e\x56\x34\xac\x9b\x56\x92\x57\x1d\xbe\x9d\x48\xf5\x8e\xba\xbb\x1d\xca\xcc" +
	"\x83\xfb\x80\xc8\xb2\x69\x53\xa3\x30\xfe\x35\x48\xed\xd6\xda\xf6\xf0\xe3\x63\xb8\x28\xa0\x92\xfc\x01\x15\xf7\xcd" +
	"\xb3\x12\x3f\x95\xd5\x0c\xcc\x1c\x2b\xfe\x6a\x4b\xae\x8d\xab\x88\xf9\x3b\xac\x74\xa1\x30\xcd\x1f\xf9\x8b\x38\xcb" +
	"\x3a\xe6\xfd\xb6\xee\x60\x2b\x37\xec\xf5\x06\x6d\xdd\x20\x28\xf5\x3b\xd0\x4f\x74\x75\xdb\x13\xf9\xbc\x37\x47\x5a" +
	"\xb0\xef\xeb\xe4\x02\x71\xc3\x4c\xdb\x01\x0e\x56\xb8\xac\xf2\x29\x1f\x18\x7c\x5b\x64\x19\xb1\x47\x25\xb1\xcb\xec" +
	"\x9a\x34\xef\x7f\x01\x00\x00\xff\xff\x06\x70\x7c\xf6\x40\x2b\x00\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11072,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1581229143, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
