// Code generated by go-bindata. DO NOT EDIT.
// sources:
// out.go.tpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataOutgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x59\x6f\xe3\x46\xf2\x7f\x26\x3f\x45\x45\x48\x06\xe2\x44\x6e\xff" +
	"\xff\xc0\x62\x1f\x84\xf1\xc3\xac\x9d\x75\x04\x6c\x26\x46\xe4\xdd\x0c\x30\x08\x06\x34\x59\x94\x08\x4b\x6c\xb9\xd9" +
	"\x1a\xdb\x10\xf8\xdd\x17\x55\xdd\x4d\x36\x0f\xc9\xb2\xe7\x48\x76\x80\xc4\x64\x1f\xd5\x75\xfc\xba\x2e\xf1\xf4\xf4" +
	"\x34\x3c\x3d\x05\xb8\xc4\x02\x55\xac\x31\x85\x44\xa6\x28\xe0\x42\x42\x21\x35\xac\x65\x9a\x67\x8f\x82\x97\x94\x72" +
	"\xab\x12\x9c\xc2\x6e\x07\x62\xce\xcf\x50\x55\x21\x11\xd8\xc4\xc9\x6d\xbc\x40\x9e\xb9\xb2\xcf\x55\x15\x86\xf9\x7a" +
	"\x23\x95\x86\x71\x18\x8c\x12\x59\x68\x7c\xd0\xa3\x30\x18\x65\x6b\xfa\xb3\xdb\x41\x9e\x81\xf8\x39\x2e\x7f\x41\xbd" +
	"\x94\x69\x09\x27\x55\x15\x06\xa3\xf2\xb1\x48\x68\x55\xa9\x55\x5e\x2c\x4a\xb3\x12\x8b\xd4\x4c\xef\x76\xb4\xe9\xfa" +
	"\x71\x83\x65\x55\x8d\x74\xbe\xc6\xd1\x6e\x87\x45\x4a\xa7\x05\xa3\x45\xae\x57\xf1\x8d\x48\xe4\xfa\xf4\x36\xd6\xc9" +
	"\x12\xcf\x65\x8a\xa7\x29\xde\x1d\x38\x6f\xef\x1e\xfa\x4f\x6e\x74\x8f\x81\x13\x50\x71\xb1\x40\xf8\x7e\x73\xbb\x98" +
	"\xc0\xf7\x9b\x58\x2f\x61\x7a\x06\x62\xc6\xc2\x96\x60\x56\xd1\x6c\x55\xc1\x88\x9e\x62\xbd\xac\xaa\x91\xd9\x4b\x84" +
	"\xaa\x2a\x8c\xc2\xb0\xa1\x64\xe4\x61\x8d\xe9\xc7\x0d\xa9\x51\x5c\xca\x77\xf1\x1a\xab\xea\xa7\x4f\x58\x68\x28\xb5" +
	"\xda\x26\x1a\x76\x61\x30\xbb\x80\x20\x08\x02\x00\x30\xfa\x09\x83\x73\x85\xb1\xc6\xeb\x7c\x8d\x00\x40\x0a\x11\xf4" +
	"\x1c\x06\x17\x98\xc5\xdb\x95\x9e\xeb\x58\x23\xa4\x78\x27\xf8\x29\x0c\xcc\x80\xfd\xe7\x8d\xcf\x8a\x14\x1f\xb0\x34" +
	"\xe3\x1f\xfe\xb0\xe4\xc3\x60\x8e\x2b\x4c\xb4\x54\x6e\x8b\x3b\xd7\x8d\xff\x07\x55\x99\xcb\x02\xf2\x42\xff\xfd\x6f" +
	"\x21\x09\x59\x33\x0f\xaf\xf9\xe5\x37\xcc\xaa\x2a\x74\xc2\x7d\xf4\x16\x5c\xcb\x4d\x9e\x9c\xcb\x22\xcb\x17\xb4\x1f" +
	"\x55\x16\x27\x48\x62\xb2\xd8\xd7\xb2\xab\x88\x31\xf1\xcb\x4f\x11\x8c\x5f\x77\x67\x27\x80\x4a\x49\x15\xd1\x51\xa7" +
	"\xa7\x3d\x2d\xce\x34\x2a\xc8\x4b\x88\x0b\xc8\x35\x61\x5d\x2a\xc8\xa4\xea\xad\x2b\x05\xcc\x34\x2c\x63\xb3\x32\xc5" +
	"\x42\xe7\x49\xbc\xf2\xf8\xd3\x92\xc8\xd7\xac\x10\xdd\x09\xe0\x43\x82\x1b\x0d\x7a\x19\xd3\xff\x10\x8c\xe1\xd6\x0c" +
	"\x35\x50\xa8\xb7\xaa\x28\x21\xee\x1d\x26\x86\x2d\x6e\x78\xf5\x35\xf2\x0e\x1f\xf4\x38\xd1\x0f\x60\x2f\x92\x38\x37" +
	"\x7f\x0f\x2a\x22\x38\x5f\xc9\x12\xc7\x51\xad\xfc\xf7\xef\xdf\x7f\x1c\x3c\xcb\x43\x18\xbd\x42\x5b\xbc\x30\xb0\x46" +
	"\xda\x63\x3c\xab\x71\xe2\xb1\x96\x95\x94\x50\xd0\x40\x9f\x3b\xa6\xad\xd4\x8c\xad\x90\xcb\xe2\x5c\xae\x37\x2b\xd4" +
	"\x48\x17\x34\x77\x83\x90\xd8\xd1\x74\x02\x52\x91\x2d\x58\xa8\x09\x1d\x94\x67\x20\x0b\x04\x99\x24\x5b\x85\xa9\x80" +
	"\x39\x62\x9b\x61\xc1\xac\x90\x75\xd7\x52\x21\xe4\x45\x26\xd5\x9a\xc9\x8a\x30\xdb\x16\x09\x8c\x73\x0d\xaf\xf7\x69" +
	"\x23\x82\x97\x68\x1b\x76\x61\x18\xe4\x19\x7c\x97\x6b\x51\xf3\x40\x44\x68\x26\x08\x58\x36\x33\xf1\x93\x52\xe3\x08" +
	"\xbe\x3b\x83\x22\x5f\xf1\x5c\x60\x94\x46\xef\x93\xf6\xaa\x30\x08\xaa\xb0\x3d\xbf\x4f\x7b\x21\xad\x0c\x83\x14\xef" +
	"\x0c\xf6\xa6\x67\x0d\x29\xbe\x3c\x51\x18\x06\xc8\xdc\xda\x39\x63\x3c\x71\xe0\xb2\x99\xbb\xc6\x62\xd1\x36\x8f\x65" +
	"\x9f\xa3\x6c\xad\x89\x23\xa9\xb2\x31\xf9\xf9\x4f\xa8\x74\x63\x0e\xd0\xb2\x07\x81\x29\xfc\xf0\x69\xc4\x9c\x44\xc4" +
	"\x75\xe8\xa8\xe1\x84\x08\x12\x9a\x8e\x31\x92\x05\x37\xb1\xe3\x04\x6d\xf0\xee\xf9\x6c\x7a\xb6\x8e\x76\x8e\xea\x53" +
	"\x9e\x18\x5f\xeb\x2e\x5e\xdf\x15\x35\x97\x41\xd3\x68\x09\xeb\x78\xf3\xc1\xf8\x3d\xe7\x17\x1d\x8b\xef\xf0\x7e\x88" +
	"\xc4\x38\x62\xdf\xd7\x27\xbd\xab\x65\x7d\x35\x34\x4f\x9a\x35\x67\x4e\x61\x1d\xdf\xe2\xb8\x77\x72\x34\x21\x8d\xb1" +
	"\x7c\xdf\x5b\x69\x88\x0a\x47\x20\x7e\x20\x89\x1b\x81\xeb\xc8\x62\x14\x9a\x10\x5b\xfe\xbe\xd6\xe9\x11\xec\x83\x82" +
	"\x77\xbd\xea\x2b\xc0\x6f\xec\xdb\x07\xaf\x01\x0a\xa6\x4c\x98\x49\x44\xd7\x6d\x18\xab\xed\x05\x51\x5e\x24\x52\x29" +
	"\x4c\x08\x3c\x44\xe3\x87\x92\xd0\x62\x08\x5a\xc4\xac\xcb\x05\xc9\x5c\xe0\xfd\x98\xb2\x0e\x8e\x32\x50\x55\x51\x18" +
	"\x58\x7c\xaf\xcb\x85\xf8\x77\xb1\x8e\x55\xb9\x8c\x57\x63\x14\x57\xf1\xe3\x4a\xc6\xe9\xb3\xc0\xbc\x75\xfb\x61\x63" +
	"\x76\xef\x03\xee\xab\x21\x8d\x10\xe5\xd9\xc5\x14\x9a\x7f\x28\x66\x17\x93\x30\xf0\x63\xe4\x14\x88\x53\x1a\x6c\x02" +
	"\xf9\x94\x97\x36\xef\x34\xeb\x87\xf3\x29\xa0\xf0\xdf\x69\xde\x4e\xd4\x07\xd5\x13\x36\xae\x4f\x6b\x0e\xcc\x3b\x4d" +
	"\xd1\x36\x1b\xc5\xfd\x9d\x76\x68\xe2\x4d\xdb\x20\x3f\xf5\xa6\xed\x10\xc1\xb1\x73\x6b\x9f\x02\x59\x17\x5d\xd7\xd2" +
	"\x81\x6c\x10\x58\x11\x34\x61\xbf\x05\xb2\x9b\x6d\x56\x7b\x33\xf4\x21\x26\x7e\xb1\x56\x3f\x64\xec\x9a\xe6\xae\x62" +
	"\x2a\x2d\x7b\x36\x93\x7b\x6d\x78\xe5\x10\xc1\xff\x88\x97\xaf\x67\x43\x56\x5f\x3d\x31\x74\x9d\x0e\x5a\xfa\xcf\xb7" +
	"\xb3\xbb\xf4\xc6\x87\xb1\xc7\xce\x20\x81\xb3\x9e\x55\x46\xbb\x9d\xb8\x52\x52\xcb\x7f\x6e\x57\x2b\xb3\x77\x64\x2c" +
	"\xc3\x9e\x60\x02\xf2\x96\xcc\x9d\x08\xe3\x25\x3f\x0c\xad\xff\x83\xa9\xcb\x5b\x9f\x2e\x2f\xe7\x08\x79\xe8\xa0\xa3" +
	"\x45\x9b\xa3\xee\x49\x67\x5c\x95\xf5\xd2\x74\xf6\x61\x26\xe1\xcc\x32\x55\xc7\x2a\x1b\xaa\x34\xae\x37\x2b\xca\xd1" +
	"\x47\xc9\x2a\xc7\x42\x8f\x40\x80\xf1\xe9\xcd\x4c\x69\x38\x6b\xa6\xfc\x58\x97\x62\x96\x17\xde\x76\x5e\x71\x72\x20" +
	"\x5c\xd8\x48\x68\x47\xaa\xea\x9c\x37\xb6\xf3\xcf\xf9\x63\x91\xbc\x5d\xad\xae\xe5\x50\x5a\x44\x49\x49\x69\x62\xbe" +
	"\xd9\x3b\x01\xb9\xd1\x25\x08\x21\x4c\x11\x25\x68\xfb\xaf\x1b\x4a\x57\x22\x73\x85\xfd\x4a\xaa\x89\x52\xc1\x25\x29" +
	"\x16\xac\x66\xc1\x85\x9f\xc1\x23\xf3\xd4\x2a\x9b\x0f\xcb\x65\xe1\x9f\x77\x89\xda\x1d\x47\xe1\x0a\x3c\xb7\x02\xbd" +
	"\x2c\xf9\x1f\x54\xf7\x0d\x9e\x5c\xee\x3b\xba\xac\x4b\xa4\xa1\xd3\x1d\xc1\x9a\x05\x2f\x8c\x3f\xc9\xcd\x7c\x7b\x73" +
	"\xac\x0a\x96\x71\x91\xae\x50\x01\x81\x76\xdc\x9b\xdd\xe3\x4d\xad\x07\xb5\x56\xe0\x04\xa6\x7b\x1a\xe5\x52\x63\xb6" +
	"\xe0\x6b\xb2\x29\xbd\x1a\x51\xca\x08\x86\xd9\x37\x55\x42\x97\x18\x7b\xa0\x97\x12\xbb\x3a\x5e\x0f\xfb\x23\xc7\xc1" +
	"\x54\xc5\xa0\x7a\xc0\xea\x5f\x14\xe5\x7e\xef\xc0\x01\xde\xb5\x20\xec\xa8\xbb\x78\x87\xa4\x9b\x15\x74\x4b\xf6\x0a" +
	"\xf9\xeb\x56\x0f\xcf\x37\xc2\x7a\xac\x78\xc5\x78\xf7\xd6\x37\xc9\x6f\x7a\xd3\x34\x09\xcc\x64\x18\x24\xcb\xb8\x28" +
	"\x70\x55\x77\x01\x12\x93\xd6\x1e\xf2\x96\xed\x5c\xb9\x73\xdc\x38\xbd\x69\x29\xb4\x4d\x7f\x02\x47\xd0\x8f\x9a\x24" +
	"\xde\x8a\x60\xc3\x8b\x25\x75\x76\x06\xa3\x11\xc7\x82\x4d\x5c\xe4\xc9\x78\xe4\x26\xf2\x12\x14\xde\x6d\x73\x85\xe9" +
	"\x28\xb2\xd5\x93\xcb\xe7\x3e\x76\x68\xd2\xf6\xf4\x66\x0a\xe9\x0d\x85\x4b\x4b\x61\xea\xce\xe0\x31\x66\x66\x6a\x39" +
	"\xb6\x59\x7a\x13\x4e\xba\x04\x23\x78\xc2\xa3\x2a\x5c\x4b\xdb\xb9\x39\x16\x6d\x24\x24\x2a\x95\x70\xfa\x4b\xd5\x03" +
	"\xb1\x67\xcb\x66\xf8\xff\x28\x0c\xee\x39\x67\x2e\x1f\x8b\x44\xfc\x1e\xe7\xfa\x52\xc9\xed\x66\x57\x85\x41\xa2\x1f" +
	"\x26\x90\xc4\x45\x82\x2b\x8e\xae\x96\x97\xdf\x73\xbd\x3c\xe7\x51\x2e\x63\x49\x3f\x03\x95\x45\x70\xbf\x10\x6f\xd3" +
	"\x74\x4c\x07\x2c\xa4\xf1\x45\x26\xbd\x4f\x31\x43\x05\xf7\x0b\x71\x21\x0b\xe4\xf2\xd3\x25\xe7\x89\x38\x78\xf3\x9c" +
	"\xf4\x46\x64\x21\x44\x64\x0a\xe8\x4e\x26\x17\x94\x9c\xa3\x98\xe7\xd4\x24\x53\x53\x7a\x4e\xe2\x12\x81\x35\xf1\xe6" +
	"\x84\xfe\xf2\x60\x65\x6a\xe9\x6a\xdc\x5c\x05\xee\x1a\x7a\x3c\x43\x18\x90\x34\xa4\x1b\x2e\xbd\x13\x2e\x27\x89\x50" +
	"\x64\x36\xd6\xd5\xc5\x9b\x13\x1a\x0d\x03\xa3\xb4\x31\xeb\xd6\xed\x6b\xca\x59\xa5\xc2\x0a\x86\x3b\x7d\x3e\x30\xda" +
	"\xa1\xb9\x8d\x90\x67\x78\xa7\x97\x21\x26\x0c\x68\xd1\x1c\xb9\x61\x60\xd7\xbd\xc3\xfb\x66\xe9\x1c\x35\xbb\x6f\x12" +
	"\xcc\x5d\x1d\x36\x61\x7a\x23\xce\xcd\xfb\x38\x11\xee\x26\x40\x22\xcc\x0d\x18\x48\x52\xa3\xd0\x42\xc2\x2e\xae\xcb" +
	"\x75\x93\xb0\x19\x36\xc4\x2c\x5d\x71\xc6\x2c\xb7\x9a\x8c\xfd\x7f\x6c\x5e\xb7\x63\x8e\xda\x9b\x1f\x0f\xec\x89\x7a" +
	"\x89\x3c\x89\xd2\xc5\x95\xa5\x17\xb1\x7d\x8e\xb1\xc5\x9f\x90\x98\x90\xe0\x5f\x51\xe5\xae\xbd\x53\xd7\x50\x6e\xc9" +
	"\x25\x6a\xa3\xac\x3c\xad\x25\x30\x77\xf0\x70\xe5\x5c\x17\x51\xd8\x26\xeb\xb8\xfb\x46\x7d\xa6\x4e\xfc\xdb\xdb\x6b" +
	"\x32\x4c\x76\x2b\x9a\x03\x10\xf8\x2b\xa5\x89\xdf\x08\x1b\x65\x0f\x1c\x8e\x67\x87\x90\xf2\x33\x20\x52\xd6\x81\xaa" +
	"\x2d\xf8\x50\x12\xb3\xc2\xa2\x06\x4a\x49\xac\x67\x52\x41\x4c\xc9\xd1\xf4\xcc\x3a\xd7\x7a\x9a\x8f\x7d\x26\x08\x71" +
	"\x4f\x88\xf9\xb2\xf8\xe3\x20\x64\x64\xff\x10\x53\x09\xc8\xcf\xd0\x07\x66\xf9\x2c\x64\x7e\xcb\x92\x81\x2b\xdb\xaf" +
	"\x85\x3b\xab\x82\xda\xdb\x6f\x6f\x0c\xce\x0c\xb7\xc3\xc9\x71\xab\x33\x39\xd4\x29\x0a\x5e\x06\x86\x21\x34\xd4\x29" +
	"\xe4\xf1\xd6\x1f\xc1\x8f\x44\xc6\x00\x87\x85\x0f\xd8\xda\x6d\x68\x59\xb3\x18\x69\xd1\x7a\xc3\x2a\x3a\x16\x00\x5f" +
	"\xb0\x8a\xfb\xaa\x9e\x25\x18\xea\x98\x5e\xdd\x2e\xaa\x6a\x5f\x9b\x9f\x1b\x70\x1a\xb9\x71\xe5\xa8\xbd\xc3\xfb\xb6" +
	"\x80\xdc\xfe\x3a\x77\x09\xb8\xd8\x9f\x82\x1f\xab\xbf\xcf\x28\x5c\xff\x37\xf4\xd7\x16\xf0\xb3\xf5\xc7\xb5\x7a\xe7" +
	"\x12\x7d\xc9\x4a\x9d\xcb\xd1\x5e\xbe\x32\xa0\xc0\x76\x43\xf9\x45\x19\xc5\x10\x1f\x74\xbd\xeb\xbb\xde\xcb\x28\xda" +
	"\x9c\x59\x8b\x5f\x39\xdf\x75\x74\x7a\xd3\x04\xc7\x86\xd0\x5f\x33\x75\xaa\x83\x53\xbb\xf3\x78\x32\xd0\xde\x38\x0a" +
	"\x3e\xdf\xa8\x05\xc2\xd5\xce\x47\x0f\x3f\x06\xb6\x86\xac\x07\xdb\x09\x3c\x0f\x39\x9b\xed\xcd\x80\xaa\xca\xed\xca" +
	"\xc7\x2a\x27\x8e\x8e\xc7\xf6\x61\x62\x76\x31\x71\xa5\xd7\xdb\x7b\x2e\x22\x9f\x75\xfe\x02\x35\x28\x2c\x37\xb2\x28" +
	"\x71\x9f\xcd\x1c\x3f\xc6\x70\xee\x4b\x94\x93\xaa\xdb\x7d\x76\xcd\xe3\xba\xc3\x3c\xd0\x1f\xfe\xd9\x04\xab\xb2\xd5" +
	"\x21\x1e\x36\xff\xd3\xdd\x2d\x85\x77\xc0\xc9\x6e\xcf\xba\xd0\x32\x2f\x0c\xd8\xb7\xd7\x3c\xf5\xbe\xb0\xf1\x3e\xa6" +
	"\x31\x37\x86\xa0\xd7\xfd\xaa\xe2\x5f\x79\xa9\xb1\x18\xfe\xa5\xdf\x36\xf0\xba\x9f\x50\xf8\x2d\x33\x4b\xb2\x69\x99" +
	"\x2d\x9d\x66\x06\xb4\xd5\x34\xd4\x06\x3b\x6a\x75\x4b\x2d\x95\x85\xf9\x3e\x87\xbb\x37\x86\x36\x37\x69\x4c\x2b\x0c" +
	"\x86\x7f\x59\xde\xd3\x65\x33\x1c\x76\xbb\x6c\x87\xd8\xac\x6b\xe3\x2b\x85\x59\xfe\x30\xd0\x89\xeb\x1f\xde\xba\xc1" +
	"\x56\x29\xbb\x56\x33\xad\x33\x4b\x68\x76\x4c\x4c\x6b\x76\x86\x5a\x6b\x86\x8b\x49\xab\xfd\x46\x1a\x9a\x7a\x1d\x2e" +
	"\xa7\xa3\xe8\xa9\x3e\x5c\x69\xbc\x50\x9b\x97\x08\x9e\x44\xc1\x8b\x1b\x6b\x75\x07\xac\x6e\x0d\x1d\xdb\x6a\xb3\xf1" +
	"\xbf\x6e\x2f\x0d\xf7\x8e\x9b\xd6\x1b\xc0\x13\xcd\x37\xfe\xb9\xd7\x4b\x4b\x4a\x3f\x2d\xb1\x1f\xdb\x89\x6b\x95\xaf" +
	"\xe7\xdb\x2c\xcb\x1f\xc6\x65\x93\xa9\x8c\xc4\x28\x82\x1f\x61\x24\x6a\xdb\x8f\x26\x50\x7a\xd1\xd7\x79\xd0\x26\x7d" +
	"\xd9\x97\xbf\x04\x5e\x0f\xf0\xeb\x26\xf9\x65\x3f\x76\xb6\x1d\xfd\x8b\x93\xfc\x16\x99\xc3\x09\xbe\xf1\xc9\x13\xfe" +
	"\xa6\xd2\x30\xe5\xb0\x2e\x3a\x8e\xb1\xc9\xfa\x99\x27\xb7\xd5\xff\x89\xb4\x1d\x00\x88\x64\x73\x54\x8a\x77\xbf\xd5" +
	"\xa7\x75\x35\xd0\x8b\x3b\x2e\x41\x72\xa7\x1c\xab\x89\x9a\x2b\x99\x81\x73\xae\x6d\xca\x9d\x44\x69\x58\x37\x8d\x24" +
	"\xaf\x5a\x7c\x5b\x91\xaa\x3d\xa5\x78\x33\x94\xe8\x07\xfb\x11\x95\x61\xd3\x64\x4b\x7e\x48\xac\x91\xda\x2e\xbf\xcd" +
	"\xe1\xa7\xa7\x30\xcb\xa0\x90\xfc\x11\x19\xff\x0a\x90\xe4\xf8\x29\x2f\x16\xa0\x97\x58\xf0\x97\x6b\x72\xab\x6d\x91" +
	"\xcc\xdf\xa2\xc5\x2b\x85\x71\xfa\xc8\x5f\x05\x1a\xd6\x31\xed\x36\xa0\x07\x9b\xce\x7e\x57\xda\x6b\x40\x7b\x71\xaa" +
	"\xdb\x34\x7f\xa2\xff\xdc\x9c\xc8\xe7\xbd\x39\x29\x05\xbb\xc3\x56\x7a\x10\xd6\xcc\x34\xbd\x6a\x6f\x85\x4d\x34\x9f" +
	"\x72\x8b\xde\xf7\x55\x86\x11\x73\x54\x14\xda\x64\xaf\xce\xfc\xfe\x1b\x00\x00\xff\xff\x52\xce\x13\x9e\x44\x2c\x00" +
	"\x00")

func bindataOutgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOutgotpl,
		"out.go.tpl",
	)
}



func bindataOutgotpl() (*asset, error) {
	bytes, err := bindataOutgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "out.go.tpl",
		size: 11332,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1582441157, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"out.go.tpl": bindataOutgotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"out.go.tpl": {Func: bindataOutgotpl, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
