package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xe3\xb8\x11\x7f\x16\xff\x8a\x39\xa3\xb7\xb0\xae\x8e\x8c\xbe\x1a\x9b\x87\x85\xd3\xe6\x0c\x74\xf7\x82\x26\xc5\x3d\x2c\x0e\x07\x99\x1a\xd9\x42\x24\xd2\x4b\xd1\xf9\x80\xa1\xff\xbd\x18\x92\x92\xa8\x0f\x3b\xce\x6e\x53\x6c\xdb\x0b\xb0\x6b\x8b\x14\x67\x7e\xf3\xc1\x99\xe1\xd0\xf3\xf9\x9c\xcd\xe7\x00\xd7\x28\x50\xc5\x1a\x13\xe0\x32\xc1\x08\xae\x24\x08\xa9\xa1\x90\x49\x96\x3e\x47\xe6\x95\x52\xee\x15\xc7\x05\x1c\x0e\x10\xdd\x9a\xef\x50\x55\x8c\x08\xec\x62\x7e\x1f\x6f\xd0\xcc\xdc\xb8\xef\x55\xc5\x58\x56\xec\xa4\xd2\x30\x65\xc1\x84\x4b\xa1\xf1\x49\x4f\x58\x30\x49\x0b\xfa\x38\x1c\xb2\x14\xa2\x9f\xe3\xf2\x23\xea\xad\x4c\xca\xaa\x9a\x94\xcf\x82\x4f\x0e\x07\x14\x49\x55\xd5\x2f\xdc\x3d\xef\x90\xe6\x74\x56\x60\x33\xc7\x82\xc9\x26\xd3\x79\xbc\x8e\xb8\x2c\xe6\xf7\xb1\xe6\x5b\x5c\xca\x04\xe7\x09\x7e\x19\x21\x0d\x17\x44\xef\xf8\x92\x79\xcc\xef\xcd\xb2\x0b\x40\x91\x10\xf2\x90\x31\x7a\x52\xb1\xd8\xa0\xc3\x60\x04\xd2\xcf\x3b\x92\x32\xba\x96\x9f\xe2\x02\xab\xea\xaf\x0f\x28\x34\x94\x5a\xed\xb9\x86\x03\x0b\x56\x57\x10\x04\x41\x00\x40\x63\x99\xd8\xb0\xe0\x63\xb9\x01\x3b\xf2\x93\xb7\x8e\x05\x4b\x85\xb1\xc6\xbb\xac\x40\x00\x20\xe1\x22\xfa\xce\x82\x2b\x4c\xe3\x7d\xae\x6f\x75\xac\x11\x12\xfc\x12\x19\x16\xe6\x91\x05\x76\xd4\xfd\xf5\x27\x57\x22\xc1\x27\x2c\xed\xe4\xe7\xdf\x1c\x80\x1a\xf4\xef\x1e\xf7\x3b\xb9\xcb\xf8\x52\x8a\x34\xdb\x40\x26\x34\xaa\x34\xe6\x48\xf0\x0d\xb9\x3b\xd9\x17\x70\xda\xb0\x0a\x61\xfa\x53\x7f\x76\x06\xa8\x94\x54\x21\xb1\x9a\xcf\x07\xda\x59\x69\x54\x90\x95\x10\x0b\xc8\x34\xb9\x98\x54\x90\x4a\x35\x78\xaf\x8c\x60\xa5\x61\x1b\xdb\x37\x13\x14\x3a\xe3\x71\xee\xe1\xd3\x92\xc8\x37\x50\x88\xee\x0c\xf0\x89\xe3\x4e\x83\xde\xc6\xf4\x1f\x82\x35\x48\x61\xec\x0e\x0a\xf5\x5e\x89\x12\xe2\x01\xb3\x68\xdc\x92\x06\x6b\x6b\x4d\xc2\xeb\x2b\x9a\xa6\x59\xc0\xad\xe2\x8e\x28\xd4\x69\xe1\x13\x3e\xe9\x86\x3f\x01\x13\x34\x30\x54\x9d\xa1\xad\xd4\xca\x68\x26\x93\x62\x29\x8b\x5d\x8e\x1a\x21\x4b\x9d\xba\x32\x29\x80\xbb\xd1\x64\x06\x52\x91\x7e\x8c\xc6\x67\xc4\x28\x4b\x41\x0a\x04\xc9\xf9\x5e\x61\x12\xc1\x2d\x62\x17\x70\x64\xa0\x90\xc6\x0b\xa9\x10\x32\x91\x4a\x55\x18\xb2\x11\x4b\xf7\x82\xc3\x34\xd3\x30\x30\x2a\xad\x0c\x8d\x14\x53\xae\x9f\xc0\xed\xde\x68\x69\x3f\x4f\xb9\x01\x1c\x18\x0b\xb2\x14\x7e\xc8\x74\x94\xd5\xfc\x89\x08\xcd\x04\x81\xd5\x09\x88\x2c\x3f\x2e\x3c\x0b\x2a\x16\xb0\x20\xc1\x2f\xd6\x9c\x8b\x4b\xa8\x89\x59\x7f\x0c\x19\x0b\xd0\x30\x74\x73\xd6\x26\xd1\x09\xff\xb5\xee\x6b\x90\xd1\xb2\x1f\x2e\x09\xc2\x00\x51\x5a\x68\x42\x24\x55\x3a\xa5\x88\xf5\x80\x4a\xb7\xda\x04\x2d\x07\x16\x5c\xc0\x8f\x0f\x13\x83\x24\x24\xd4\xac\xa6\x86\x33\x22\x48\xce\xf0\x92\x8e\x97\xb9\x2c\x71\x1a\x5a\x7f\xb3\x42\xba\x21\x56\xb1\xc3\xc1\x44\x24\x8a\x5f\xf4\xdd\xc5\xa3\x5b\x54\x0f\x19\xb7\x21\xa9\xf6\xe3\xe1\xce\x6e\xfd\x58\xd3\x68\x09\x45\xbc\xfb\x6c\xa3\x82\x17\x1c\x0c\xbc\x4f\xf8\x38\x46\x62\x1a\x1a\xd0\x43\xd2\x87\x46\xce\x77\x63\xf3\xa4\x55\xcb\x73\x01\x45\x7c\x8f\xd3\x01\xe7\x70\x46\xda\x32\xf2\xfd\xc9\x49\x43\x54\xc8\x9a\x86\x9c\x91\xb8\x15\xb8\x09\xc0\x56\x99\x9c\x60\xf9\xeb\x3a\xdc\x43\x38\xe6\x06\xde\xce\x38\xc7\x83\x31\x32\x54\xc9\x57\x78\xd4\xdf\xed\xd3\xa1\x3b\xfb\xce\x93\x09\x2e\x95\x42\x4e\x4e\x43\x34\x7e\x2c\xc9\x4b\x2c\x41\xe7\x29\x45\xb9\x21\x79\x05\x3e\x4e\x29\x6f\x5a\xea\x50\x55\x21\x0b\x9c\x63\x17\xe5\x26\xfa\xa7\x28\x62\x55\x6e\xe3\x7c\x8a\xd1\x4d\xfc\x9c\xcb\x38\x79\x95\x17\xef\xeb\xf5\xb0\xb3\xab\x8f\x79\xec\xbb\xbe\x3a\x88\xea\xea\x6a\x01\xed\x1f\x46\xab\xab\x19\x0b\x28\xa7\x79\xc3\x45\xb9\xa1\xc1\x36\xa1\x2d\xcc\xab\xed\x33\xcd\xfa\x69\x6d\x01\x18\xf9\xcf\x34\xef\x26\x1a\x46\xcd\x84\xcb\x6a\x8b\x06\x81\x7d\x26\xff\xe9\x6d\xb1\x97\xbc\xa2\x2f\xdf\x9d\xac\xbd\x62\xe0\x09\x21\xb4\x29\xaf\xe3\x15\xeb\x7d\xda\x84\x1d\x8c\x3e\x96\x9b\xe8\xa3\xb3\xce\x29\xa3\x34\xb4\x0e\x95\x59\xdd\xd1\x7b\x3b\x79\x54\xdf\x37\xb5\xe5\xcc\x1f\x61\x78\x3b\x7d\x1b\x95\x35\x13\x63\x7e\xff\x66\x56\xa9\xf7\x95\x0d\x11\x26\x20\xa6\xc0\xe1\x72\xa0\xcf\xc9\xe1\x10\xdd\x28\xa9\xe5\xdf\xf6\x79\x6e\xd7\x4e\xac\x4e\xcd\x66\x9b\x81\xbc\x27\x03\xf1\xc8\x06\xa1\xcf\x13\x8f\xc9\xe4\x37\x43\x56\xde\xfb\x04\xcd\x7b\x26\xeb\x9c\xe2\x70\xb6\x4c\xb7\xa8\x07\x62\xd9\x30\xe0\xa2\x1f\xf1\x3e\x82\x0e\x2e\x1d\x9a\x26\xf8\xbb\xd8\xaf\xb1\xd8\xe5\x54\xfe\x4d\x78\x9e\xa1\xd0\x13\x88\xc0\x06\xc9\x76\xa6\xb4\x90\xda\x29\x3f\x79\x24\x98\x66\xc2\x5b\x6e\xde\xb8\x38\x11\x7f\x5d\x6a\x71\x23\x55\xb5\x34\x0b\xbd\xbc\x92\xac\xdb\x4a\xd4\x4e\xb2\x80\x6f\x63\x21\x30\x6f\xea\x5f\x57\x2d\x9d\x52\x58\x37\x0d\xf5\xd8\x4d\x93\xb5\x47\x7f\x06\x5d\xfa\x33\x38\x83\xbe\x9f\xc5\x9c\x0c\x63\x09\xcc\x4e\x91\x57\x24\xeb\x05\x24\x6b\xf2\x73\xc7\x6d\x51\xb3\x35\x63\x86\xe8\xc2\x71\x76\x89\xcc\xf7\x8c\x0e\xbd\x10\x6e\x9f\x05\xff\x90\xe7\x77\x72\xac\x92\x9a\x81\xc2\x42\xba\x52\xbf\x5e\x61\x02\x0e\x61\x44\xa5\xb8\x49\x04\x94\x44\x09\x82\x2b\xfc\xe0\x2f\x21\x0b\x1e\x4d\xfa\xa0\x33\x53\xf4\x6b\x9c\xe9\x6b\x25\xf7\xbb\x43\xc5\x02\xae\x9f\x66\xc0\x63\xc1\x31\x37\xbb\xc0\x31\xfc\x35\xd3\xdb\xa5\x19\x35\xc5\x18\x15\x58\x23\x09\x36\x78\xdc\x44\x1f\x92\x64\x4a\x0c\x36\x12\x48\x2a\x97\xe9\x12\x4c\x51\xc1\xe3\x26\xba\x92\x02\x4d\x05\xd6\xd8\xda\xec\xb5\x64\x1d\x2d\xed\xf3\x94\x47\xb5\xba\x80\xd7\xa5\xd9\x70\x9f\x87\x0d\x51\xf7\x76\x53\xf7\xb0\xa0\xce\x80\xa4\x15\xd2\x9f\x55\x5e\xad\xac\xc6\x0b\x88\xc4\x30\xea\x06\x25\xe6\x68\x3d\xd4\x70\xa0\xc0\xb7\xa0\xef\x3c\x2e\x11\x8c\x4e\xdf\x5f\xd0\xa7\x19\xac\x98\xf9\x57\x51\x04\xf7\x76\x9c\x2f\x3d\xb0\x80\xf4\x42\x5a\xa6\xb7\x02\x6e\x70\x12\xa1\xd0\x2e\x6c\x32\xf6\xfb\x0b\x1a\x65\x81\x55\xff\xd4\x58\xa9\x5e\xd7\xd6\x86\x4a\xb1\x0a\xc6\x4f\x98\x9e\x1b\x75\x77\x66\xeb\x4f\xd7\x14\x5d\xbc\x7a\xc1\x66\xb1\x51\xdf\xca\x92\x26\xe2\x50\xb9\xd3\x5f\xe4\xa5\xb6\x80\x7d\xbb\x35\x8f\x19\xb3\xae\xbe\x9b\xcc\x59\xbf\x72\x8d\xda\x9a\x35\x7b\xb9\xa6\x69\xd2\x26\x76\x49\x7d\x87\xa5\xbf\x05\x38\xcc\x82\xe7\x1a\xd4\x24\xd3\x23\x06\xa5\xa9\xef\xdd\xa6\x0d\x7e\x87\xf7\xff\xd9\xb6\x1f\x1e\xe3\xec\x7f\x65\xbb\x1a\x59\xfe\xd8\xb0\x21\xdc\xee\xd7\xe7\x9a\x74\x1b\x8b\x24\x47\x65\x53\xc9\x60\x76\xe4\xe0\x11\xf3\xfb\x68\x29\x13\xf4\xaa\x80\x37\xb3\xb4\x93\xbf\x9e\xb8\xdd\xaf\xad\x75\x2d\xd8\x31\x71\x7a\x27\x68\xef\x90\xd4\xe2\x36\x69\xf7\x95\x46\x47\x4a\xab\x63\xa9\x3c\xd8\xc5\x22\xe3\x67\x1b\x78\x02\x7f\x26\x12\xd6\x2f\x6c\x89\x61\x2c\xdd\xf5\x1c\x67\x14\x2b\x2c\x3a\x67\xab\xc2\x33\xad\xef\xaa\xd4\xae\xf5\x57\x1a\xd5\x54\xee\x74\x69\x10\xd2\xd3\x2f\x3b\x5d\x9a\xca\x73\xec\xd5\x37\xdd\xc2\xc1\xf1\x33\x3d\xf1\x26\xbd\x66\x1a\x15\x1d\xde\xea\xa5\x9f\xf0\xb1\x2b\x46\xd8\xa9\x74\xa3\xa3\xb5\xee\xb9\x4a\x32\x39\xe1\xbf\x5f\x49\x5d\x31\xbe\x55\x49\x37\x14\x47\x7a\x3b\xe1\xc8\xb6\x1b\x6b\x51\x9c\x6a\x60\x8d\x44\xf1\x11\x25\x75\xfb\x20\x5f\x15\x71\x07\x97\x21\x5a\xb6\x9b\x74\x10\x71\xbb\xa8\x9c\x45\x6f\xea\xb8\xf3\x55\xa1\x7f\xb7\x5f\x0f\xd8\x60\x4b\xff\xfb\xcb\x36\xaf\xc9\x34\x57\x98\x9f\xe7\x21\x5e\xe9\xd0\xe4\x8d\x3a\xbc\x93\x8e\xaf\xec\xb1\xef\xe4\x5e\xb1\x69\xbd\xdf\x37\x68\xce\x28\xf5\x65\x5a\x75\x1e\x74\xef\x24\x7f\xca\xa9\x57\x82\xce\x3e\x5d\xa7\xfe\x65\xaf\xbd\xc1\x4e\x03\xee\x77\xcf\x9f\xed\xf6\xe9\x10\x70\x21\xfd\x9b\x1d\xe8\x95\x41\xa7\x01\x7c\x56\x75\xf5\x0f\x2c\xf7\xf9\xc9\xf2\x0a\xa3\xd5\xd5\xab\x64\xd8\xa0\x06\x85\xe5\x4e\x8a\x12\x47\x1c\xaf\xcb\x6f\xb8\x27\xba\x0a\x9f\x36\x18\xff\x2d\xbb\xa2\x4b\xfc\xd8\xb6\xa8\x41\xda\xbd\x51\x5f\xc5\x5e\x54\xfd\x36\x58\xdd\xc5\x6a\x5a\x5d\x23\x8d\xaa\x9f\x6d\x7e\x2f\x3b\x97\x9b\xe3\x9e\x1c\xbc\xe8\xa6\x0a\xbf\xd8\x04\x65\x1d\x0d\x3a\xae\x0a\xb5\x74\x6d\x8d\xde\x14\x42\xcc\xbb\x4f\x6e\xaf\x8e\x1b\x6e\xb4\x6b\x3a\xb7\x8d\xdb\x1a\xf5\x88\x24\x6d\xaf\x6d\xb4\xd9\xd6\x74\xdb\x12\x29\xec\xfd\xb0\x69\x16\x59\xda\xa6\x27\x64\xbb\x64\x30\x7e\x9f\x73\xa4\x01\x67\x11\xf6\x1b\x70\xa7\x60\x9e\x6a\xcf\x0d\xd9\xd6\x2a\xec\xb0\x0b\xbb\xbd\xb9\xde\x2c\xf9\x5f\x0d\x60\xd1\x40\x39\xd6\xa9\x6b\xfb\x78\xa4\x97\x85\xd7\x46\xab\x35\x13\xbe\xd4\xd0\x2b\x61\x0c\xe2\xdf\xb3\x52\xa3\x18\xbf\x19\xfd\xcf\x34\xef\x5c\x78\x69\xda\x4c\x6d\x2b\xcf\x77\xee\xb6\x99\x07\x70\xba\x9b\x17\x04\xdd\x7e\x5e\xe9\x47\xbd\xb2\x8d\x7a\xa5\x17\xf5\xea\xc8\xfb\x62\x3f\xcf\x10\xef\x45\xbb\xb7\x3b\x6c\x94\xc3\xf8\xd6\xcd\x11\x5f\x7d\xd8\xe8\x90\x39\x7d\xd8\xb0\xa1\x78\x66\x7e\x4c\x63\x41\xd5\xce\x1a\xf5\x22\x4e\x7b\x02\x31\x98\xea\xa5\xfe\xb5\x47\x37\xe6\x12\xc9\x96\x95\x8d\xd5\x8e\x5b\x5f\x03\x83\xe8\x5b\xd7\x7a\x35\x97\x73\x35\xd1\xa0\x92\x29\xd4\x37\xce\x5d\xca\xbd\xba\x6f\x5c\x37\xad\x24\xef\x3a\xb8\x9d\x48\xd5\x91\x7e\x6e\x3b\xc4\xf5\x13\x91\x74\x4e\x6c\x9d\xea\xb2\x93\x85\x9a\x40\xd3\x49\x34\x8e\xf9\x7c\x0e\xab\x14\x84\x34\x3f\x99\xc8\x4a\x50\xc8\x33\x7c\xc8\xc4\x06\xf4\x16\x85\xf9\x9d\x86\xdc\x6b\x77\x5c\x37\xbf\xbc\x88\x73\x85\x71\xf2\x6c\x7e\x97\x62\xa1\x63\xd2\x6f\x31\x8f\xb6\x95\xfd\xbe\xb3\xd7\x62\xf6\x72\x42\xbf\xc1\xfe\x42\x87\xb9\xe5\x68\xf8\xbd\xbf\x28\x23\x13\xd5\x3a\x19\x99\x35\x60\xda\x6e\xb4\xf7\x86\xeb\xc9\xbc\x10\xdd\xbc\x5f\x24\x58\x1c\x96\x93\x39\x1f\xfb\x89\x99\xfd\x2b\x00\x00\xff\xff\xf6\xa7\x9d\x37\x3c\x26\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
