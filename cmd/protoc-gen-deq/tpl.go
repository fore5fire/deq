package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x1a\xdb\x6e\xe3\xb8\xf5\x59\xfc\x8a\xb3\x46\x77\x61\x4d\x1d\x06\x7d\x35\x26\x0f\x83\x64\x3b\x0d\xd0\x99\x0d\x9a\x14\xfb\x30\x58\x14\x0a\x75\x6c\x0b\x91\x49\x0f\x45\x4f\x12\x18\xfa\xf7\xe2\x90\x14\x45\xdd\x1c\xcf\x6d\xbb\x6d\x03\xec\x5a\xe2\xe5\xdc\xef\x9a\xf3\xf3\x73\x76\x7e\x0e\xf0\x16\x25\xea\xcc\x60\x0e\x42\xe5\xc8\xe1\x4a\x81\x54\x06\xb6\x2a\x2f\x56\xcf\xdc\x1e\xa9\xd4\x5e\x0b\x5c\xc2\xe1\x00\xfc\xd6\x3e\x43\x5d\x33\x02\xb0\xcb\xc4\x43\xb6\x46\xbb\x73\xe3\x9f\xeb\x9a\xb1\x62\xbb\x53\xda\xc0\x9c\x25\x33\xa1\xa4\xc1\x27\x33\x63\xc9\x0c\xb5\x56\xba\xa2\xa7\xd5\xd6\x2e\x54\xcf\x52\xd0\xaf\x29\xb6\x38\x63\x2c\x99\xad\x0b\x53\x66\xf7\x5c\xa8\xed\xf9\x43\x66\xc4\x06\x2f\x55\x8e\xe7\x39\x7e\x9c\x1d\xdb\x3c\xcf\xc4\xc3\x8c\xa5\x8c\x99\xe7\x1d\xc2\x9d\xda\x15\xe2\x52\xc9\x55\xb1\x86\xca\xe8\xbd\x30\x70\x60\x89\xa1\xd5\x0a\xb6\xd9\xee\x43\x65\x74\x21\xd7\xbf\xb9\x1f\x56\x33\xb6\xda\x4b\x01\xef\xf1\x31\xba\x39\x4f\xe1\x55\x0c\xe8\xc0\x12\x8d\x66\xaf\x25\xfc\x14\x2d\x1f\x58\xe2\x01\x2f\x61\x9b\x3d\xe0\x7c\x00\x3e\x5d\xb0\xa4\x26\x1c\x87\xc3\x19\xe8\x4c\xae\x11\xf8\xdd\xf3\x0e\x2b\x2b\x26\x4b\xef\xe1\xc0\xdf\xaa\xf7\xd9\x16\xeb\xfa\xe7\x4f\x28\x4d\x44\xf4\xf5\x15\x24\x49\x92\x00\x80\x27\x36\x79\x57\xad\xc1\xad\xbc\x8a\xee\xb1\xe4\x52\x63\x66\xf0\xae\xd8\x22\x00\x90\x38\x39\x3d\xb3\xe4\x0a\x57\xd9\xbe\x34\xb7\x26\x33\x08\x39\x7e\xe4\x16\x85\x7d\x65\x89\x5b\xf5\x7f\xfd\xcd\x6b\x99\xe3\x13\x56\x6e\xf3\x43\x5f\x5a\x73\xd1\x91\x4f\x0a\xf6\xea\x9d\xea\x33\x33\x8f\xb0\xa6\x30\x7f\xd5\xdf\x5f\x80\x35\x8a\x14\x0e\x8c\x25\xc5\x0a\x90\x5b\xa8\xf0\xc3\x05\x08\x1e\x1d\xb6\xab\x73\x3a\x96\x34\x8a\x90\x45\xb9\x80\xd5\xd6\xf0\x9f\x09\xc2\x6a\x3e\x2b\xa4\x50\x5a\xa3\x30\x60\x75\x02\x3f\x56\xb3\x45\x03\x30\x25\x35\xb0\x64\x5b\xad\x61\x79\x01\x12\x1f\xe7\x64\xb2\x0e\x3a\xd4\x75\xca\x12\xd4\x9a\xb6\xb6\xd5\x9a\xff\x53\x6e\x33\x5d\x6d\xb2\x72\x8e\xfc\x26\x7b\x2e\x55\x96\xa7\x8e\x3a\xad\x89\x32\x59\x94\x47\x09\xd9\x37\xf7\x61\xe7\x6e\x2f\xe1\xc7\x4f\x33\xcb\xaa\xa7\xa3\xb1\xa5\xbe\x38\x08\xea\xf5\xd5\x12\xda\x3f\xe4\xd7\x57\x0b\x96\x90\xe2\xa3\xe5\x6d\xb5\xa6\xc5\x56\xeb\x4b\x7b\xb4\x7d\xa7\xdd\x58\xf7\x4b\x40\x1e\xbf\xd3\xbe\xdf\x08\x88\xc2\x86\x57\xfd\x32\x50\xe0\xde\xc9\x94\x17\xc4\x2d\x59\xc1\x84\x19\xf4\x19\xba\x53\x8d\x19\x0c\x54\x9f\xc2\x3c\x98\x46\xc7\x0c\xee\xf7\x2b\xfb\x4e\xea\x40\xfe\xae\x5a\xf3\x77\x5e\x1d\xc7\xb4\x10\x60\x1d\x6a\x7b\xbb\x23\xe8\x76\x73\x52\xc0\x37\x8d\xaa\xec\x1f\xd1\xf0\xfd\x04\x6c\x45\x16\x36\xc6\x0c\xfd\x54\x35\xbc\xa8\x85\xc6\x71\x9c\xff\x92\xc0\x8a\x15\x08\xb8\x18\xc8\x6f\x76\x38\xf0\x1b\xad\x8c\xfa\xeb\xbe\x2c\xdd\xdd\x99\x93\xa1\xf5\xa6\x05\xa8\x07\x52\x88\xe0\x2e\xe0\x7d\x98\x45\x48\x66\xbf\x59\xb0\xea\x21\x06\x68\xcf\x11\x84\xa3\x18\x26\x79\xb8\x45\x33\x60\xc3\xf9\xb5\x8f\xac\x84\x6b\x82\x1a\xb8\xf0\xd8\x6b\x46\x09\xac\x6f\x79\xd7\x06\x35\x14\x15\x64\x12\x0a\x43\xc9\x4f\x69\x58\x29\x3d\x38\x57\x71\xb8\x36\xb0\xc9\xdc\xc9\x1c\xa5\x29\x44\x56\x42\x21\x0d\xea\x55\x26\x10\x8c\x22\xf0\xc1\xb8\x08\xee\x02\xf0\x49\xe0\xce\x80\xd9\x64\xf4\x3f\x74\x91\x11\xb6\x68\x36\x2a\x07\x27\x8a\x0a\xb2\x01\x32\x3e\x9e\x0d\x2c\xad\x6d\x46\x20\x7a\x29\xf8\x77\x70\xb2\x44\xb8\x2c\x15\x4b\xd0\xf3\xfe\x1e\x9f\x4c\xc0\x4a\xe4\x48\x5a\x18\x86\x61\x0b\x50\xeb\x6b\x2b\x8f\x42\xc9\x4b\xb5\xdd\x95\x68\x10\x8a\x95\x17\x52\xa1\x24\x08\xbf\x9a\x2f\x40\x69\x92\x8a\x75\xdb\x05\x21\x22\xfd\x4b\x04\x25\xc4\x5e\x63\xce\xe1\x16\xb1\x2b\x19\x6e\x49\x21\x39\x6f\x95\x46\x28\xe4\x4a\xe9\xad\x05\xcb\xbd\x09\x14\x66\x18\x25\xe8\x66\x6a\xb9\x98\x0b\xf3\x04\xbe\x9a\xe0\x97\xee\xf7\x94\x94\xf2\x43\x61\x78\xd1\xe0\x1f\x49\x21\x53\x9c\x5b\xd3\x65\x49\x8e\x1f\x9d\x06\x97\x17\xd0\x40\x72\x31\x2d\x65\x2c\xc1\x10\xa9\x0a\xc3\x9d\x16\xf8\x54\x2a\x6c\x20\x7d\x56\x2e\x11\x4a\x7e\x42\x6d\x5a\x51\x82\x51\x03\xf5\x4d\xe5\x17\xec\xc5\x89\x69\x01\x5f\x96\xaa\x42\x27\x9c\x86\x49\xbf\x64\x83\x7d\xd7\x89\x6c\x20\xfa\x0e\x4e\x14\xe0\x7e\x43\x27\x6a\x69\x1d\x77\xa2\xb0\xff\x1f\x70\xa2\xd8\x87\xfa\x2e\xd4\xf1\xa1\x40\xe4\x29\x3e\x84\xba\xa3\xe4\x70\xf7\xab\xbd\x08\xf5\xb7\xf3\xa3\x06\xd6\xb8\x27\xa1\xfe\xaf\xf3\xa5\x48\xcc\xc7\x7d\x89\x1a\x01\x94\x39\x9c\xd5\xf6\xa5\x69\x0a\x6e\x51\x7f\x2a\x84\xef\x0b\x0e\x07\x30\xb8\xdd\x95\x54\x9e\xcf\x44\x59\xa0\x34\x33\xe0\xb4\xd5\xd9\xa9\xdc\x9d\x76\x2b\x86\x9b\xe3\xaa\x90\xd1\x75\x7b\xe2\x0c\xfe\xe4\x11\xd9\xc2\x77\x79\x01\xdc\x3e\xd0\x25\xef\x39\x7e\xa5\xae\x2f\xed\xc5\xc8\x6d\xf2\x7b\x57\x89\x58\xbf\xb9\x35\x4a\x23\x4b\xc4\x26\x93\x12\xcb\xd0\x9f\x4c\xf8\x50\xd3\x61\x0d\xc0\xcf\xf3\xfb\x08\xde\x02\xba\xf0\x16\x30\x02\x2f\xb5\x72\x77\x52\xf7\x34\x1e\x3a\x15\x75\xbc\x45\xe6\x90\xdf\x2f\x21\xbf\xa7\x8a\xca\x43\x5f\x36\x68\xec\x9a\x05\xba\xf4\x98\x9a\x76\x2d\xd4\x24\x3d\x78\x29\xdc\x3e\x4b\xf1\xa6\x2c\xef\xd4\x98\x27\x2d\x40\xe3\x56\xf9\x56\xab\xb9\x61\x1d\x89\x68\x44\xad\x85\xed\x31\xa8\x55\x24\x12\x7c\xfa\x84\xbf\xa4\x2c\x79\xb4\x9d\x09\x75\xc4\xfc\xd7\xac\x30\x6f\xb5\xda\xef\x0e\x35\x4b\x84\x79\x5a\x80\xc8\xa4\xc0\xd2\xd6\x5f\x1e\xe1\xaf\x85\xd9\x5c\xda\x55\xa2\x23\x25\x0f\x6b\x8d\x29\x74\x98\xc9\xe3\x9a\xbf\xc9\xf3\x39\x21\x58\x2b\x20\xae\xbc\xe7\xe6\xb8\x42\x0d\x8f\x6b\x7e\xa5\x24\x5a\x07\x0c\xba\xb4\x55\x5e\x7e\xcf\x2f\xdd\xfb\x5c\xf0\x46\x5c\x20\x1a\xbf\x1c\x56\x98\x69\x00\xea\x4f\x07\xa3\x67\x49\xd3\x5c\x35\x3b\x24\x43\x27\xc0\x46\x60\x74\x7b\xe8\xc8\x49\x85\x25\x3a\xe3\xb3\xc0\xa9\xba\x5e\xd2\xb3\xc8\x2a\x04\x2b\xce\xd7\x67\xf4\x6b\x17\x6b\x66\xff\xab\xa9\x4d\xf0\xce\x40\xbe\x10\x33\x0e\x2c\x21\x91\x90\x80\xe9\x54\x22\x2c\x89\x04\x28\x75\x17\x43\x1f\xf8\xfa\x8c\x56\x59\xe2\x24\x3f\xb7\x0a\x6a\xee\xb5\x31\x41\x6b\x56\xc3\x78\x73\x1f\x59\x50\xd7\xe9\x5a\x53\x7a\x4b\x25\x6e\xd4\x85\xba\xd0\x36\x6a\x56\x45\x1e\xca\x5e\x8a\xd5\xfd\x4b\x51\xb4\x4e\xd8\xd7\x2b\x72\x4a\x8f\x4d\xd4\x0d\xa1\xba\x39\xf2\x16\xcd\xbc\x78\xb9\x49\x0e\x6d\x19\x76\xa1\xfc\x01\xa3\xbd\x23\xb0\xdf\x65\x4d\xeb\xf2\xcd\x63\x56\xfc\xaf\x68\xd3\xf2\xe2\xbc\xf3\xff\x5b\xa9\xb7\xfb\xfb\x53\x55\xba\xc9\x64\x5e\xa2\x76\x91\x66\xb0\x3b\x32\xfc\xc8\xc4\x03\xbf\x54\x39\x46\xf9\xe1\xbb\x69\xda\xf3\x1f\xc2\xef\xfe\xde\x69\xd7\x11\x3b\xc6\x4e\x6f\x6c\x17\x0d\x6a\x5a\xba\x6d\x54\xfe\x4c\xa5\xdb\x40\x3f\x16\xe9\x93\x5d\x26\x0b\x71\xb2\x82\x67\xf0\x67\x02\xe1\xec\xc2\x25\x1f\xab\xe9\xae\xe5\x78\xa5\x38\x66\xd1\x1b\x5b\x9d\x9e\xa8\x7d\x5f\xaf\x74\xb5\x4f\x25\xde\x5c\xed\x4c\xe5\x0a\x73\x83\xfa\x97\x9d\xa9\x6c\x4d\x32\x76\xf4\xbb\xba\x70\x32\x3d\x48\x24\xdc\x24\x57\xaa\x3e\x97\x00\xe1\xea\x7b\x7c\xec\xb2\x91\x76\x6a\x20\x3e\x59\x05\x9d\x2a\xa4\x50\x07\xbf\x2c\xa4\xb6\x35\xfb\xfd\x85\x14\x70\x4f\x08\xa9\xcb\xc6\xd7\x0a\xe9\x86\xe2\x48\xcf\x13\x26\xdc\x6e\x6c\x4c\x7a\xac\x39\x1b\x89\xe2\x23\x42\xea\xce\x62\xbf\x28\xe2\x0e\x3e\x53\x18\xd5\x3a\xe9\x20\xe2\x76\xa9\xf2\x1a\xbd\x69\xe2\xce\x17\x85\xfe\xdd\xfe\x7e\x80\x06\x5b\xf8\x7f\xbc\x6c\xf3\x39\x99\xe6\x0a\xcb\xd3\x2c\x24\x2a\x1d\x42\xde\x68\xc2\x3b\xc9\xf8\xca\x79\xcc\x94\x9b\xb8\x8c\xde\x6f\x16\x43\xf5\xfa\xce\x0e\x58\x5c\x13\x7a\x02\xd5\x51\x3b\x77\xcc\x9e\xaf\x25\x55\xc5\x5d\x7b\xfe\x65\x6f\xa2\xc5\xce\xb4\xe1\x5f\x91\x29\x3b\xcf\xe9\x00\xf0\xd1\xfc\xab\x6d\xe7\x33\xe3\x4d\x20\xf8\xa4\xc2\xea\x1f\x58\xed\xcb\xa3\x95\x15\xf2\xeb\xab\xcf\xe2\x61\x8d\x06\x34\x56\x3b\x25\x2b\x1c\xb1\xb9\x2e\xbe\xa1\x3b\x74\x05\x3e\x0f\x34\x7e\x13\x87\xe8\x02\x9f\xf2\x88\x86\x48\xe7\x16\xf1\x20\x24\x6a\xd7\xa2\xd1\x45\x98\x6f\x8c\x4c\x27\xfe\xe6\x52\x7b\x15\x0d\x12\x0f\x13\x96\x9c\xbc\x68\xa6\x1a\x3f\xba\xdc\xe4\x0c\x0d\x3a\xa6\x0a\x0d\x77\x6d\x79\x1e\x6a\xa0\xc0\x44\x6d\x53\x41\x9f\x48\xf2\x9a\xce\xe4\x71\xd3\x50\x3d\xc2\x49\x3b\x60\x19\x9d\xb0\x84\x11\x4b\xae\xa4\xfb\x68\x6b\x27\x08\x0e\xb6\x1d\x14\xb8\x51\x09\x9c\x32\x7c\x71\x84\xf5\x87\x2f\xc7\xa8\x3b\x71\x34\xe3\x04\xd6\xc1\x92\x76\xc7\x33\xbd\x5d\xb2\xb6\x06\xef\x32\x50\x30\x35\xac\x69\x47\x39\x24\x85\x65\x34\x49\x69\xe4\x90\xbe\x34\xd3\xa9\x60\x8c\xc4\xbf\x17\x95\x41\x39\x3e\x1c\xfd\x7d\xe6\x37\x3e\x98\x84\x71\x43\x3b\xcd\x89\x4d\xb9\x9d\xe7\x00\x1c\x1f\xe8\x24\x49\x77\xa4\x53\xc5\x31\xae\x6a\x63\x5c\x15\xc5\xb8\x26\xce\xbe\x38\xd2\xb1\xc0\xfb\x43\x9d\xef\xd6\x55\x54\xc3\x68\xd6\xcd\x08\x5f\xdc\x55\x74\xc0\x1c\xef\x2a\x5c\xe0\x5d\xd8\x7f\x25\xe3\x88\x6a\x8c\x95\xf7\xe2\x4b\xdb\x6a\x58\x9a\x9a\xab\xf1\x37\xd7\x6e\x84\x25\x90\x2d\x2a\x17\x99\x3d\xb6\xbe\x04\x06\xb1\xb6\x29\xea\x1a\x2c\xa7\x4a\x22\x50\xa5\x56\xd0\x7c\x33\xe9\x42\xee\x15\x78\xe3\xb2\x69\x39\xf9\xa9\x43\xb7\x67\xa9\x9e\x98\xeb\xb5\x4b\xc2\x3c\x11\x48\x6f\xc4\xce\xa8\x2e\x3a\x39\x27\x4c\x60\x3b\x69\xc5\x23\x3f\x3f\x87\xeb\x15\x48\x65\x3f\x9c\x14\x15\x68\x14\x05\x7e\x2a\xe4\x1a\xcc\x06\xa5\xfd\x56\xa3\xf6\xc6\xf7\xe5\xf6\xeb\x4b\x56\x6a\xcc\xf2\x67\xfb\x45\xca\x91\x8e\x79\x7f\xd4\x38\x3a\x5e\x8c\xe7\x8f\xd1\xa8\x31\xca\x00\xfd\x19\xeb\x0b\x93\xc6\x16\xa3\xc5\xf7\xfa\xac\xe2\x36\xaa\x75\xf2\x2f\x0b\xc4\xb4\x53\xc9\xe8\x84\x1f\xbe\xbc\x10\xdd\xa2\x2f\x12\x8e\x0e\x87\x69\xf8\x3d\xe2\xdf\x01\x00\x00\xff\xff\xf7\x89\x44\x37\x15\x26\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
