package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x8f\xdb\xb8\x11\x7f\x16\xff\x8a\x39\xa3\x77\xb0\x52\x2f\x8d\xbe\x1a\xd9\x87\xc0\x7b\x4d\x0d\x34\xb9\x45\x77\x8b\x7b\x08\x0e\x85\x4c\x8d\x6d\x61\x25\xd2\xa1\xe8\xec\x2e\x0c\xfd\xef\xc5\x90\x94\x44\x7d\xd8\xeb\x4d\x9a\xe2\x5a\xdc\x02\x89\x25\x7e\xcc\x0c\xe7\x9b\x3f\xcd\xe7\x73\x36\x9f\x03\xbc\x47\x89\x3a\x31\x98\x82\x50\x29\x72\xb8\x51\x20\x95\x81\x42\xa5\xd9\xe6\x99\xdb\x25\xa5\x3a\x68\x81\x0b\x38\x1e\x81\xdf\xd9\x67\xa8\x2a\x46\x04\xf6\x89\x78\x48\xb6\x68\x67\x6e\xfd\x73\x55\x31\x96\x15\x7b\xa5\x0d\x4c\x59\x34\x11\x4a\x1a\x7c\x32\x13\x16\x4d\x36\x85\xfd\x29\x9f\xa5\xa0\x5f\x93\x15\x38\x61\x2c\x9a\x6c\x33\x93\x27\x6b\x2e\x54\x31\x7f\x48\x8c\xd8\xe1\x52\xa5\x38\x4f\xf1\xf3\xe4\xdc\xe4\x3c\x11\x0f\x13\x16\x33\x66\x9e\xf7\x08\xf7\x6a\x9f\x89\xa5\x92\x9b\x6c\x0b\xa5\xd1\x07\x61\xe0\xc8\x22\x43\xa3\x25\x14\xc9\xfe\x53\x69\x74\x26\xb7\xbf\xb9\x1f\x56\x31\xb6\x39\x48\x01\x1f\xf1\x31\xd8\x39\x8d\xe1\x4d\x48\xe8\xc8\x22\x8d\xe6\xa0\x25\xfc\x14\x0c\x1f\x59\xe4\x09\x2f\xa0\x48\x1e\x70\x3a\x20\x1f\xcf\x58\x54\x11\x8f\xe3\xf1\x0a\x74\x22\xb7\x08\xfc\xfe\x79\x8f\xa5\x55\x8e\x95\xf7\x78\xe4\xef\xd5\xc7\xa4\xc0\xaa\xfa\xf9\x0b\x4a\x13\x08\xbd\xba\x81\x28\x8a\x22\x00\xf0\xc2\x46\x1f\xca\x2d\xb8\x91\x37\xc1\x3e\x16\x2d\x35\x26\x06\xef\xb3\x02\x01\x80\xd4\xc9\xe9\x99\x45\x37\xb8\x49\x0e\xb9\xb9\x33\x89\x41\x48\xf1\x33\xb7\x2c\xec\x2b\x8b\xdc\xa8\xff\xeb\x4f\xae\x64\x8a\x4f\x58\xba\xc9\x4f\x7d\x6d\x4d\x45\x47\x3f\x31\xd8\xad\xf7\xaa\x7f\x98\x69\xc0\x35\x86\xe9\x9b\xfe\xfc\x0c\x50\x6b\xa5\x63\x38\x32\x16\x65\x1b\x40\x6e\xa9\xc2\x0f\xd7\x20\x78\xb0\xd8\x8e\x4e\x69\x59\x54\x1b\x42\x66\xf9\x0c\x36\x85\xe1\x3f\x13\x85\xcd\x74\x92\x49\xa1\xb4\x46\x61\xc0\xda\x04\x7e\x2c\x27\xb3\x9a\x60\x4c\x66\x60\x51\x51\x6e\x61\x71\x0d\x12\x1f\xa7\xe4\xa8\x8e\x3a\x54\x55\xcc\x22\xd4\x9a\xa6\x8a\x72\xcb\xff\x29\x8b\x44\x97\xbb\x24\x9f\x22\xbf\x4d\x9e\x73\x95\xa4\xb1\x93\x4e\x6b\x92\x4c\x66\xf9\x59\x41\x0e\xf5\x7e\xd8\xbb\xdd\x0b\xf8\xf1\xcb\xc4\x1e\xd5\xcb\x51\xfb\x52\x5f\x1d\x44\x75\x75\xb3\x80\xf6\x0f\xf9\xea\x66\xc6\x22\x32\x7c\x30\x5c\x94\x5b\x1a\x6c\xad\xbe\xb0\x4b\xdb\x77\x9a\x0d\x6d\xbf\x00\xe4\xe1\x3b\xcd\xfb\x89\x86\x51\x33\xe1\x4d\xbf\x68\x24\x70\xef\xe4\xca\x33\x3a\x2d\x79\xc1\x09\x37\xe8\x1f\xe8\x5e\xd5\x6e\x30\x30\x7d\x0c\xd3\xc6\x35\x3a\x6e\xb0\x3e\x6c\xec\x3b\x99\x03\xf9\x87\x72\xcb\x3f\x78\x73\x9c\xb3\x42\x43\xeb\x58\xd9\xdd\x1d\x45\xb7\x93\x27\x15\x7c\x5b\x9b\xca\xfe\x91\x0c\xdf\x4f\xc1\x56\x65\xcd\xc4\x98\xa3\x5f\x6a\x86\x17\xad\x50\x07\x8e\x8b\x5f\x52\x58\xb6\x01\x01\xd7\x03\xfd\x4d\x8e\x47\x7e\xab\x95\x51\x7f\x3d\xe4\xb9\xdb\x3b\x71\x3a\xb4\xd1\x34\x03\xf5\x40\x06\x11\xdc\x25\xbc\x4f\x93\x80\xc9\xe4\x37\x4b\x56\x3d\x84\x04\xed\x3a\xa2\x70\x96\xc3\xc9\x33\xdc\xa1\x19\x1c\xc3\xc5\xb5\xcf\xac\xc4\xeb\x84\x34\x70\xed\xb9\x57\x8c\xca\x56\xdf\xf3\x56\x06\x35\x64\x25\x24\x12\x32\x43\x25\x4f\x69\xd8\x28\x3d\x58\x57\x72\x58\x19\xd8\x25\x6e\x65\x8a\xd2\x64\x22\xc9\x21\x93\x06\xf5\x26\x11\x08\x46\x11\xf9\xc6\xb9\x88\xee\x0c\xf0\x49\xe0\xde\x80\xd9\x25\xf4\x1f\xba\xcc\x08\x05\x9a\x9d\x4a\xc1\xa9\xa2\x84\x64\xc0\x8c\x8f\x57\x03\x2b\x6b\x5b\x11\x48\xde\x30\x59\xd3\x34\x8b\x84\x2b\x52\xa1\x02\xfd\xd1\x3f\xe2\x93\x69\x98\x92\x34\x92\x06\x86\x59\xd8\x12\xd4\x7a\x65\xd5\x91\x29\xb9\x54\xc5\x3e\x47\x83\x90\x6d\xbc\x8e\x32\x25\x41\xf8\xd1\x74\x06\x4a\x93\x52\x6c\xd4\xce\x88\x11\x99\x5f\x22\x28\x21\x0e\x1a\x53\x0e\x77\x88\x5d\x29\xb9\x15\x85\xd4\x5c\x28\x8d\x90\xc9\x8d\xd2\x85\x25\xcb\xbd\x07\x64\x66\x98\x24\x68\x67\x6c\x4f\x31\x15\xe6\x09\x7c\x0b\xc1\x97\xee\xf7\x92\x8a\xf2\x43\x66\x78\x56\xf3\x27\x22\xc3\x22\x72\xea\xf0\xd6\x79\x59\x94\xe2\x67\x67\xc3\xc5\x35\xd4\xc4\x5c\x56\x8b\x19\x8b\xb0\xc9\x55\x99\xe1\xce\x10\xfc\x54\x31\xac\x29\xbd\xaa\x9a\x08\x25\xbf\xa0\x36\xad\x36\xc1\xa8\x81\x05\x4f\x55\x18\xec\x65\x8a\xd3\x3a\x5e\xe6\xaa\x44\x57\x61\xeb\x43\xfa\xa1\xba\x7d\x41\x99\xc2\x55\x65\x5f\xea\x56\xe6\x0e\xf5\x97\x4c\xf8\x6e\xe6\x78\x04\x83\xc5\x3e\xa7\xa6\x62\x22\xf2\x0c\xa5\x99\x00\xa7\xa9\xce\x4c\xe9\xf6\xb4\x53\x21\xdd\x14\x37\x99\x0c\xb6\xdb\x15\x57\xf0\x27\xcf\xc8\x96\xeb\xc5\x35\x70\xfb\x40\x9b\x7c\xd0\xf8\x91\xaa\x5a\xda\x8d\x41\xc4\xa4\xeb\xb6\xbf\x71\x93\x2c\x12\xbb\x44\x4a\xcc\x9b\xae\xea\x44\xfc\xd4\x7d\xe1\x80\xfc\x34\x5d\x07\xf4\x66\xd0\xa5\x37\x83\x11\x7a\xb1\xd5\xbb\xd3\xba\x97\xf1\xd8\xe9\x03\xc2\x29\x72\x87\x74\xbd\x80\x74\x4d\x75\xc0\x53\x5f\xd4\x6c\xec\x98\x25\xba\xf0\x9c\xea\x26\xb3\xc9\xa4\x3d\x7a\x31\xdc\x3d\x4b\xf1\x2e\xcf\xef\xd5\x58\x18\xcd\x40\x63\xa1\x7c\x83\x58\xef\xb0\x51\x44\x32\xa2\xd6\xc2\x76\x46\xd4\xe0\x92\x08\x3e\xea\xe1\x2f\x31\x8b\x1e\x6d\x3f\x45\x7d\x3c\xff\x35\xc9\xcc\x7b\xad\x0e\xfb\x63\xc5\x22\x61\x9e\x66\x20\x12\x29\x30\xb7\x55\xc3\x33\xfc\x35\x33\xbb\xa5\x1d\xb5\x91\x48\xd1\xd5\x3a\x53\xd3\x17\x47\x8f\x5b\xfe\x2e\x4d\xa7\xc4\x60\xab\x80\x4e\xe5\x5b\xbf\x14\x37\xa8\xe1\x71\xcb\x6f\x94\x44\x1b\x7e\x8d\x2d\x6d\x6d\x4a\xd7\x7c\xe9\xde\xa7\x82\xd7\xea\x02\x51\xc7\xe5\xb0\x2e\xc6\x0d\x51\xbf\xba\x71\x7a\x16\xd5\x2d\x21\x69\x85\xf4\xe7\x94\x57\x2b\xab\xb1\x3a\x91\x18\x46\x73\x54\x62\x8e\xce\x03\x2d\x07\x6a\x0c\x16\xf4\x2c\x92\x12\xc1\xea\xf4\xed\x15\xfd\xda\xc1\x8a\xd9\x7f\x15\x75\x38\x3e\x22\x28\x20\xc2\xd3\x03\x8b\x48\x2f\xa4\x65\x5a\x15\x09\x2b\x27\x11\x8a\xdd\xc6\xa6\x85\x7d\x7b\x45\xa3\x2c\x72\xea\x9f\x5a\x2b\xd5\xfb\xda\xc4\xa0\x35\xab\x60\xfc\x5e\x12\xb8\x51\x37\xf2\x5a\x7f\x7a\x4f\xd5\x39\x68\xa0\x5d\x7e\x1b\xf5\xad\x2c\x6d\x2a\x36\x65\xeb\xfe\xa6\x20\x5f\x47\xec\xdb\xad\x79\xca\x98\x75\xea\x6d\xb2\x75\xbd\xe4\x3d\x1a\x67\xd6\xec\xe5\x26\xbf\x69\x2b\xb1\x4b\xea\x77\x98\xf7\x9d\x80\xfd\x2e\xf1\xb4\x41\xdf\x3d\x26\xd9\xff\x8b\x49\xed\x59\xfe\x30\x6a\x0c\x77\x87\xf5\xa5\x26\xdd\x25\x32\xcd\x51\xbb\x74\x33\x98\x1d\xb9\xbc\x25\xe2\x81\x2f\x55\x8a\x41\xa5\xf8\x6e\x96\xf6\xe7\xaf\x27\xee\x0e\x6b\x67\x5d\x27\xec\xd8\x71\x7a\xb0\x43\x70\xd1\x6c\xe5\xb6\xa9\xf9\x95\x46\x47\x4a\xbd\x63\xe9\x3e\xda\x27\x32\x13\x17\x1b\x78\x02\x7f\x26\x12\xce\x2f\x5c\x19\xb2\x96\xee\x7a\x8e\x37\x8a\x3b\x2c\x7a\x67\xab\xe2\x0b\xad\xef\x3b\x97\xae\xf5\xa9\xd9\x9b\xaa\xbd\x29\xad\x84\xf4\xf6\xcb\xde\x94\xb6\x3b\x19\x5b\xfa\x5d\x43\x38\x3a\x0d\x84\x10\x6f\xd2\x2b\xf5\xa1\x74\x01\xae\xb7\x7e\xc4\xc7\xee\x31\xe2\x4e\x37\xc4\x4f\xf6\x43\x97\x2a\xc9\x5e\xb2\xff\xf7\x95\xd4\x3d\xc6\xb7\x2a\xe9\x96\xf2\x48\x2f\x12\x4e\x84\xdd\x18\xcc\x73\xee\x8e\x36\x92\xc5\x47\x94\xd4\xc5\x92\xbe\x2a\xe3\x0e\x60\x56\xa3\xda\x20\x1d\x64\xdc\xae\x54\xde\xa2\xb7\x75\xde\xf9\xaa\xd4\xbf\x3f\xac\x07\x6c\xb0\xa5\xff\xfb\xab\x36\xaf\xa9\x34\x37\x98\x5f\xe6\x21\x41\xeb\xd0\xd4\x8d\x3a\xbd\x93\x8e\x6f\xdc\xd5\xe0\x6c\xac\xb8\xb2\xde\xbf\x3b\x36\x7d\xec\x07\x0b\xb5\xb8\x3b\xe9\x05\xa2\x07\xb7\xbb\x73\x4e\xbd\x92\xd4\x1f\x77\x9d\xfa\x97\x83\x09\x06\x3b\xc8\xc3\xbf\x02\x7f\x76\xe1\xd3\x21\xe0\x53\xfa\x37\x3b\xd0\x2b\x93\x4e\x23\xf0\x45\xdd\xd5\x3f\xb0\x3c\xe4\x67\xdb\x2b\xe4\xab\x9b\x57\x9d\x61\x8b\x06\x34\x96\x7b\x25\x4b\x1c\x71\xbc\x2e\xbf\x61\x4c\x74\x15\x3e\x6d\x64\xfc\x8f\x44\x45\x97\xf8\xa9\xb0\xa8\x85\x74\xb1\x11\xe2\x22\xc1\xc5\x2d\x40\x32\x1a\xb8\x63\x04\xac\xf8\x9b\xab\xef\x65\x00\x29\x1e\x4f\x78\x72\xf4\xa2\x9b\x6a\xfc\xec\x0a\x94\x73\x34\xe8\xb8\x2a\xd4\xa7\x6b\x7b\xf4\xa6\x11\x6a\x0e\x51\xd9\x7a\xd0\x17\x92\xa2\xa6\x83\x41\xee\x6a\xa9\x47\x4e\xd2\xe2\x2d\xa3\x80\x4b\x83\xb8\xa4\x4a\xba\x2f\x4f\x16\x50\x70\xb4\x2d\x6e\xe0\x90\x13\xb8\x04\x8b\x71\x82\xf5\xb1\x98\x73\xd2\x5d\x88\xd4\x38\x85\x75\xb8\xc4\x5d\xb4\xa6\x37\x4b\xde\x56\xf3\x5d\x34\x12\x9c\xc2\x6e\x5a\x64\x87\xb4\xb0\x08\x80\x95\x5a\x0f\xf1\x4b\x10\x4f\x09\x63\x22\xfe\x3d\x2b\x0d\xca\x71\xa0\xf4\xbf\x03\xe7\xf8\x64\xd2\x00\x0f\x2d\xb8\x13\xba\x72\x0b\xef\x00\x9c\xc7\x77\xa2\xa8\x8b\xf0\x94\x61\x8e\x2b\xdb\x1c\x57\x06\x39\xae\xce\xb3\x2f\x22\x3c\x96\x78\x2f\xb7\x7d\xbf\xab\x45\x39\xcc\x66\xdd\x8a\xf0\xd5\x57\x8b\x0e\x99\xf3\x57\x0b\x97\x78\x67\xf6\x03\xbf\x13\xaa\x76\x56\xde\xcb\x2f\xed\x7d\xc3\xca\x54\x6f\x0d\x3f\x1c\x75\x33\x2c\x91\x6c\x59\xb9\xcc\xec\xb9\xf5\x35\x30\xc8\xb5\x75\x67\x57\x73\xb9\x54\x13\x8d\x54\x6a\x03\xf5\xd7\x93\x2e\xe5\x5e\x97\x37\xae\x9b\xf6\x24\x3f\x75\xe4\xf6\x47\xaa\x4e\x20\x7c\xed\x90\x30\x4f\x44\xd2\x3b\xb1\x73\xaa\xeb\x4e\xcd\x69\x00\xd9\x4e\x59\xf1\xcc\xe7\x73\x58\x6d\x40\x2a\xfb\x05\x25\x2b\x41\xa3\xc8\xf0\x4b\x26\xb7\x60\x76\x28\xed\x67\x1b\x75\x30\xfe\x72\x6e\x3f\xc4\x24\xb9\xc6\x24\x7d\xb6\xdf\xa6\x9c\xe8\x98\xf6\x41\xc7\x51\xa0\x31\x44\x22\x03\xd0\x31\xa8\x00\x7d\xc8\xf5\x05\xcc\xb1\xe5\x68\xf9\xbd\xbd\x2a\xb9\xcd\x6a\x9d\xfa\xcb\x1a\x61\x5a\x7c\x32\x58\xe1\x11\x98\x17\xb2\x5b\xf0\x81\xc2\xc9\xe1\x38\x0d\x3f\x4f\xfc\x3b\x00\x00\xff\xff\xc2\x78\xf0\x19\xd0\x22\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
