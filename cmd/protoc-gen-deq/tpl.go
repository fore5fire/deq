package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x38\xf2\x7f\x2d\x7d\x8a\x59\xe3\xbf\x85\xd5\x75\x64\xfc\xdf\x1a\xed\x8b\x22\xb9\xeb\x06\xb8\xed\x06\x97\x1c\xf6\x45\xb1\x28\x14\x6a\xe4\x10\x91\x48\x97\xa2\x9b\x04\x86\xbe\xfb\x61\x48\x8a\xa2\x1e\xec\x38\x69\x72\x5b\xe0\x2e\x40\x6b\x4b\x14\x67\x7e\xf3\xc0\x79\xb2\x96\xcb\x65\xbc\x5c\x02\x7c\x44\x81\x2a\xd3\x98\x03\x93\x39\xa6\x70\x26\x41\x48\x0d\x95\xcc\x79\xf1\x90\x9a\x47\x6a\xb9\x55\x0c\x57\xb0\xdb\x41\x7a\x69\xbe\x43\xd3\xc4\x44\x60\x93\xb1\xdb\x6c\x8d\x66\xe5\xc2\x7d\x6f\x9a\x38\xe6\xd5\x46\x2a\x0d\xf3\x38\x9a\x31\x29\x34\xde\xeb\x59\x1c\xcd\x8a\x8a\x3e\x76\xbb\x13\xe0\x05\xa4\xbf\x66\xf5\x6f\xa8\x6f\x64\x5e\xd3\x96\x68\x56\x3f\x08\x46\x4f\xd5\x5a\x71\xb1\xae\xdd\x93\x28\x72\xb3\xbc\xdb\xd1\x9e\xab\x87\x0d\xd6\x4d\x33\xd3\xbc\xc2\xd9\x6e\x87\x22\x27\x6e\xd1\x6c\xcd\x75\x99\x5d\xa7\x4c\x56\xcb\xdb\x4c\xb3\x1b\x3c\x95\x39\x2e\x73\xfc\x3a\x6b\x77\x06\xdc\x4e\x0c\xbb\xbd\x5b\x96\x19\xbb\xed\x33\x4f\xe2\x98\xae\x54\x26\xd6\xe8\x30\x18\x29\xf5\xc3\x86\x44\x4f\x3f\xca\x4f\x59\x85\x4d\xf3\xb7\x6f\x28\x34\xd4\x5a\x6d\x99\x86\x5d\x1c\x9d\x9f\x41\x14\x45\x11\x00\x58\x99\xe2\xe8\x54\x61\xa6\xf1\x8a\x57\x08\x00\x24\x44\x4a\xdf\xe3\xe8\x0c\x8b\x6c\x5b\xea\x4b\x9d\x69\x84\x1c\xbf\xa6\x86\x94\xb9\x8c\x23\x7b\xd7\xfd\x0d\x17\xcf\x45\x8e\xf7\x58\xdb\xc5\xcf\x7f\x3a\x46\x04\xdf\xc3\x82\xb7\xc1\x45\xdc\xe2\xfe\x12\xdc\xbc\x92\x1b\xce\x4e\xa5\x28\xf8\x1a\xb8\xd0\xa8\x8a\x8c\x21\x49\x60\x38\x5d\xc9\xa1\x8c\x73\x8f\x22\x81\xf9\xdb\xe1\xea\x02\x50\x29\xa9\x12\x62\xb5\x5c\x8e\x14\x74\xae\x51\x01\xaf\x21\x13\xc0\x35\xb9\x9e\x54\x50\x48\x35\x7a\xae\x4e\xe1\x5c\xc3\x4d\x66\x9f\xcc\x51\x68\xce\xb2\x32\xc0\xa7\x25\x91\xf7\x50\x88\xee\x02\xf0\x9e\xe1\x46\x83\xbe\xc9\xe8\x3f\x04\x6b\x93\xca\x98\x1e\x14\xea\xad\x12\x35\x64\x23\x66\xe9\xb4\x31\x2d\xd6\x50\x23\x9f\xf0\x5e\xcf\x99\xbe\x07\xe7\xd7\xe9\xa9\xfd\x3c\xa8\x88\xe8\xb4\x94\x35\xce\x93\x49\xe5\x77\x8c\x3a\xcf\x21\xc5\x84\xc6\xa6\xe5\x38\x62\xd6\x42\x7b\x2c\xe7\xd4\x4d\x00\xbd\xa0\xa4\x01\x41\x37\xc6\xd0\x0c\x6d\xa5\xce\x8d\x09\xb8\x14\xa7\xb2\xda\x94\xa8\x91\xce\x26\x6f\x6f\x02\x73\x77\xf3\x05\x48\x45\x86\x30\x12\x2d\x88\x11\x2f\x40\x0a\x04\xc9\xd8\x56\x61\x9e\xc2\x25\x62\x1f\x70\x6a\xa0\x90\x69\x2b\xa9\x10\xb8\x28\xa4\xaa\x0c\xd9\x34\x2e\xb6\x82\xc1\x9c\x6b\x78\x3b\xa9\x8a\x04\x9e\xa3\x67\xd8\xc5\x71\xc4\x0b\xf8\x89\xeb\x94\xb7\x00\x88\x08\xad\x44\x91\x55\x0a\x08\x5e\xee\x97\x3e\x8e\x9a\x38\x8a\xa3\x1c\xbf\x5a\xc7\x59\xbd\x87\x96\x98\xf5\xfc\x24\x8e\x23\x34\x0c\xdd\x9a\x35\x4a\x7a\xe0\xa4\xd8\x83\x62\x90\xd1\xb6\x9f\xde\x13\x84\x11\xa2\xa2\xd2\x84\x48\xaa\x62\x4e\x31\xf3\x1b\x2a\xdd\xa9\x13\xb4\x1c\x99\x70\x05\x3f\x7f\x9b\x19\x24\x09\xa1\x8e\x5b\x6a\xb8\x20\x82\xe4\x0d\x8f\x2a\xd9\xb9\xa5\xf5\x38\x2b\x65\xe7\xa9\xbb\x9d\x89\x7f\x14\x2d\xe9\xbb\x8b\x7e\x97\xa8\xbe\x71\x66\x03\x60\x7b\x64\xc6\x41\xa4\xf3\x64\x4d\x77\x6b\xa8\xb2\xcd\x67\x1b\x9b\xda\x10\xd5\xe2\xfb\x84\x77\x53\x24\xe6\x89\x09\x5b\x63\xd2\x3b\x2f\xe8\x9b\xa9\x75\x52\xab\xe5\xb9\x82\x2a\xbb\xc5\xf9\x88\x73\xb2\x20\x75\x19\xf9\xfe\xcf\x49\x43\x54\xc8\x9c\x86\x9c\x91\xb8\x13\xd8\x87\x7b\xab\x4d\x46\xb0\xc2\x7d\x3d\xee\x09\xec\xf3\x83\xe0\x6c\x1c\xe3\xc2\x98\x1a\xaa\xe4\x2c\x2c\x1d\x9e\xf7\xf9\xd8\x9f\x43\xef\xe1\x82\x49\xa5\x90\x91\xd7\x10\x8d\x9f\x6b\x72\x13\x4b\xd0\xb9\x4a\x55\xaf\x49\x5e\x81\x77\x73\x4a\xdd\x96\x3a\x34\x4d\x12\x47\xce\xb3\xab\x7a\x9d\xfe\x4b\x54\x99\xaa\x6f\xb2\x72\x8e\xe9\x45\xf6\x50\xca\x2c\x7f\x92\x1b\x6f\xdb\xfd\xb0\xb1\xbb\xf7\xb9\xec\x9b\xa1\x3a\x88\xea\xf9\xd9\x0a\xba\x3f\x4c\xcf\xcf\x16\x71\x14\xe6\xb5\x60\xb9\xaa\xd7\xb4\xd8\xa5\xd7\x95\xd9\xd2\x5d\xd3\x6a\x98\x64\x57\x80\x69\x78\x4d\xeb\x6e\xc1\x33\xf4\x0b\x2e\xc7\xae\x3c\x12\x7b\x4d\x7e\x34\x38\x6b\x8f\x79\xc7\x50\xce\x2b\xd9\x7a\xc7\xc8\x23\x12\xe8\xb2\x6c\xcf\x3b\xae\xb7\x85\x8f\x3f\x18\xfa\x46\xfa\x9b\xb3\xd6\x21\x23\x79\x9a\xbb\xc6\x50\xe9\xd9\xa1\x5b\xdc\xab\xff\x8b\xd6\x92\xe6\x8f\xb0\xbc\x9e\xde\x8d\xea\xfc\xc2\xd4\x39\x78\x35\xeb\xb4\xe7\xcc\x86\x0c\x13\x20\x0b\x60\xf0\x7e\xa4\xcf\xd9\x6e\x97\x5e\x28\xa9\xe5\xdf\xb7\x65\x69\xf7\xce\xac\x4e\xcd\xe1\x5b\x80\xbc\x25\x43\xb1\xd4\x06\xa5\xcf\xb3\x80\xc9\xec\x4f\x43\x56\xde\x86\x04\xcd\x73\x26\x0d\x1d\xe2\x70\xb4\x4c\x97\xa8\x47\x62\xd9\xb0\xe0\xa2\x21\xf1\xde\x83\x0e\xde\x3b\x34\x3e\x19\xb8\x5c\xa0\xb1\xda\x94\x54\x94\xce\x58\xc9\x51\xe8\x19\xa4\x60\x83\x66\xb7\x52\x5b\x48\xdd\x52\x98\x4c\x72\x2c\xb8\x08\xb6\x9b\x27\x4e\x0e\xc4\x63\x97\x6a\xdc\x9d\xa6\x39\x35\x1b\xfb\xa5\xd9\xe5\x83\x60\x1f\xca\xf2\x4a\x4e\xd5\x0d\x0b\x50\x58\x49\x57\x5d\xdb\xdd\x89\x3d\x55\xb6\xd4\x1f\x46\xfb\xe8\x23\x29\x2e\x08\x8d\xf6\xa0\x4e\x52\xe6\xb9\x57\x26\x45\xf6\xe1\xa6\xae\x0c\x1c\xd2\x34\xae\xba\x87\x26\x2d\x1d\x49\xf6\xc3\x5d\xc6\x5f\x1e\xec\xe5\xf6\xfa\x58\x9a\x37\x99\xc8\x4b\x54\x40\x2e\x39\x1f\xad\x4e\x84\xb6\x8c\xdd\xa6\xd4\x6f\x79\x13\x98\x2a\x60\xc8\x8c\x8a\x94\xb9\xdc\xe8\xda\x18\x8d\xae\x7e\xdf\x50\xb1\x56\x27\x30\xfd\xf0\x98\x8e\xd1\xf0\x33\xe8\x5c\x90\xf0\x83\x14\x3e\x29\xfa\x74\xe4\x3e\xd0\x0a\x9c\x61\x79\x1c\xe5\xc0\x50\xde\x4f\xfd\x21\x8a\xba\x02\x25\x6c\xa2\x83\x13\x72\x08\xee\xb9\x20\x3f\xef\xc3\xfd\x7d\xab\x83\x9b\x1d\xde\x80\x69\xd0\xbd\x0c\x0f\x62\x57\xf0\xe5\xd7\x5d\xa3\x6a\x17\xe3\x88\xdd\x64\x42\x60\xe9\xdb\x60\xd7\xc8\x1c\x8a\x5c\xfd\xfa\x70\xc0\x6e\x9e\x5f\x07\xf4\x17\xd0\xa7\xbf\x80\x23\xe8\x27\x5d\xe1\xea\x44\x08\x0a\xcb\x2f\x83\x35\x0a\xcf\xf9\xf5\x0a\xf2\x6b\x4a\x38\x8e\xdb\xaa\x65\x6b\xee\x19\xa2\x2b\xc7\xd9\x55\x98\x5d\x88\x1e\x12\x4c\xe0\x99\xc1\x8a\x50\xa2\x52\xcc\x94\x68\x54\xde\x12\x06\xd7\x94\xc1\xff\x27\x71\x74\x67\x0a\xbb\xfa\x41\xb0\xf4\x8f\x8c\xeb\x8f\x4a\x6e\x37\xbb\x26\x8e\x98\xbe\x5f\x00\xcb\x04\xc3\xd2\xe4\x23\xc7\xf0\x0f\xae\x6f\x4e\xcd\x5d\xd3\x27\x51\xef\x33\x51\xfa\x46\x77\xeb\xf4\x43\x9e\xcf\x89\xc1\x5a\xda\x63\x6e\x6b\xd0\x1c\x0b\x54\x70\xb7\x4e\xcf\xa4\x40\xd3\x1c\x79\x63\x9b\xac\x97\x5f\xa7\xa7\xf6\x7a\xce\xd2\x56\x5f\xc0\xda\xae\x69\x9c\x71\x13\x4f\xd4\x3d\xed\x3b\x92\x38\x6a\x6b\x53\xd2\x0a\xe9\xcf\x2a\xaf\x55\x96\x77\x03\x22\x31\xae\x7f\xa2\x1a\x4b\xb4\x2e\x6a\x38\x50\x09\xb2\xa2\xef\x2c\xab\x11\x8c\x4e\xdf\x9d\xd0\xa7\xb9\xd9\xc4\xe6\x5f\x33\xef\x4e\x80\x99\x34\x05\xd2\x43\x1c\x91\x5e\x48\xcb\xf4\x54\xc4\x0c\x4e\x22\x94\xd8\x8d\xbe\x96\x7e\x77\x42\x77\xe3\xc8\xaa\x7f\x6e\xac\xd4\xee\xeb\xda\x36\xa5\xe2\x06\xa6\x27\x4d\xa1\x1f\xf5\x93\x64\xe7\x50\x2f\x9f\xaf\x48\x55\xf1\xf7\x9b\x73\x9f\x35\xdb\xce\xd8\x17\xb3\xed\x23\x1f\x51\x5b\xbb\xf2\xc7\xdb\x0d\x5f\xc1\x62\x9f\xd4\x0f\xd8\x96\x5b\x80\xc3\x82\xf4\x09\x16\x7d\x91\x6a\xe1\x2f\x34\xaa\xc7\xef\xf0\xfe\x57\x1b\xf7\x35\x6a\xb6\xbf\xca\xb6\x46\x96\xff\x1d\x59\xca\xea\xff\xb9\x9a\xd9\xf4\x6d\xaf\x65\x6a\xa7\x80\x76\xe1\x72\x7b\x6d\xcd\x6b\xc1\x4e\x17\x96\xbd\xf9\x56\x30\xba\xe8\x70\x9b\xd4\xfb\x44\xab\x23\xa5\xd6\xa9\x74\x1e\x6d\x32\xc1\xd9\xd1\x16\x9e\xc1\x2f\x44\xc2\x3a\x86\x2d\x33\x8c\xa9\xfb\xae\xe3\x8c\x62\x85\x45\xe7\x6d\x4d\x72\xac\xf9\x5f\xa6\x8b\x79\xd5\x63\x1c\xf5\xab\xdc\xd1\x50\x98\x74\xcb\x35\xaa\x15\x80\xdf\xfb\x09\xef\xfa\x92\x24\xbd\x92\x37\xdd\x5f\xf4\x1e\xab\xa8\xe7\xb5\x69\x3f\xa2\xa2\xfa\x92\x7c\xb7\xa2\x5e\xab\x0f\x35\x9d\xda\x28\x9e\x4f\xa8\xa9\x3f\xa6\x7c\x56\xec\x1d\xfd\x42\xaa\x65\x77\x5a\x47\xb1\xb7\x8f\xca\xd9\xf4\xa2\x0d\x40\xcf\x4a\x02\x9b\xed\xf5\x88\x0d\x76\xf4\x7f\xbc\xbc\xf3\xa4\x9c\xf3\xec\x81\x42\xd0\xf1\x1a\x25\x9f\xd9\x26\xf0\xe0\x71\xb1\x19\x7e\x38\xcf\x3b\x99\x98\x45\x1c\x85\xfd\xc5\xe7\x15\x66\x42\xfe\x25\xf0\x68\x7b\x80\x7a\x04\x5c\x74\xff\x6e\x17\x7a\x62\xe0\xf1\x80\x8f\x49\xbf\xf5\xb6\xdc\x53\x67\x8d\x44\x77\xe2\xa4\xe7\x67\x4f\x92\x68\x8d\x1a\x14\xd6\x1b\x29\x6a\xdc\xe7\x88\x2d\x0e\xeb\x8d\xed\x1b\x11\x27\xcd\x70\x1e\xdc\x8e\x73\xfd\xcc\x77\x62\x62\xfb\xab\x4d\xad\x75\x6f\x66\x3b\xed\x3a\x8f\x8f\xb1\x14\x7e\x05\x53\x08\x5b\xc3\x42\xcf\x35\xa0\x55\x50\x57\x1f\xfb\x1a\x24\x0e\x5e\xeb\x08\xde\xe0\xb0\x3e\x4e\x3e\x3a\xfc\xbd\xff\x1f\xbc\xd6\x28\xa6\x7f\x89\x76\x63\xb9\x89\x1f\xf7\x3d\x7c\x47\xb2\x1b\x8f\xdd\xb4\x6a\x98\x50\x4d\x37\x3c\x9b\x9c\x9e\xf9\xf1\x59\x2e\x85\x7d\x1f\xc4\x0c\x7f\x2c\x6d\x33\xe3\xb1\x63\x2f\x98\xfe\xe5\x74\xcf\x44\xcd\x22\x1c\x4e\xd4\x0e\xc1\xf4\x83\x96\x0b\x85\x05\xbf\x9f\x98\xba\x8d\x99\xf7\x8e\xba\x53\x4a\x7f\xe0\x36\x58\x25\xd7\x6d\x41\xac\x3c\x9c\xa9\xf1\x9b\x45\xb1\xe8\x8d\xe8\x48\x43\xab\x60\x40\xd6\xea\x28\x79\x6c\x56\x57\xdb\x70\xd5\xc7\x92\xc0\xa3\x5e\xf0\xea\x73\x39\x17\x2a\xfc\x04\x69\x7a\xfe\xdb\xcd\xe9\x00\x0e\x0f\xea\xa2\xa8\x3f\xaa\xab\xc3\x08\xe6\x5e\xc1\x4a\xaf\x14\xaf\x2e\xb7\x45\xc1\xef\xe7\x75\x17\xd4\x66\xe9\x2c\x81\x5f\x60\x96\x7a\x43\xcf\x16\x50\x07\x91\xae\x8d\xb6\x8f\x8e\xf4\x0c\x88\x41\x90\x7b\xbd\x5e\xa3\x1e\x67\xfa\x7e\x5e\x78\x76\xaf\xd1\x23\x73\xb8\xd7\xb0\x01\x77\x61\x5e\xb6\xb3\xa0\x5a\xdf\x4e\x07\x51\xaf\x6b\x40\x0c\xa6\x76\x6b\xf8\x1b\x64\x3f\xba\x13\xc9\x8e\x55\x8e\x5f\xff\xe9\xb9\x0d\x35\x30\x4a\x22\x6d\x85\xd7\x72\x39\x56\x13\x1e\x95\x2c\xa0\x0d\xa6\x7d\xca\x83\x6a\x6f\x5a\x37\x9d\x24\x6f\x7a\xb8\x9d\x48\xcd\x9e\x91\x6e\x77\x8b\xe9\x7b\x22\xe9\x9c\xdd\x3a\xd5\xfb\x5e\xbe\xf3\xce\xda\x4b\x76\x8e\xf9\x72\x09\xe7\x05\x08\x69\xde\x68\xe2\x35\x28\x64\x1c\xbf\x71\xb1\x06\x7d\x83\xc2\xbc\x46\x25\xb7\xda\x75\xeb\xe6\xc5\xa8\xac\x54\x98\xe5\x0f\xe6\xfd\x34\x0b\x1d\xf3\xe1\x94\x79\x72\xb2\x1c\x8e\x9e\x83\x29\x73\x90\x97\x86\x33\xf6\x47\x86\xcc\x1d\x47\xc3\xef\xdd\x49\x9d\x9a\xf0\xd7\xcb\xfd\xb1\x07\xd3\x0d\xa4\x83\x27\xdc\x4c\xe6\xb1\x30\x18\xbc\x2f\x64\x81\x58\x56\x26\xf5\x85\xd5\x41\xfc\xef\x00\x00\x00\xff\xff\xa6\xb6\xee\x3d\x5d\x2a\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
