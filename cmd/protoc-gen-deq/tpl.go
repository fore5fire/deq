package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x41\x6f\xdb\x38\x13\x3d\x93\xbf\x62\x3e\xe3\xdb\xae\x14\x38\x34\x7a\x35\x9a\x43\x91\x14\xd9\x60\x37\x6d\xb1\x59\xa0\xc7\x05\x43\x8d\x65\x22\x32\xa9\x90\x54\xdc\x40\xd0\x7f\x5f\x0c\x29\xc9\x92\xe3\xa4\x5b\x60\x2f\xb6\x44\x0e\x67\xde\x3c\x3e\x3e\x6a\xb5\x5a\xf1\xd5\x0a\xe0\x1a\x0d\x3a\x19\xb0\x00\x65\x0b\x14\x70\x65\xc1\xd8\x00\x3b\x5b\xe8\xcd\xb3\x88\x21\xde\x36\x4e\xe1\x1a\xda\x16\xc4\x5d\x7c\x86\xae\xe3\x94\xa0\x96\xea\x41\x96\x18\x67\xbe\xf6\xcf\x5d\xc7\xb9\xde\xd5\xd6\x05\xc8\x38\x5b\x28\x6b\x02\x7e\x0f\x0b\xce\x16\x9b\x5d\xfc\xab\x6c\x49\x7f\xfe\xd9\xa8\x05\xe7\x6c\x51\xea\x50\xc9\x7b\xa1\xec\x6e\xf5\x20\x83\xda\xe2\xa5\x2d\x70\x55\xe0\xe3\xe2\xad\xc9\x95\x54\x0f\x31\xc0\xda\xb2\x42\x51\xda\x4a\x9a\x52\x58\x57\xae\x4a\x57\xab\x05\xcf\x39\x6f\xdb\x73\x70\xd2\x94\x08\xe2\xaf\xe7\x1a\x7d\x84\x16\x9e\x6b\xc2\x2b\x3e\xcb\x1d\x76\xdd\xa7\x27\x34\x01\x7c\x70\x8d\x0a\xd0\x72\x76\x73\x45\x2f\xda\x94\x9c\xdd\xfa\x12\xce\xc6\x40\xde\xc5\x74\x68\x0a\x38\xa7\x34\x6d\x3b\xa4\xbe\x43\xf7\xa4\x55\x9f\xbd\x6d\x21\xe0\xae\xae\x64\x40\x58\xa8\x4a\xa3\x09\x0b\x10\x34\x35\x9b\xf1\x69\xcd\x61\x6a\x9a\xb7\xc0\x8d\x36\x93\xe5\x5d\x2a\xfd\xff\xbe\x10\xe1\x81\xf5\x05\x44\x60\x71\x51\xdf\x52\x3f\xd2\x75\x97\x71\xe1\xa4\xab\xba\xb9\xaf\xb4\xdf\xa2\x03\x38\x2b\xf0\x51\x7c\x1d\xde\x39\xf3\xcd\xbd\x57\x4e\xdf\xa3\x4b\x53\x77\xe3\x3b\xef\x38\xdf\x34\x46\xc1\x67\xdc\xbf\x48\x9e\x29\x6b\x0c\x9c\x11\xd5\x22\x8d\x5c\x5a\x63\x96\xa0\xb6\xd2\x18\xac\x7a\x12\xf3\x09\x81\x3d\xa8\x96\x33\x87\xa1\x71\x06\xde\x1d\x4d\xb5\x9c\x1d\x80\xae\x01\x08\xcd\x67\xdc\x8f\x58\x63\xc9\x25\xcc\xf0\x7f\xa9\x83\x6f\xbb\x7c\xc9\xd9\xa4\x91\xf5\xb0\xf4\xd0\xcb\x64\xed\x61\x30\x2e\xe6\x8c\xb1\xcb\x04\x7a\x0d\x03\x7c\xca\x17\xb3\xd2\xb6\x9f\x94\x51\x24\x26\x53\xd4\xdf\x7c\x63\x86\x6e\x72\xb8\xc6\x30\xa1\x2d\x53\xe1\x3b\xf4\x67\x41\x5c\xa6\xff\x25\xe8\x62\x64\x2a\x9b\x04\x47\x55\x2e\x01\x9d\xb3\x2e\x27\xca\x76\xbe\xa4\x2d\x37\xb8\x9f\x86\xe5\x9c\x61\x8c\xa2\x39\x25\x0e\x0c\x88\x6b\x0c\x54\x90\x0a\x2c\x61\xe7\xcb\x9c\x33\xbd\x89\x91\xff\xbb\x00\xa3\x2b\xca\x39\xec\xc3\xfc\x2c\xb4\x5d\xcc\x48\xad\x33\xfe\x4a\x08\x67\xec\xe6\x6a\x0d\x80\xe2\xe6\x8a\xa8\xba\xf5\xe5\x1a\x50\xdc\xfa\x52\x64\x87\x0d\x8f\xfc\x2d\xa9\x1a\x3f\x96\xf8\xc8\xe7\x2d\x86\xad\x2d\xd2\xd1\x49\x94\xfa\xb7\x28\xfd\x21\x9f\xf1\x64\xdf\x18\xda\xa6\x1e\x6c\x4f\xec\x97\x26\xd0\xe0\x29\x6e\x39\xfb\x7b\x24\xd1\x8b\x51\x81\x24\xb2\xc4\x21\xa9\xe6\x47\x8d\x53\xaf\x6f\x93\xfc\x02\x03\x31\xbd\xd9\x05\xf1\x89\x90\x6c\xb2\x45\xdd\xdc\xaf\xe1\x97\xa7\x45\x04\x93\xd3\x06\x10\xff\xbe\xa9\xc2\xed\x7c\xf7\x0f\x79\xf2\x21\x62\xd2\xc0\x44\x05\x1f\xf7\x52\xf7\x3a\x88\x88\x61\x4c\xf7\x03\x3d\xf4\x15\x5e\x4a\x82\xbf\x1e\x34\x70\x93\x6a\x4c\x09\x1a\xab\xce\x05\x71\x30\xd3\x5e\x1c\x47\xf6\x37\x7a\xe4\x09\x87\xfb\x4d\x9a\xa2\x42\xe7\x41\x9b\x80\x6e\x23\x15\x42\xfb\x8a\xae\xd8\xbf\x10\xcd\xb8\xc3\x44\xd1\x63\x54\x60\xaf\x22\x22\x19\xb2\xb3\x39\xed\x4b\x90\xea\x41\xd0\x45\x94\x8f\x7d\xc4\x1b\xe2\x05\x4e\x92\x31\xba\x89\x13\x6f\x07\xe0\x27\x9a\x79\xd3\x8c\xdf\xf0\xf0\xd3\x3e\x9d\x4a\xbf\xe6\xd3\x6f\xe1\x78\xe9\xe2\x89\x80\x59\xe2\x7c\xee\xe4\x47\xb3\xa4\x86\xa1\xc4\x7a\x2c\xf6\x5f\xd9\xf4\xb1\x4b\x4f\xaf\x8d\x9f\xbb\x35\x3a\x7e\x64\x3c\xc7\x4d\xfe\xa1\x7d\x40\x73\x4a\x37\x79\xb2\x10\xa2\x21\x3e\x28\x3a\x7e\x3b\xf9\x80\x19\xc1\x4b\x93\x4b\x78\x9f\x73\xb6\x8f\xa7\x97\x3e\x77\xc4\x37\xa9\xc3\xb5\xb3\x4d\xdd\x76\x9c\xc5\x83\xa9\xa4\x51\x58\x45\x03\xef\xf3\x7f\xd3\x61\x7b\x19\x47\xa9\x6c\xce\x59\x81\x1b\x74\x7d\x60\x96\x4f\xbe\x3c\xa6\x2a\xdf\x97\xe2\x63\x51\x64\xef\x73\x0e\x50\x5a\xa0\x9e\xb2\xb8\x47\xfd\xf2\x7d\x29\xae\xac\xc1\x2c\xe7\x8c\x9d\xf2\x8a\xbb\xc1\xed\xb2\x23\xf5\x67\x46\x57\xf9\x32\x25\x9c\x9c\x94\x7c\x3c\x03\xb1\x08\x7b\x92\x2e\x7e\x40\x8e\xc3\x34\xe8\xd0\xd7\xd6\x78\x5c\xa6\xa9\x58\x73\x10\x83\x38\x3a\x97\x4b\xa0\xbb\x6c\xbc\x44\xa6\x10\x72\x4e\xc9\xf4\x26\x65\xb9\xb8\x88\x35\xae\xf0\xb1\xc1\x06\xbf\xfc\x0e\xef\xde\xc1\x50\x68\x6a\x67\xec\xa7\x7c\x9d\x25\xfb\x1a\x9c\x9d\x1d\xbc\x2b\x75\x10\xc7\xc8\x70\x13\x92\x23\xeb\x64\x8c\x55\xb6\x14\x5f\x9d\x36\x21\x59\xf9\xb8\x72\xe6\xe9\x8c\x8d\x36\x4b\x3d\xfc\x99\x7a\xf8\xf4\xbd\xb6\x06\x4d\xd0\xb2\x4a\x65\x78\xfc\xe1\x87\x60\x95\x08\x8d\xf5\x4f\x54\x5f\xad\xe0\x66\x03\xc6\x82\x35\x08\xda\x83\x43\xa5\xf1\x49\x9b\x12\xc2\x16\x0d\xec\xf1\xd7\x27\x04\x59\x39\x94\xc5\x33\xa4\x94\x58\xd0\x42\x8f\x15\x26\x63\x62\x4c\x49\x8f\xd0\x4b\xf9\xc3\x39\x3d\xad\x69\xb8\xc0\x8d\x6c\xaa\xb0\xe6\x3d\xb0\x8e\xb3\x2e\x9b\xf9\x1e\x67\x73\xc1\xed\xcb\xa8\xf3\x28\x35\x55\x59\x8f\x59\xca\x9a\xa7\x95\x43\x4f\x1f\xce\xd3\xf0\xf0\x89\x35\x7e\x1f\xfc\x13\x00\x00\xff\xff\x6d\xb9\x58\x75\x9a\x0c\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
