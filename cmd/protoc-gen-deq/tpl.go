package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x1a\x59\x6f\xe3\xb8\xf9\x59\xfc\x15\xdf\x1a\xdd\x85\x34\x75\x18\xf4\xd5\x98\x3c\x0c\x92\xd9\x69\x80\xce\x6c\xd0\xa4\xd8\x87\xc1\xa2\x50\xa8\xcf\x8e\x10\x99\xf4\x50\x74\x0e\x18\xfa\xef\xc5\x47\x52\x14\x75\xd8\xf1\x9c\xd8\xb6\x01\x76\x2d\xf1\xf8\xee\x5b\x73\x7a\x7a\xca\x4e\x4f\x01\xde\xa1\x44\x9d\x1b\x2c\x40\xa8\x02\x39\x5c\x28\x90\xca\xc0\x5a\x15\xe5\xf2\x99\xdb\x23\xb5\xda\x6a\x81\x0b\xd8\xed\x80\x5f\xdb\x67\x68\x1a\x46\x00\x36\xb9\xb8\xcf\x57\x68\x77\xae\xfc\x73\xd3\x30\x56\xae\x37\x4a\x1b\x48\x59\x32\x13\x4a\x1a\x7c\x32\x33\x96\xcc\x50\x6b\xa5\x6b\x7a\x5a\xae\xed\x42\xfd\x2c\x05\xfd\x9a\x72\x8d\x33\xc6\x92\xd9\xaa\x34\x55\x7e\xcb\x85\x5a\x9f\xde\xe7\x46\xdc\xe1\xb9\x2a\xf0\xb4\xc0\x4f\xb3\x43\x9b\xa7\xb9\xb8\x9f\xb1\x8c\xb1\x87\x5c\xc3\x5b\xad\x2f\x0d\x71\x54\x2a\x79\xae\xd6\x9b\x0a\x0d\xc2\x19\x38\xdc\xfc\x03\x3e\xa6\xb3\xb2\xdd\x07\xe1\x0f\xcc\x32\xc6\xcc\xf3\x06\xe1\x3c\x97\x02\xab\x5f\xb7\x52\xc0\x72\x2b\x45\xda\xae\xdf\xa8\x4d\x29\xce\x95\x5c\x96\x2b\xa8\x8d\xde\x0a\x03\x3b\x96\x18\x5a\xad\x61\x9d\x6f\x3e\xd6\x46\x97\x72\xf5\x87\xfb\x61\x0d\x63\x74\x1d\x3e\xe0\x63\x74\x33\xcd\xe0\x55\x0c\x68\xc7\x12\x8d\x66\xab\x25\xfc\x12\x2d\xef\x58\xe2\x01\x2f\x60\x9d\xdf\x63\x3a\x02\x9f\xcd\x59\xd2\x10\x8e\xdd\xee\x04\x74\x2e\x57\x08\xfc\xe6\x79\x83\xb5\x95\xbd\xa5\x77\xb7\xe3\xef\xd4\x87\x7c\x8d\x4d\xf3\xf6\x01\xa5\x89\x88\xbe\xbc\x80\x24\x49\x12\x00\xf0\xc4\x26\xef\xeb\x15\xb8\x95\x57\xd1\x3d\x96\x9c\x6b\xcc\x0d\xde\x94\x6b\x04\x00\xd2\x11\xa7\x67\x96\x5c\xe0\x32\xdf\x56\xe6\xda\xe4\x06\xa1\xc0\x4f\xdc\xa2\xb0\xaf\x2c\x71\xab\xfe\x6f\xb8\x79\x29\x0b\x7c\xc2\xda\x6d\x7e\x1c\x4a\x2b\x15\x3d\xf9\x64\x60\xaf\xde\xa8\x21\x33\x69\x84\x35\x83\xf4\xd5\x70\x7f\xee\xb4\x9d\xc1\x8e\xb1\xa4\x5c\x02\x72\x0b\x15\x7e\x3a\x03\xc1\xa3\xc3\x76\x35\xa5\x63\x49\xab\x08\x59\x56\x73\x58\xae\x0d\x7f\x4b\x10\x96\xe9\xac\x94\x42\x69\x8d\xc2\x80\xd5\x09\xfc\x5c\xcf\xe6\x2d\xc0\x8c\xd4\xc0\x92\x75\xbd\x82\xc5\x19\x48\x7c\x4c\xc9\x0f\x1c\x74\x68\x9a\x8c\x25\xa8\x35\x6d\xad\xeb\x15\xff\x97\x5c\xe7\xba\xbe\xcb\xab\x14\xf9\x55\xfe\x5c\xa9\xbc\xc8\x1c\x75\x5a\x13\x65\xb2\xac\x0e\x12\xb2\x6d\xef\xc3\xc6\xdd\x5e\xc0\xcf\x0f\x33\xcb\xaa\xa7\xa3\xb5\xa5\xa1\x38\x08\xea\xe5\xc5\x02\xba\x3f\xe4\x97\x17\x73\x96\x90\xe2\xa3\xe5\x75\xbd\xa2\xc5\x4e\xeb\x0b\x7b\xb4\x7b\xa7\xdd\x58\xf7\x0b\x40\x1e\xbf\xd3\xbe\xdf\x08\x88\xc2\x86\x57\xfd\x22\x50\xe0\xde\xc9\x94\xe7\xc4\x2d\x59\xc1\x1e\x33\x18\x32\x74\xa3\x5a\x33\x18\xa9\x3e\x83\x34\x98\x46\xcf\x0c\x6e\xb7\x4b\xfb\x4e\xea\x40\xfe\xbe\x5e\xf1\xf7\x5e\x1d\x87\xb4\x10\x60\xed\x1a\x7b\xbb\x27\xe8\x6e\x73\xaf\x80\xaf\x5a\x55\xd9\x3f\xa2\xe1\xfb\x09\xd8\x8a\x2c\x6c\x4c\x19\xfa\xb1\x6a\x78\x51\x0b\xad\xe3\x38\xff\x25\x81\x95\x4b\x10\x70\x36\x92\xdf\x6c\xb7\xe3\x57\x5a\x19\xf5\xeb\xb6\xaa\xdc\xdd\x99\x93\xa1\xf5\xa6\x39\xa8\x7b\x52\x88\xe0\x2e\xe0\x7d\x9c\x45\x48\x66\x7f\x58\xb0\xea\x3e\x06\x68\xcf\x11\x84\x83\x18\xf6\xf2\x70\x8d\x66\xc4\x86\xf3\x6b\x1f\x59\x09\xd7\x1e\x6a\xe0\xcc\x63\x6f\x18\x65\xc5\xa1\xe5\x51\xd2\x81\xb2\x86\x5c\x82\xcb\x2f\x4a\xc3\x52\xe9\xd1\xb9\x9a\xc3\xa5\x81\xbb\xdc\x9d\x2c\x50\x9a\x52\xe4\x15\x94\xd2\xa0\x5e\xe6\x02\xc1\x28\x02\x1f\x8c\x8b\xe0\xce\x01\x9f\x04\x6e\x0c\x98\xbb\x9c\xfe\x87\x2e\x32\xc2\x1a\xcd\x9d\x2a\xc0\x89\xa2\x86\x7c\x84\x8c\x4f\x67\x03\x4b\x6b\x97\x11\x88\x5e\x0a\xfe\x3d\x9c\x2c\x11\x2e\x4b\xc5\x12\xf4\xbc\x7f\xc0\x27\x13\xb0\x12\x39\x92\x16\xc6\x61\x78\x32\x17\x97\x4b\x18\x27\xe0\x62\x0e\x4a\x93\x44\xac\xcb\xce\x09\x09\xe9\x5e\x22\x28\x21\xb6\x1a\x0b\x0e\xd7\x88\x7d\xa9\x70\x4b\x06\xc9\x78\xad\x34\x42\x29\x97\x4a\xaf\x2d\x58\xee\xd5\x5f\x9a\x71\x84\xa0\x9b\x99\xe5\x20\x15\xe6\x09\x7c\x79\xc2\xcf\xdd\xef\x31\xe9\xe4\xa7\xd2\xf0\xb2\xc5\x3f\x91\x3e\xa6\xb8\xb6\x26\xcb\x92\x02\x3f\x39\xcd\x2d\xce\xa0\x85\xe2\x62\x59\xc6\x58\x82\x21\x42\x95\x86\x3b\xe9\xf3\x7d\x29\xb0\x85\xf4\x59\x39\x44\x28\xf9\x80\xda\x74\x62\x04\xa3\x46\x6a\xdb\x97\x57\x70\x10\x1f\xf6\x0b\xf7\xbc\x52\x35\x3a\xc1\xb4\x4c\xfa\x25\x1b\xe4\xfb\xce\x63\x03\xd0\x77\x70\x9e\x00\xf7\x1b\x3a\x4f\x47\xeb\xb4\xf3\x84\xfd\x1f\xec\x3c\xb1\xef\x0c\x5d\xa7\xe7\x3b\x81\xc0\x63\x7c\x07\x75\x4f\xc1\xe1\xee\x57\x7b\x0f\xea\x6f\xe3\x3f\x2d\x9c\x69\x0f\x42\xfd\x5f\xe7\x43\x91\x88\x0f\xfb\x10\x15\xfe\x28\x0b\x38\x69\xec\x4b\xdb\x04\x5c\xa3\x7e\x28\x85\xef\x03\x76\x3b\x30\xb8\xde\x54\x54\x8e\xcf\x44\x55\xa2\x34\x33\xe0\xb4\xd5\xdb\xa9\xdd\x9d\x6e\x2b\x86\x5b\xe0\xb2\x94\xd1\x75\x7b\xe2\x04\xfe\xe2\x11\xd9\x42\x77\x71\x06\xdc\x3e\xd0\x25\xef\x31\x7e\xa5\x69\xce\xed\xc5\xc8\x5d\x8a\x5b\x57\x79\x58\x7f\xb9\x36\x4a\x23\x4b\xc4\x5d\x2e\x25\x56\xa1\x1f\xd9\xe3\x3b\x6d\x47\x35\x02\x9f\x16\xb7\x11\xbc\x39\xf4\xe1\xcd\x61\x02\x5e\x66\xe5\xee\xa4\xee\x69\xdc\xf5\x2a\xe8\x78\x8b\xcc\xa1\xb8\x5d\x40\x71\x4b\x15\x94\x87\xbe\x68\xd1\xd8\x35\x0b\x74\xe1\x31\xb5\xed\x59\xa8\x41\x06\xf0\x32\xb8\x7e\x96\xe2\x4d\x55\xdd\xa8\x29\x2f\x9a\x83\xc6\xb5\xf2\xad\x55\x7b\xc3\x3a\x11\xd1\x88\x5a\x0b\xdb\x53\x50\x6b\x48\x24\xf8\x94\x09\x7f\xcb\x58\xf2\x68\x3b\x11\x6a\xab\xf9\xef\x79\x69\xde\x69\xb5\xdd\xec\x1a\x96\x08\xf3\x34\x07\x61\x7b\x5b\x5b\x6f\x79\x84\xbf\x97\xe6\xce\x75\xbc\x44\x47\x46\x1e\xd6\x19\x53\xe8\x28\x93\xc7\x15\x7f\x53\x14\x29\x21\x58\x29\xdf\x17\x5b\x1f\x29\x70\x89\x1a\x1e\x57\xfc\x42\x49\xb4\x0e\x18\x74\x69\xab\xba\xe2\x96\x9f\xbb\xf7\x54\xf0\x56\x5c\x20\x5a\xbf\x1c\x57\x94\x59\x00\xea\x4f\x07\xa3\x67\x49\xdb\x4c\xb5\x3b\x24\x43\x27\xc0\x56\x60\x74\x7b\xec\xc8\x49\x8d\x15\x3a\xe3\xb3\xc0\xa9\x9a\x5e\xd0\xb3\xc8\x6b\x04\x2b\xce\xd7\x27\xf4\x6b\x17\x1b\x66\xff\x6b\xa8\x2d\xf0\xce\x40\xbe\x10\x33\x0e\x2c\x21\x91\x90\x80\xe9\x54\x22\x2c\x89\x04\x28\x73\x17\x43\xdf\xf7\xfa\x84\x56\x59\xe2\x24\x9f\x5a\x05\xb5\xf7\xba\x98\xa0\x35\x6b\x60\xba\x99\x8f\x2c\xa8\xef\x74\x9d\x29\xbd\xa3\x92\x36\xea\x3a\x5d\x68\x9b\x34\xab\xb2\x08\x65\x2e\xc5\xe9\xe1\xa5\x28\x52\x27\xec\xeb\x15\xb9\x4f\x8f\x6d\xd4\x0d\xa1\xba\x3d\xf2\x0e\x4d\x5a\xbe\xdc\x14\x87\x36\x0c\xfb\x50\xfe\x84\xd1\xde\x11\x38\xec\xaa\xf6\xeb\xf2\xcd\x63\x5e\xfe\xaf\x68\xd3\xf2\xe2\xbc\xf3\xff\x5b\xa9\xd7\xdb\xdb\x63\x55\x7a\x97\xcb\xa2\x42\xed\x22\xcd\x68\x77\x62\xd8\x91\x8b\x7b\x7e\xae\x0a\x8c\xf2\xc3\x77\xd3\xb4\xe7\x3f\x84\xdf\xed\xad\xd3\xae\x23\x76\x8a\x9d\xc1\x98\x2e\x1a\xcc\x74\x74\xdb\xa8\xfc\x99\x4a\xb7\x81\x7e\x2a\xd2\x27\x9b\x5c\x96\xe2\x68\x05\xcf\xe0\xaf\x04\xc2\xd9\x85\x4b\x3e\x56\xd3\x7d\xcb\xf1\x4a\x71\xcc\xa2\x37\xb6\x26\x3b\x52\xfb\xbe\x5e\xe9\x6b\x9f\x4a\xbc\x54\x6d\x4c\xed\x8a\x72\x83\xfa\xb7\x8d\xa9\x6d\x4d\x32\x75\xf4\xbb\xba\x70\xb2\x7f\x70\x48\xb8\x49\xae\x54\x7d\x2e\x00\xc2\xd5\x0f\xf8\xd8\x67\x23\xeb\xd5\x40\x7c\x6f\x15\x74\xac\x90\x42\x1d\xfc\xb2\x90\xba\x96\xec\xc7\x0b\x29\xe0\xde\x23\xa4\x3e\x1b\x5f\x2b\xa4\x2b\x8a\x23\x03\x4f\xd8\xe3\x76\x53\x63\xd1\x43\x8d\xd9\x44\x14\x9f\x10\x52\x7f\xf6\xfa\x45\x11\x77\xf4\x59\xc2\xa8\xce\x49\x47\x11\xb7\x4f\x95\xd7\xe8\x55\x1b\x77\xbe\x28\xf4\x6f\xb6\xb7\x23\x34\xd8\xc1\xff\xf3\x65\x9b\xcf\xc9\x34\x17\x58\x1d\x67\x21\x51\xe9\x10\xf2\x46\x1b\xde\x49\xc6\x17\xce\x63\xf6\xb9\x89\xcb\xe8\xc3\x66\x31\x54\xaf\xef\xed\x60\xc5\x35\xa1\x47\x50\x1d\xb5\x73\x87\xec\xf9\x52\x52\x55\xdc\xb7\xe7\xdf\xb6\x26\x5a\xec\x4d\x1a\xfe\x1d\x99\xb2\xf3\x9c\x1e\x00\x1f\xcd\xbf\xda\x76\x3e\x33\xde\x04\x82\x8f\x2a\xac\xfe\x89\xf5\xb6\x3a\x58\x59\x21\xbf\xbc\xf8\x2c\x1e\x56\x68\x40\x63\xbd\x51\xb2\xc6\x09\x9b\xeb\xe3\x1b\xbb\x43\x5f\xe0\x69\xa0\xf1\x9b\x38\x44\x1f\xf8\x3e\x8f\x68\x89\x74\x6e\x11\x0f\x42\xa2\x76\x2d\x1a\x5d\x84\xf9\xc6\xc4\x74\xe2\xef\x2e\xb5\xd7\xd1\x00\x71\xb7\xc7\x92\x93\x17\xcd\x54\xe3\x27\x97\x9b\x9c\xa1\x41\xcf\x54\xa1\xe5\xae\x2b\xcf\x43\x0d\x14\x98\x68\x6c\x2a\x18\x12\x49\x5e\xd3\x9b\x38\xde\xb5\x54\x4f\x70\xd2\x0d\x58\x26\x27\x2c\x61\xc4\x52\x28\xe9\x3e\xd2\xda\x09\x82\x83\x6d\x07\x05\x6e\x54\x02\xc7\x0c\x5f\x1c\x61\xc3\xe1\xcb\x21\xea\x8e\x1c\xcd\x38\x81\xf5\xb0\x64\xfd\xf1\xcc\x60\x97\xac\xad\xc5\xbb\x08\x14\xec\x1b\xd6\x74\xa3\x1c\x92\xc2\x22\x9a\xa4\xb4\x72\xc8\x5e\x9a\xe9\xd4\x30\x45\xe2\x3f\xca\xda\xa0\x9c\x1e\x8c\xfe\x98\xf9\x8d\x0f\x26\x61\xdc\xd0\x4d\x73\x62\x53\xee\xe6\x39\x00\x87\x07\x3a\x49\xd2\x1f\xe9\xd4\x71\x8c\xab\xbb\x18\x57\x47\x31\xae\x8d\xb3\x2f\x8e\x74\x2c\xf0\xe1\x50\xe7\xbb\x75\x15\xf5\x38\x9a\xf5\x33\xc2\x17\x77\x15\x3d\x30\x87\xbb\x0a\x17\x78\xe7\xf6\x9f\xda\x38\xa2\x5a\x63\xe5\x83\xf8\xd2\xb5\x1a\x96\xa6\xf6\x6a\xfc\x8d\xb5\x1f\x61\x09\x64\x87\xca\x45\x66\x8f\x6d\x28\x81\x51\xac\x6d\x8b\xba\x16\xcb\xb1\x92\x08\x54\xa9\x25\xb4\xdf\x4a\xfa\x90\x07\x05\xde\xb4\x6c\x3a\x4e\x7e\xe9\xd1\xed\x59\x6a\xf6\xcc\xf5\xba\x25\x61\x9e\x08\xa4\x37\x62\x67\x54\x67\xbd\x9c\x13\x26\xb0\xbd\xb4\xe2\x91\x9f\x9e\xc2\xe5\x12\xa4\xb2\x1f\x4d\xca\x1a\x34\x8a\x12\x1f\x4a\xb9\x02\x73\x87\xd2\x7e\xa3\x51\x5b\xe3\xfb\x72\xfb\xe5\x25\xaf\x34\xe6\xc5\xb3\xfd\x12\xe5\x48\xc7\x62\x38\x6a\x9c\x1c\x2f\xc6\xf3\xc7\x68\xd4\x18\x65\x80\xe1\x8c\xf5\x85\x49\x63\x87\xd1\xe2\x7b\x7d\x52\x73\x1b\xd5\x7a\xf9\x97\x05\x62\xba\xa9\x64\x74\xc2\x0f\x5f\x5e\x88\x6e\xd1\x17\x09\x47\x87\xc3\x34\xfe\x1e\xf1\x9f\x00\x00\x00\xff\xff\x45\x48\x11\x06\x5a\x26\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
