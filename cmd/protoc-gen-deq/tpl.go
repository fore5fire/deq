package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _out_go_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x38\xf2\x7f\x2d\x7d\x8a\x59\xe1\xbf\x85\xd4\x75\x64\xfc\xdf\x1a\xed\x8b\x22\xb9\xeb\x06\xb8\xed\x06\x97\x1c\xf6\x45\xb1\x28\x14\x6a\xe4\x08\x91\x48\x97\xa2\x9b\x04\x86\xbe\xfb\x61\x48\x8a\xa2\x1e\xec\x38\x69\x72\x5b\xe0\x2e\x40\x6b\x4b\x14\x67\x7e\xf3\xc0\x79\xb2\x96\xcb\x65\xb8\x5c\x02\x7c\x44\x8e\x32\x53\x98\x03\x13\x39\xa6\x70\x26\x80\x0b\x05\xb5\xc8\xcb\xe2\x21\xd5\x8f\x34\x62\x2b\x19\xae\x60\xb7\x83\xf4\x52\x7f\x87\xb6\x0d\x89\xc0\x26\x63\xb7\xd9\x1a\xf5\xca\x85\xfd\xde\xb6\x61\x58\xd6\x1b\x21\x15\xc4\x61\x10\x31\xc1\x15\xde\xab\x28\x0c\xa2\xa2\xa6\x8f\xdd\xee\x04\xca\x02\xd2\x5f\xb3\xe6\x37\x54\x37\x22\x6f\x68\x4b\x10\x35\x0f\x9c\xd1\x53\x8d\x92\x25\x5f\x37\xf6\x49\xe4\xb9\x5e\xde\xed\x68\xcf\xd5\xc3\x06\x9b\xb6\x8d\x54\x59\x63\xb4\xdb\x21\xcf\x89\x5b\x10\xad\x4b\x55\x65\xd7\x29\x13\xf5\xf2\x36\x53\xec\x06\x4f\x45\x8e\xcb\x1c\xbf\x46\xdd\x4e\x8f\xdb\x89\x66\xb7\x77\xcb\x32\x63\xb7\x43\xe6\x49\x18\xd2\x95\xcc\xf8\x1a\x2d\x06\x2d\xa5\x7a\xd8\x90\xe8\xe9\x47\xf1\x29\xab\xb1\x6d\xff\xf6\x0d\xb9\x82\x46\xc9\x2d\x53\xb0\x0b\x83\xf3\x33\x08\x82\x20\x00\x00\x23\x53\x18\x9c\x4a\xcc\x14\x5e\x95\x35\x02\x00\x09\x91\xd2\xf7\x30\x38\xc3\x22\xdb\x56\xea\x52\x65\x0a\x21\xc7\xaf\xa9\x26\xa5\x2f\xc3\xc0\xdc\xb5\x7f\xe3\xc5\x73\x9e\xe3\x3d\x36\x66\xf1\xf3\x9f\x96\x11\xc1\x77\xb0\xe0\xad\x77\x11\x76\xb8\xbf\x78\x37\xaf\xc4\xa6\x64\xa7\x82\x17\xe5\x1a\x4a\xae\x50\x16\x19\x43\x92\x40\x73\xba\x12\x63\x19\x63\x87\x22\x81\xf8\xed\x78\x75\x01\x28\xa5\x90\x09\xb1\x5a\x2e\x27\x0a\x3a\x57\x28\xa1\x6c\x20\xe3\x50\x2a\x72\x3d\x21\xa1\x10\x72\xf2\x5c\x93\xc2\xb9\x82\x9b\xcc\x3c\x99\x23\x57\x25\xcb\x2a\x0f\x9f\x12\x44\xde\x41\x21\xba\x0b\xc0\x7b\x86\x1b\x05\xea\x26\xa3\xff\x10\x8c\x4d\x6a\x6d\x7a\x90\xa8\xb6\x92\x37\x90\x4d\x98\xa5\xf3\xc6\x34\x58\x7d\x8d\x7c\xc2\x7b\x15\x33\x75\x0f\xd6\xaf\xd3\x53\xf3\x79\x50\x11\xc1\x69\x25\x1a\x8c\x93\x59\xe5\xf7\x8c\x7a\xcf\x21\xc5\xf8\xc6\xa6\xe5\x30\x60\xc6\x42\x7b\x2c\x67\xd5\x4d\x00\x9d\xa0\xa4\x01\x4e\x37\xa6\xd0\x34\x6d\x29\xcf\xb5\x09\x4a\xc1\x4f\x45\xbd\xa9\x50\x21\x9d\xcd\xb2\xbb\x09\xcc\xde\xcd\x17\x20\x24\x19\x42\x4b\xb4\x20\x46\x65\x01\x82\x23\x08\xc6\xb6\x12\xf3\x14\x2e\x11\x87\x80\x53\x0d\x85\x4c\x5b\x0b\x89\x50\xf2\x42\xc8\x5a\x93\x4d\xc3\x62\xcb\x19\xc4\xa5\x82\xb7\xb3\xaa\x48\xe0\x39\x7a\x86\x5d\x18\x06\x65\x01\x3f\x95\x2a\x2d\x3b\x00\x44\x84\x56\x82\xc0\x28\x05\x78\x59\xed\x97\x3e\x0c\xda\x30\x08\x83\x1c\xbf\x1a\xc7\x59\xbd\x87\x8e\x98\xf1\xfc\x24\x0c\x03\xd4\x0c\xed\x9a\x31\x4a\x7a\xe0\xa4\x98\x83\xa2\x91\xd1\xb6\x9f\xde\x13\x84\x09\xa2\xa2\x56\x84\x48\xc8\x22\xa6\x98\xf9\x0d\xa5\xea\xd5\x09\x4a\x4c\x4c\xb8\x82\x9f\xbf\x45\x1a\x49\x42\xa8\xc3\x8e\x1a\x2e\x88\x20\x79\xc3\xa3\x4a\xb6\x6e\x69\x3c\xce\x48\xd9\x7b\xea\x6e\xa7\xe3\x1f\x45\x4b\xfa\x6e\xa3\xdf\x25\xca\x6f\x25\x33\x01\xb0\x3b\x32\xd3\x20\xd2\x7b\xb2\xa2\xbb\x0d\xd4\xd9\xe6\xb3\x89\x4d\x5d\x88\xea\xf0\x7d\xc2\xbb\x39\x12\x71\xa2\xc3\xd6\x94\xf4\xce\x09\xfa\x66\x6e\x9d\xd4\x6a\x78\xae\xa0\xce\x6e\x31\x9e\x70\x4e\x16\xa4\x2e\x2d\xdf\xff\x59\x69\x88\x0a\x99\x53\x93\xd3\x12\xf7\x02\xbb\x70\x6f\xb4\xc9\x08\x96\xbf\x6f\xc0\x3d\x81\x7d\x7e\xe0\x9d\x8d\x63\x5c\x18\x53\x4d\x95\x9c\x85\xa5\xe3\xf3\x1e\x4f\xfd\xd9\xf7\x9e\x92\x33\x21\x25\x32\xf2\x1a\xa2\xf1\x73\x43\x6e\x62\x08\x5a\x57\xa9\x9b\x35\xc9\xcb\xf1\x2e\xa6\xd4\x6d\xa8\x43\xdb\x26\x61\x60\x3d\xbb\x6e\xd6\xe9\xbf\x78\x9d\xc9\xe6\x26\xab\x62\x4c\x2f\xb2\x87\x4a\x64\xf9\x93\xdc\x78\xdb\xed\x87\x8d\xd9\xbd\xcf\x65\xdf\x8c\xd5\x41\x54\xcf\xcf\x56\xd0\xff\x61\x7a\x7e\xb6\x08\x03\x3f\xaf\x79\xcb\x75\xb3\xa6\xc5\x3e\xbd\xae\xf4\x96\xfe\x9a\x56\xfd\x24\xbb\x02\x4c\xfd\x6b\x5a\xb7\x0b\x8e\xa1\x5b\xb0\x39\x76\xe5\x90\x98\x6b\xf2\xa3\xd1\x59\x7b\xcc\x3b\xc6\x72\x5e\x89\xce\x3b\x26\x1e\x91\x40\x9f\x65\x07\xde\x71\xbd\x2d\x5c\xfc\x41\xdf\x37\xd2\xdf\xac\xb5\x0e\x19\xc9\xd1\xdc\xb5\x9a\xca\xc0\x0e\xfd\xe2\x5e\xfd\x5f\x74\x96\xd4\x7f\x84\xe5\xf5\xf4\xae\x55\xe7\x16\xe6\xce\xc1\xab\x59\xa7\x3b\x67\x26\x64\xe8\x00\x59\x00\x83\xf7\x13\x7d\x46\xbb\x5d\x7a\x21\x85\x12\x7f\xdf\x56\x95\xd9\x1b\x19\x9d\xea\xc3\xb7\x00\x71\x4b\x86\x62\xa9\x09\x4a\x9f\x23\x8f\x49\xf4\xa7\x26\x2b\x6e\x7d\x82\xfa\x39\x9d\x86\x0e\x71\x38\x5a\xa6\x4b\x54\x13\xb1\x4c\x58\xb0\xd1\x90\x78\xef\x41\x07\xef\x2d\x1a\x97\x0c\x6c\x2e\x50\x58\x6f\x2a\x2a\x4a\x23\x56\x95\xc8\x55\x04\x29\x98\xa0\xd9\xaf\x34\x06\x52\xbf\xe4\x27\x93\x1c\x8b\x92\x7b\xdb\xf5\x13\x27\x07\xe2\xb1\x4d\x35\xf6\x4e\xdb\x9e\xea\x8d\xc3\xd2\xec\xf2\x81\xb3\x0f\x55\x75\x25\xe6\xea\x86\x05\x48\xac\x85\xad\xae\xcd\xee\xc4\x9c\x2a\x53\xea\x8f\xa3\x7d\xf0\x91\x14\xe7\x85\x46\x73\x50\x67\x29\x97\xb9\x53\x26\x45\xf6\xf1\xa6\xbe\x0c\x1c\xd3\xd4\xae\xba\x87\x26\x2d\x1d\x49\xf6\xc3\x5d\x56\xbe\x3c\xd8\xcb\xed\xf5\xb1\x34\x6f\x32\x9e\x57\x28\x81\x5c\x32\x9e\xac\xce\x84\xb6\x8c\xdd\xa6\xd4\x6f\x39\x13\xe8\x2a\x60\xcc\x8c\x8a\x94\x58\x6c\x54\xa3\x8d\x46\x57\xbf\x6f\x54\x93\xc0\xfc\x93\x53\x22\x5a\xbd\x4f\x25\x72\x41\x62\x8f\x92\xf7\xac\xd0\xf3\x31\xfb\x40\x13\x70\x86\xd5\x71\x94\x3d\x13\x39\x0f\x75\xc7\x27\xe8\x4b\x13\xbf\x7d\xf6\xce\xc6\x21\xb8\xe7\x9c\x3c\x7c\x08\xf7\xf7\xad\xf2\x6e\xf6\x78\x3d\xa6\x5e\xdf\x32\x3e\x82\x7d\xa9\x97\x5f\xf7\x2d\xaa\x59\x0c\x03\x76\x93\x71\x8e\x95\x6b\x80\x6d\x0b\x73\x28\x66\x0d\x2b\xc3\x11\xbb\x38\xbf\xf6\xe8\x2f\x60\x48\x7f\x01\x47\xd0\x4f\xfa\x92\xd5\x8a\xe0\x95\x94\x5f\x46\x6b\x14\x98\xf3\xeb\x15\xe4\xd7\x94\x6a\x2c\xb7\x55\xc7\x56\xdf\xd3\x44\x57\x96\xb3\xad\x2d\xfb\xe0\x3c\x26\x98\xc0\x33\xc3\x14\xa1\x44\x29\x99\x2e\xce\xa8\xb0\x25\x0c\xb6\x1d\x83\xff\x4f\xc2\xe0\x4e\x97\x74\xcd\x03\x67\xe9\x1f\x59\xa9\x3e\x4a\xb1\xdd\xec\xda\x30\x60\xea\x7e\x01\x2c\xe3\x0c\x2b\x9d\x89\x2c\xc3\x3f\x4a\x75\x73\xaa\xef\xea\x0e\x89\xba\x9e\x99\xa2\x37\xb8\x5b\xa7\x1f\xf2\x3c\x26\x06\x6b\x61\x0e\xb8\xa9\x3e\x73\x2c\x50\xc2\xdd\x3a\x3d\x13\x1c\x75\x5b\xe4\x8c\xad\xf3\x5d\x7e\x9d\x9e\x9a\xeb\x98\xa5\x9d\xbe\x80\x75\xfd\xd2\x34\xd7\x26\x8e\xa8\x7d\xda\xf5\x22\x61\xd0\x55\xa5\xa4\x15\xd2\x9f\x51\x5e\xa7\x2c\xe7\x06\x44\x62\x5a\xf9\x04\x0d\x56\x68\x5c\x54\x73\xa0\xe2\x63\x45\xdf\x59\xd6\x20\x68\x9d\xbe\x3b\xa1\x4f\x7d\xb3\x0d\xf5\xbf\x36\xee\x4f\x80\x9e\x31\x79\xd2\x43\x18\x90\x5e\x48\xcb\xf4\x54\xc0\x34\x4e\x22\x94\x98\x8d\xae\x8a\x7e\x77\x42\x77\xc3\xc0\xa8\x3f\xd6\x56\xea\xf6\xf5\x0d\x9b\x94\x61\x0b\xf3\x33\x26\xdf\x8f\x86\xe9\xb1\x77\xa8\x97\xcf\x54\xa4\xaa\xf0\xfb\xcd\xb9\xcf\x9a\x5d\x4f\xec\xca\xd8\xee\x91\x8f\xa8\x8c\x5d\xcb\xc7\x1b\x0d\x57\xbb\xe2\x90\xd4\x0f\xd8\x90\x1b\x80\xe3\x52\xf4\x09\x16\x7d\x91\x3a\xe1\x2f\x34\xaa\xc3\x6f\xf1\xfe\x57\x1b\xf7\x35\xaa\xb5\xbf\xca\xb6\x5a\x96\xff\x1d\x59\xca\xea\xff\xb9\x6a\x59\x77\x6c\xaf\x65\x6a\xab\x80\x6e\xe1\x72\x7b\x6d\xcc\x6b\xc0\xce\x17\x96\x83\xc9\x96\x37\xb4\xe8\x71\xeb\xd4\xfb\x44\xab\x23\xa5\xd6\xb9\x74\x1e\x6c\x32\x5e\xb2\xa3\x2d\x1c\xc1\x2f\x44\xc2\x38\x86\x29\x33\xb4\xa9\x87\xae\x63\x8d\x62\x84\x45\xeb\x6d\x6d\x72\xac\xf9\x5f\xa0\x7f\x79\xd5\x33\x1c\x0c\x4b\xdc\xc9\x2c\x98\x14\x5b\x2a\x94\x2b\x00\xb7\xf7\x13\xde\x0d\xc5\x48\x06\xf5\x6e\xba\xbf\xe2\x3d\x56\x4b\xcf\x68\xd0\x7e\x44\x2d\x0d\xc5\xf8\x6e\x2d\xbd\x56\x07\xaa\x7b\xb4\x49\x24\x9f\x51\xd3\x70\x34\xf9\xac\xa8\x3b\xf9\x55\x54\x89\xfe\x9c\x4e\xa2\xee\x10\x95\xb5\xe9\x45\x17\x7a\x9e\x15\xfe\x37\xdb\xeb\x09\x1b\xec\xe9\xff\x78\x19\xe7\x49\xd9\xe6\xd9\xa3\x04\xaf\xd7\xd5\x4a\x3e\x33\xed\xdf\xc1\xe3\x62\x72\xfb\x78\x86\x77\x32\x33\x85\x38\x0a\xfb\x8b\x4f\x2a\xf4\x54\xfc\x8b\xe7\xd1\xe6\x00\x0d\x08\xd8\xb8\xfe\xdd\x2e\xf4\xc4\xc0\xe3\x00\x1f\x55\x63\xfd\x13\x9b\x6d\x75\xb0\xc8\xc2\xf4\xfc\xec\x49\x32\xac\x51\x81\xc4\x66\x23\x78\x83\x33\xae\x37\xe4\x37\x3d\x15\x43\x85\xc7\x0e\xe3\x8b\x9c\x8b\x21\xf1\x7d\x07\xa3\x03\x69\x4e\x47\xf7\x56\xc6\x49\x3b\x9e\x49\x77\x23\x65\x37\x77\x9e\x99\x1a\xff\x6a\x92\x7c\x33\x98\x1b\xcf\xbb\xf2\xe3\x03\x35\x89\x5f\x41\x97\xe4\xc6\xd1\x60\xe0\xaa\xd0\x49\xd7\x57\xea\xae\x1a\x0a\xbd\x57\x4b\xbc\xb7\x48\xcc\x99\xa3\x33\x33\x7e\xe7\xe0\x1f\x65\xa3\x90\xcf\xff\x1a\x6e\x07\x84\x33\x2f\x18\x38\xf8\x96\x64\x3f\xa8\xbb\xe9\xd4\x30\xa3\x9a\x7e\x8c\x37\x3b\xc7\x73\x83\xbc\x5c\x70\xf3\x4e\x8a\x1e\x43\x19\xda\x7a\xda\x64\x06\x70\x30\xff\xeb\xed\x9e\xd9\x9e\x41\x38\x9e\xed\x1d\x82\xe9\x46\x3e\x17\x12\x8b\xf2\x7e\x66\xfe\x37\x65\x3e\x08\x3d\x56\x29\xc3\xd1\xdf\x68\x95\x9c\xba\x03\xb1\x72\x70\xe6\x06\x81\x06\xc5\x62\x30\x2c\x24\x0d\xad\xbc\x51\x5d\xa7\xa3\xe4\xb1\xa9\x61\x63\xc2\xe7\x10\x4b\x02\x8f\x7a\xc1\xab\x4f\x08\x6d\xe8\x72\xb3\xac\xf9\x49\x74\x3f\x31\x04\x38\x3c\x32\x0c\x82\xe1\xd0\xb0\xf1\x23\xaa\x7d\x0d\x2c\xbd\x92\x65\x7d\xb9\x2d\x8a\xf2\x3e\x6e\xfa\x20\x1b\xa5\x51\x02\xbf\x40\x94\x3a\x43\x47\x0b\x68\xbc\xc8\xdb\x45\xff\x47\x87\x8b\x1a\xc4\x28\xe2\xbe\x5e\xd7\xd3\x4c\x63\xec\x30\x4f\x3d\xbb\xeb\x19\x90\x39\xdc\xf5\x98\x74\xb0\xd0\x2f\xfc\x19\x50\x9d\x6f\xa7\xa3\xa8\xd7\xb7\x42\x1a\x53\xb7\xd5\xff\x1d\x74\x18\xf7\x89\x64\xcf\xca\xe4\x0b\xcb\x6d\xac\x81\x49\x06\xe8\x2a\xce\x8e\xcb\xb1\x9a\x70\xa8\x44\x01\x5d\x30\x1d\x52\x1e\x55\x9f\xf3\xba\xe9\x25\x79\x33\xc0\x6d\x45\x6a\xf7\x0c\x97\xfb\x5b\x4c\xdd\x13\x49\xeb\xec\xc6\xa9\xde\x0f\x32\xa1\x73\xd6\x41\xb2\xb3\xcc\x97\x4b\x38\x2f\x80\x0b\xfd\x56\x55\xd9\x80\x44\x56\xe2\xb7\x92\xaf\x41\xdd\x20\xd7\xaf\x72\x89\xad\xb2\x73\x03\xfd\x72\x56\x56\x49\xcc\xf2\x07\xfd\x8e\x9c\x81\x8e\xf9\x78\xde\x3d\x3b\xe3\xf6\x87\xe0\xde\xbc\xdb\xcb\x4b\xe3\x69\xff\x23\xe3\xee\x9e\xa3\xe6\xf7\xee\xa4\x49\x75\xf8\x1b\x54\x05\xa1\x03\xd3\x8f\xc6\xbd\x27\xec\x74\xe8\xb1\x30\xe8\xbd\xb3\x64\x80\x18\x56\x3a\xf5\xf9\xd5\x41\xf8\xef\x00\x00\x00\xff\xff\xc3\x25\x66\x8c\xe1\x2a\x00\x00")

func out_go_tpl() ([]byte, error) {
	return bindata_read(
		_out_go_tpl,
		"out.go.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"out.go.tpl": out_go_tpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"out.go.tpl": &_bintree_t{out_go_tpl, map[string]*_bintree_t{
	}},
}}
