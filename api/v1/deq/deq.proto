syntax = "proto3";
package deq;

service DEQ {
  rpc Pub (PubRequest) returns (Event);
  rpc Sub (SubRequest) returns (stream Event);
  rpc Ack (AckRequest) returns (AckResponse);
  // rpc Get (GetRequest) returns (Event);
  // rpc Del (DelRequest) returns (Empty);
}

message Event {
  // Required.
  string id = 1;
  // Required.
  string topic = 2;

  bytes payload = 3;
  // int32 min_retries = 4;

  // State of the event for the channel it is recieved on. Output only.
  EventState state = 4;
}

enum EventState {
  UNSPECIFIED_STATE = 0;
  QUEUED = 1;
  DEQUEUED_OK = 2;
  DEQUEUED_ERROR = 3;
}

message PubRequest {
  // Required.
  Event event = 1;
  // If set, the request will not complete until the published event has been dequeued by this channel
  string await_channel = 2;
  // Miliseconds to await before timing out. 0 indicates server default.
  uint32 await_milliseconds = 3;
}

message SubRequest {
  // Required.
  string channel = 1;
  string topic = 2;
  string min_id = 3;
  string max_id = 4;
  bool follow = 5;
  int32 requeue_delay_miliseconds = 6;
}

message AckRequest {
  // Required.
  string channel = 1;
  // Required.
  string topic = 2;
  // Required.
  string event_id = 3;
  // Required.
  AckCode code = 4;
}

enum AckCode {
  UNSPECIFIED = 0;

  DEQUEUE_OK = 1;
  DEQUEUE_ERROR = 2;

  REQUEUE_CONSTANT = 3;
  REQUEUE_LINEAR = 4;
  REQUEUE_EXPONENTIAL = 5;

  RESET_TIMEOUT = 6;
}

message AckResponse {

}

message GetRequest {
  // Required.
  string event_id = 1;
  string channel = 2;
}

message DelRequest {
  string event_id = 1;
}

message Empty {}

message EventV0 {
  string id = 1;
  string key = 2;
  Any Payload = 3;
}

message Any {
  string type_url = 1;
  bytes value = 2;
}
