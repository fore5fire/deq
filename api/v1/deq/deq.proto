syntax = "proto3";
package deq;

service DEQ {
  rpc Pub (PubRequest) returns (Event);
  rpc Sub (SubRequest) returns (stream Event);
  rpc Ack (AckRequest) returns (AckResponse);
  rpc Get (GetRequest) returns (Event);
  rpc Del (DelRequest) returns (Empty);
}

message Event {
  // Unique identifier for the event. Use a deterministic id for
  // request idempotency.
  // Required.
  string id = 1;
  // Topic to which the event will be sent. Cannot contain the null character.
  // Required.
  string topic = 2;

  bytes payload = 3;
  // Time the event was created, represented as the number of nanoseconds
  // since the unix epoch.
  // Output only.
  sfixed64 create_time = 4;
  // The initial state of this event for existing channels. If not QUEUED, the event
  // will be created but not sent to subscribers of topic.
  EventState default_state = 5;
  // State of the event for the channel it is recieved on.
  // Output only.
  EventState state = 6;
  // Number of attempts to send the event on the channel it is recieved on.
  // Output only.
  int32 requeue_count = 7;
}

enum EventState {
  UNSPECIFIED_STATE = 0;
  QUEUED = 1;
  DEQUEUED_OK = 2;
  DEQUEUED_ERROR = 3;
}

message PubRequest {
  // Required.
  Event event = 1;
  // If set, the request will not complete until the published event has been dequeued by this channel.
  string await_channel = 2;
}

message SubRequest {
  // Required.
  string channel = 1;
  // The topic listen to. Only events with matching topic will be sent.
  string topic = 2;
  // // Events with id lexiographically less than min_id will not be sent.
  // string min_id = 3;
  // // Events with id lexiographically greater than max_id will not be sent.
  // string max_id = 4;
  // Deprecated. If true, equivelant to idle_timout_milliseconds = 1000.
  bool follow = 5;
  // If positive, the request will not complete until the channel is idle for the specified number of milliseconds.
  int32 idle_timeout_milliseconds = 7;
  // Number of milliseconds to wait before requeuing the event if it is not dequeued.
  // Defaults to 8000.
  int32 requeue_delay_milliseconds = 6;
}

message AckRequest {
  // Required.
  string channel = 1;
  // Required.
  string topic = 2;
  // Required.
  string event_id = 3;
  // Required.
  AckCode code = 4;
}

enum AckCode {
  UNSPECIFIED = 0;

  DEQUEUE_OK = 1;
  DEQUEUE_ERROR = 2;

  REQUEUE_CONSTANT = 3;
  REQUEUE_LINEAR = 4;
  REQUEUE_EXPONENTIAL = 5;

  RESET_TIMEOUT = 6;
}

message AckResponse {

}

message GetRequest {
  // Required.
  string event_id = 1;
  // Required.
  string topic = 2;
  // Required.
  string channel = 3;
}

message DelRequest {
  // Required.
  string event_id = 1;
  // Required.
  string topic = 2;
}

message Empty {}

message EventV0 {
  Any payload = 1;
  bytes id = 2;
  bytes key = 3;
}

message Any {
  string type_url = 1;
  bytes value = 2;
}
