syntax = "proto3";
package deq;

service DEQ {
  // Pub publishes an event on its topic.
  rpc Pub (PubRequest) returns (Event);
  // Sub subscribers to events on a topic and channel. All events are stored until deleted, so all
  // events with a default_state of QUEUED are queued on a new channel, even those published before
  // before the subscriber connected.
  rpc Sub (SubRequest) returns (stream Event);
  // Ack updates an event's processing state on a channel. See the definition of AckCode for
  // available functionality.
  rpc Ack (AckRequest) returns (AckResponse);
  // Get retrieves an event on a channel without modifying its status or place in the queue.
  rpc Get (GetRequest) returns (Event);
  // BatchGet retrieves multiple events on a channel without modifying their status or place in the
  // queue.
  rpc BatchGet (BatchGetRequest) returns (BatchGetResponse);
  // List retrieves a list of events on a channel, sorted by event id, without modifying their
  // status or place in the queue.
  rpc List (ListRequest) returns (ListResponse);
  // Del deletes an event. Currently unimplemented.
  rpc Del (DelRequest) returns (Empty);
  // Topics returns all topics for which an event has been published.
  rpc Topics (TopicsRequest) returns (TopicsResponse);
}

// Events wrap arbitrary data published on a particular topic and retrived on a particular channel.
// The same event retrieved on different channels may have a different state and requeue_count, as
// these fields are channel specific.
message Event {
  // The unique identifier for the event. Use a deterministic id for request idempotency.
  // Required.
  string id = 1;
  // Topic to which the event will be sent. Cannot contain the null character.
  // Required.
  string topic = 2;
  // The arbitrary data this event holds. The structure of payload is generally specified by its
  // topic.
  bytes payload = 3;
  // Time the event was created, represented as the number of nanoseconds since the unix epoch.
  // Defaults to the current time.
  sfixed64 create_time = 4;
  // Indexes of the event.
  repeated string indexes = 8;
  // The initial state of this event for existing channels. If not QUEUED, the event will be created
  // but not sent to subscribers of topic.
  State default_state = 5;
  // State of the event for the channel it is recieved on.
  // Output only.
  State state = 6;
  // Number of attempts to send the event on the channel it is recieved on.
  // Output only.
  int32 requeue_count = 7;

  enum State {
    UNSPECIFIED_STATE = 0;
    // QUEUED indicates the event is queued on the channel.
    QUEUED = 1;
    // OK indicates the event was processed successfully.
    OK = 2;
    // INTERNAL indicates the event was not processed successfully because of an internal error.
    INTERNAL = 4;
    // INVALID indicates the event was not processed successfully because it contains one or invalid
    // more invalid fields.
    INVALID = 5;

    // DEQUEUED_ERROR is a legacy event state. Use INTERNAL or INVALID instead.
    DEQUEUED_ERROR = 3;
  }
}

message PubRequest {
  // The event to publish.
  // Required.
  Event event = 1;
  // If set, the request will not complete until the published event has been dequeued by this
  // channel.
  string await_channel = 2;
}

message SubRequest {
  // The channel to subscribe to. Each time an event is queued, it is only sent to one subscriber
  // per channel.
  // Required.
  string channel = 1;
  // The topic listen to. Only events with matching topic will be sent.
  // Required.
  string topic = 2;
  // // Events with id lexiographically less than min_id will not be sent.
  // string min_id = 3;
  // // Events with id lexiographically greater than max_id will not be sent.
  // string max_id = 4;
  // Deprecated. If true, equivelant to idle_timout_milliseconds = 1000.
  bool follow = 5;
  // If positive, the request will not complete until the channel is idle for the specified number
  // of milliseconds.
  int32 idle_timeout_milliseconds = 7;
  // Number of milliseconds to wait before requeuing the event if it is not dequeued.
  // Defaults to 8000.
  int32 requeue_delay_milliseconds = 6;
}

message AckRequest {
  // The channel to update the event's status on.
  // Required.
  string channel = 1;
  // The topic of the event.
  // Required.
  string topic = 2;
  // The id of the event.
  // Required.
  string event_id = 3;
  // See the definition of AckCode for details.
  // Required.
  AckCode code = 4;
}

enum AckCode {
  // The default value for AckCode.
  UNSPECIFIED = 0;

  // Set the event's state to OK. This dequeues the event from the channel.
  OK = 1;
  // Set the event's state to INVALID. This dequeuess the event from the channel.
  INVALID = 7;
  // Set the event's state to INTERNAL. This dequeues the event from the channel.
  INTERNAL = 8;

  // Sets the event's state to QUEUED and requeues the event on the channel with an
  // exponential backoff.
  REQUEUE = 5;
  // Sets the event's state to QUEUED and requeues the event on the channel with a linear backoff.
  REQUEUE_LINEAR = 4;
  // Sets the event's state to QUEUED and requeues the event on the channel with no backoff.
  REQUEUE_CONSTANT = 3;

  // Reset the requeue timeout of the event.
  RESET_TIMEOUT = 6;

  // DEQUEUE_ERROR is a legacy option. Use INTERNAL or INVALID instead.
  //
  // Set the event's state to DEQUEUED_ERROR. This dequeues the event from the channel.
  DEQUEUE_ERROR = 2;
}

message AckResponse {

}

message GetRequest {
  // The ID or index of the event to get.
  // Required.
  string event = 1;
  // The topic of the event to get.
  // Required.
  string topic = 2;
  // The channel to get the event from.
  // Required.
  string channel = 3;
  // If await is true, the request will not respond until the event is published instead of
  // returning error code NOT_FOUND.
  bool await = 4;
  // If true, the event is looked up by index instead of ID. Cannot be true if await is true.
  bool use_index = 5;
}

message BatchGetRequest {
  // The IDs or indexes of the events to get.
  // Required.
  repeated string events = 1;
  // The topic of the events to get.
  // Required.
  string topic = 2;
  // The channel to get the events from.
  // Required.
  string channel = 3;
  // If true, the events are looked up by index instead of ID.
  bool use_index = 4;
}

message BatchGetResponse {
  map<string, Event> events = 1;
}

message ListRequest {
  // The topic of events to be listed.
  // Required.
  string topic = 1;
  // The channel that the events will be listed from.
  // Required.
  string channel = 2;
  // If specified, only events with ids lexigraphically greater than min_id will be sent.
  string min_id = 3;
  // If specified, only events with ids lexigraphically less than max_id will be sent.
  string max_id = 4;
  // If true, the list will be returned ordered by the event index instead of event IDs. Events can
  // be returned zero or multiple times based on the number of indexes they have specified.
  bool use_index = 7;
  // The maximum number of results to retrieve.
  // Defaults to 20.
  int32 page_size = 5;
  // By default, results are returned in lexigraphical order of event id. If reversed is true,
  // results will be sorted in reverse lexigraphical order of event id.
  bool reversed = 6;
}

message ListResponse {
  repeated Event events = 1;
}

message DelRequest {
  // Required. The id of the event to delete.
  string event_id = 1;
  // Required. The topic of the event to delete.
  string topic = 2;
}

message TopicsRequest {
  
}

message TopicsResponse {
  repeated string topics = 1;
}

message Empty {}

// EventV0 is used for upgrading from a V0 database, and should not be used by clients.
message EventV0 {
  Any payload = 1;
  bytes id = 2;
  bytes key = 3;
}

// Any is used for upgrading from a V0 database, and should not be used by clients.
message Any {
  string type_url = 1;
  bytes value = 2;
}
