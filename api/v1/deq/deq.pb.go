// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deq.proto

package deq

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AckCode int32

const (
	AckCode_UNSPECIFIED         AckCode = 0
	AckCode_DEQUEUE_PROCESSED   AckCode = 1
	AckCode_DEQUEUE_FAILED      AckCode = 2
	AckCode_REQUEUE_CONSTANT    AckCode = 3
	AckCode_REQUEUE_LINEAR      AckCode = 4
	AckCode_REQUEUE_EXPONENTIAL AckCode = 5
	AckCode_RESET_TIMEOUT       AckCode = 6
)

var AckCode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "DEQUEUE_PROCESSED",
	2: "DEQUEUE_FAILED",
	3: "REQUEUE_CONSTANT",
	4: "REQUEUE_LINEAR",
	5: "REQUEUE_EXPONENTIAL",
	6: "RESET_TIMEOUT",
}
var AckCode_value = map[string]int32{
	"UNSPECIFIED":         0,
	"DEQUEUE_PROCESSED":   1,
	"DEQUEUE_FAILED":      2,
	"REQUEUE_CONSTANT":    3,
	"REQUEUE_LINEAR":      4,
	"REQUEUE_EXPONENTIAL": 5,
	"RESET_TIMEOUT":       6,
}

func (x AckCode) String() string {
	return proto.EnumName(AckCode_name, int32(x))
}
func (AckCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_deq_05686054f47589ca, []int{0}
}

type Event struct {
	// Required.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required.
	TypeUrl              string   `protobuf:"bytes,2,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_deq_05686054f47589ca, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Event) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PubRequest struct {
	// Required.
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	// If set, the request will not complete until the published event has been dequeued by this channel
	AwaitChannel string `protobuf:"bytes,2,opt,name=await_channel,json=awaitChannel,proto3" json:"await_channel,omitempty"`
	// Miliseconds to await before timing out. 0 indicates server default.
	AwaitMilliseconds    uint32   `protobuf:"varint,3,opt,name=await_milliseconds,json=awaitMilliseconds,proto3" json:"await_milliseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubRequest) Reset()         { *m = PubRequest{} }
func (m *PubRequest) String() string { return proto.CompactTextString(m) }
func (*PubRequest) ProtoMessage()    {}
func (*PubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_deq_05686054f47589ca, []int{1}
}
func (m *PubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRequest.Merge(dst, src)
}
func (m *PubRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubRequest proto.InternalMessageInfo

func (m *PubRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PubRequest) GetAwaitChannel() string {
	if m != nil {
		return m.AwaitChannel
	}
	return ""
}

func (m *PubRequest) GetAwaitMilliseconds() uint32 {
	if m != nil {
		return m.AwaitMilliseconds
	}
	return 0
}

type SubRequest struct {
	// Required.
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TypeUrl              string   `protobuf:"bytes,2,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	MinId                string   `protobuf:"bytes,3,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	MaxId                string   `protobuf:"bytes,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Follow               bool     `protobuf:"varint,5,opt,name=follow,proto3" json:"follow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}
func (*SubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_deq_05686054f47589ca, []int{2}
}
func (m *SubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRequest.Merge(dst, src)
}
func (m *SubRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubRequest proto.InternalMessageInfo

func (m *SubRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SubRequest) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *SubRequest) GetMinId() string {
	if m != nil {
		return m.MinId
	}
	return ""
}

func (m *SubRequest) GetMaxId() string {
	if m != nil {
		return m.MaxId
	}
	return ""
}

func (m *SubRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

type AckRequest struct {
	// Required.
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Required.
	EventId []byte `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Required.
	Code                 AckCode  `protobuf:"varint,3,opt,name=code,proto3,enum=deq.AckCode" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_deq_05686054f47589ca, []int{3}
}
func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(dst, src)
}
func (m *AckRequest) XXX_Size() int {
	return m.Size()
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *AckRequest) GetEventId() []byte {
	if m != nil {
		return m.EventId
	}
	return nil
}

func (m *AckRequest) GetCode() AckCode {
	if m != nil {
		return m.Code
	}
	return AckCode_UNSPECIFIED
}

type AckResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_deq_05686054f47589ca, []int{4}
}
func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(dst, src)
}
func (m *AckResponse) XXX_Size() int {
	return m.Size()
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Event)(nil), "deq.Event")
	proto.RegisterType((*PubRequest)(nil), "deq.PubRequest")
	proto.RegisterType((*SubRequest)(nil), "deq.SubRequest")
	proto.RegisterType((*AckRequest)(nil), "deq.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "deq.AckResponse")
	proto.RegisterEnum("deq.AckCode", AckCode_name, AckCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DEQ service

type DEQClient interface {
	Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*Event, error)
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (DEQ_SubClient, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type dEQClient struct {
	cc *grpc.ClientConn
}

func NewDEQClient(cc *grpc.ClientConn) DEQClient {
	return &dEQClient{cc}
}

func (c *dEQClient) Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (DEQ_SubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DEQ_serviceDesc.Streams[0], "/deq.DEQ/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &dEQSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DEQ_SubClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type dEQSubClient struct {
	grpc.ClientStream
}

func (x *dEQSubClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dEQClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DEQ service

type DEQServer interface {
	Pub(context.Context, *PubRequest) (*Event, error)
	Sub(*SubRequest, DEQ_SubServer) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
}

func RegisterDEQServer(s *grpc.Server, srv DEQServer) {
	s.RegisterService(&_DEQ_serviceDesc, srv)
}

func _DEQ_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Pub(ctx, req.(*PubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DEQServer).Sub(m, &dEQSubServer{stream})
}

type DEQ_SubServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type dEQSubServer struct {
	grpc.ServerStream
}

func (x *dEQSubServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _DEQ_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DEQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deq.DEQ",
	HandlerType: (*DEQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub",
			Handler:    _DEQ_Pub_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _DEQ_Ack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _DEQ_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deq.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.TypeUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.TypeUrl)))
		i += copy(dAtA[i:], m.TypeUrl)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *PubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.Event.Size()))
		n1, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.AwaitChannel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.AwaitChannel)))
		i += copy(dAtA[i:], m.AwaitChannel)
	}
	if m.AwaitMilliseconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.AwaitMilliseconds))
	}
	return i, nil
}

func (m *SubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.TypeUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.TypeUrl)))
		i += copy(dAtA[i:], m.TypeUrl)
	}
	if len(m.MinId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.MinId)))
		i += copy(dAtA[i:], m.MinId)
	}
	if len(m.MaxId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.MaxId)))
		i += copy(dAtA[i:], m.MaxId)
	}
	if m.Follow {
		dAtA[i] = 0x28
		i++
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *AckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintDeq(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	return n
}

func (m *PubRequest) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.AwaitChannel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.AwaitMilliseconds != 0 {
		n += 1 + sovDeq(uint64(m.AwaitMilliseconds))
	}
	return n
}

func (m *SubRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.MinId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.MaxId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.Follow {
		n += 2
	}
	return n
}

func (m *AckRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovDeq(uint64(m.Code))
	}
	return n
}

func (m *AckResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovDeq(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeq(x uint64) (n int) {
	return sovDeq(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwaitChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitMilliseconds", wireType)
			}
			m.AwaitMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwaitMilliseconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = append(m.EventId[:0], dAtA[iNdEx:postIndex]...)
			if m.EventId == nil {
				m.EventId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AckCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeq(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeq
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeq
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeq(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeq = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeq   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("deq.proto", fileDescriptor_deq_05686054f47589ca) }

var fileDescriptor_deq_05686054f47589ca = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcb, 0x8e, 0xd3, 0x4c,
	0x10, 0x85, 0xa7, 0xe3, 0x5c, 0x26, 0x95, 0xcb, 0x74, 0xea, 0xff, 0x07, 0xcc, 0x2c, 0xa2, 0xc8,
	0xb0, 0x88, 0x90, 0x18, 0xa1, 0xf0, 0x04, 0x26, 0xe9, 0x91, 0x2c, 0x65, 0x9c, 0x4c, 0xdb, 0x91,
	0xd8, 0x45, 0x8e, 0xbb, 0x11, 0x56, 0x1c, 0x3b, 0x17, 0x87, 0x99, 0x6c, 0xd9, 0xb0, 0x65, 0xcf,
	0x0b, 0xb1, 0xe4, 0x11, 0x50, 0x78, 0x11, 0xe4, 0xb6, 0x4d, 0x66, 0x81, 0x10, 0xcb, 0xfa, 0xea,
	0xa8, 0x4e, 0xd5, 0x51, 0x37, 0xd4, 0x85, 0xdc, 0x5c, 0xaf, 0xb7, 0x71, 0x12, 0xa3, 0x26, 0xe4,
	0xc6, 0x18, 0x43, 0x85, 0x7d, 0x94, 0x51, 0x82, 0x6d, 0x28, 0x05, 0x42, 0x27, 0x3d, 0xd2, 0x6f,
	0xf2, 0x52, 0x20, 0xf0, 0x19, 0x9c, 0x27, 0x87, 0xb5, 0x9c, 0xef, 0xb7, 0xa1, 0x5e, 0xea, 0x91,
	0x7e, 0x9d, 0xd7, 0xd2, 0x7a, 0xb6, 0x0d, 0x51, 0x87, 0xda, 0xda, 0x3b, 0x84, 0xb1, 0x27, 0x74,
	0x4d, 0xe9, 0x8b, 0xd2, 0xf8, 0x44, 0x00, 0xa6, 0xfb, 0x05, 0x97, 0x9b, 0xbd, 0xdc, 0x25, 0xd8,
	0x83, 0x8a, 0x4c, 0x87, 0xab, 0xb1, 0x8d, 0x01, 0x5c, 0xa7, 0xe6, 0xca, 0x8e, 0x67, 0x0d, 0x7c,
	0x0e, 0x2d, 0xef, 0xde, 0x0b, 0x92, 0xb9, 0xff, 0xc1, 0x8b, 0x22, 0x59, 0x58, 0x35, 0x15, 0x1c,
	0x66, 0x0c, 0x5f, 0x01, 0x66, 0xa2, 0x55, 0x10, 0x86, 0xc1, 0x4e, 0xfa, 0x71, 0x24, 0x76, 0xca,
	0xba, 0xc5, 0x3b, 0xaa, 0x73, 0xfb, 0xa8, 0x61, 0x7c, 0x26, 0x00, 0xce, 0x69, 0x09, 0x1d, 0x6a,
	0xc5, 0x70, 0x92, 0xdd, 0x91, 0x97, 0x7f, 0x3b, 0xf1, 0x12, 0xaa, 0xab, 0x20, 0x9a, 0x07, 0xd9,
	0x85, 0x75, 0x5e, 0x59, 0x05, 0x91, 0x25, 0x14, 0xf6, 0x1e, 0x52, 0x5c, 0xce, 0xb1, 0xf7, 0x60,
	0x09, 0x7c, 0x02, 0xd5, 0xf7, 0x71, 0x18, 0xc6, 0xf7, 0x7a, 0xa5, 0x47, 0xfa, 0xe7, 0x3c, 0xaf,
	0x0c, 0x1f, 0xc0, 0xf4, 0x97, 0xff, 0xb4, 0x88, 0x8a, 0x23, 0x1d, 0x5c, 0xca, 0x12, 0x55, 0xb5,
	0x25, 0xb0, 0x07, 0x65, 0x3f, 0x16, 0x52, 0xad, 0xd1, 0x1e, 0x34, 0x55, 0x82, 0xa6, 0xbf, 0x1c,
	0xc6, 0x42, 0x72, 0xd5, 0x31, 0x5a, 0xd0, 0x50, 0x26, 0xbb, 0x75, 0x1c, 0xed, 0xe4, 0xcb, 0xaf,
	0x04, 0x6a, 0xb9, 0x00, 0x2f, 0xa0, 0x31, 0xb3, 0x9d, 0x29, 0x1b, 0x5a, 0x37, 0x16, 0x1b, 0xd1,
	0x33, 0xbc, 0x84, 0xce, 0x88, 0xdd, 0xcd, 0xd8, 0x8c, 0xcd, 0xa7, 0x7c, 0x32, 0x64, 0x8e, 0xc3,
	0x46, 0x94, 0x20, 0x42, 0xbb, 0xc0, 0x37, 0xa6, 0x35, 0x66, 0x23, 0x5a, 0xc2, 0xff, 0x81, 0xf2,
	0x9c, 0x0d, 0x27, 0xb6, 0xe3, 0x9a, 0xb6, 0x4b, 0xb5, 0x54, 0x59, 0xd0, 0xb1, 0x65, 0x33, 0x93,
	0xd3, 0x32, 0x3e, 0x85, 0xff, 0x0a, 0xc6, 0xde, 0x4d, 0x27, 0x36, 0xb3, 0x5d, 0xcb, 0x1c, 0xd3,
	0x0a, 0x76, 0xa0, 0xc5, 0x99, 0xc3, 0xdc, 0xb9, 0x6b, 0xdd, 0xb2, 0xc9, 0xcc, 0xa5, 0xd5, 0xc1,
	0x01, 0xb4, 0x11, 0xbb, 0x43, 0x03, 0xb4, 0xe9, 0x7e, 0x81, 0x17, 0xea, 0x9c, 0xd3, 0x83, 0xb9,
	0x7a, 0xf4, 0x42, 0xf0, 0x05, 0x68, 0xce, 0x6f, 0x8d, 0xf3, 0x47, 0xcd, 0x6b, 0x82, 0x7d, 0xd0,
	0x4c, 0x7f, 0x99, 0xab, 0x4e, 0x61, 0x5f, 0xd1, 0x13, 0xc8, 0x82, 0x79, 0x4b, 0xbf, 0x1d, 0xbb,
	0xe4, 0xfb, 0xb1, 0x4b, 0x7e, 0x1c, 0xbb, 0xe4, 0xcb, 0xcf, 0xee, 0xd9, 0xa2, 0xaa, 0xfe, 0xc1,
	0x9b, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x13, 0x6e, 0x66, 0x14, 0x03, 0x00, 0x00,
}
