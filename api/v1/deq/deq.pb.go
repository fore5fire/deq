// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deq.proto

package deq

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EventState int32

const (
	EventState_UNSPECIFIED_STATE EventState = 0
	EventState_QUEUED            EventState = 1
	EventState_DEQUEUED_OK       EventState = 2
	EventState_DEQUEUED_ERROR    EventState = 3
)

var EventState_name = map[int32]string{
	0: "UNSPECIFIED_STATE",
	1: "QUEUED",
	2: "DEQUEUED_OK",
	3: "DEQUEUED_ERROR",
}

var EventState_value = map[string]int32{
	"UNSPECIFIED_STATE": 0,
	"QUEUED":            1,
	"DEQUEUED_OK":       2,
	"DEQUEUED_ERROR":    3,
}

func (x EventState) String() string {
	return proto.EnumName(EventState_name, int32(x))
}

func (EventState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{0}
}

type AckCode int32

const (
	AckCode_UNSPECIFIED AckCode = 0
	// Dequeue the event, acknowledging that it was processed successfully.
	AckCode_DEQUEUE_OK AckCode = 1
	// Dequeue the event, acknowledging that it was not processed successfully.
	AckCode_DEQUEUE_ERROR AckCode = 2
	// Requeue the event after a constant interval.
	AckCode_REQUEUE_CONSTANT AckCode = 3
	// Requeue the event after an interval that grows linearly with each requeue.
	AckCode_REQUEUE_LINEAR AckCode = 4
	// Requeue the event after an interval that grows exponentially with each requeue.
	AckCode_REQUEUE_EXPONENTIAL AckCode = 5
	// Reset the requeue timeout of the event.
	AckCode_RESET_TIMEOUT AckCode = 6
)

var AckCode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "DEQUEUE_OK",
	2: "DEQUEUE_ERROR",
	3: "REQUEUE_CONSTANT",
	4: "REQUEUE_LINEAR",
	5: "REQUEUE_EXPONENTIAL",
	6: "RESET_TIMEOUT",
}

var AckCode_value = map[string]int32{
	"UNSPECIFIED":         0,
	"DEQUEUE_OK":          1,
	"DEQUEUE_ERROR":       2,
	"REQUEUE_CONSTANT":    3,
	"REQUEUE_LINEAR":      4,
	"REQUEUE_EXPONENTIAL": 5,
	"RESET_TIMEOUT":       6,
}

func (x AckCode) String() string {
	return proto.EnumName(AckCode_name, int32(x))
}

func (AckCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{1}
}

// Events wrap arbitrary data published on a particular topic and retrived on a particular channel.
// The same event retrieved on different channels may have a different state and requeue_count, as
// these fields are channel specific.
type Event struct {
	// The unique identifier for the event. Use a deterministic id for request idempotency.
	// Required.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Topic to which the event will be sent. Cannot contain the null character.
	// Required.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The arbitrary data this event holds. The structure of payload is generally specified by its
	// topic.
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Time the event was created, represented as the number of nanoseconds since the unix epoch.
	// Defaults to the current time.
	CreateTime uint64 `protobuf:"fixed64,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The initial state of this event for existing channels. If not QUEUED, the event will be created
	// but not sent to subscribers of topic.
	DefaultState EventState `protobuf:"varint,5,opt,name=default_state,json=defaultState,proto3,enum=deq.EventState" json:"default_state,omitempty"`
	// State of the event for the channel it is recieved on.
	// Output only.
	State EventState `protobuf:"varint,6,opt,name=state,proto3,enum=deq.EventState" json:"state,omitempty"`
	// Number of attempts to send the event on the channel it is recieved on.
	// Output only.
	RequeueCount int32 `protobuf:"varint,7,opt,name=requeue_count,json=requeueCount,proto3" json:"requeue_count,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Event) GetDefaultState() EventState {
	if m != nil {
		return m.DefaultState
	}
	return EventState_UNSPECIFIED_STATE
}

func (m *Event) GetState() EventState {
	if m != nil {
		return m.State
	}
	return EventState_UNSPECIFIED_STATE
}

func (m *Event) GetRequeueCount() int32 {
	if m != nil {
		return m.RequeueCount
	}
	return 0
}

type PubRequest struct {
	// The event to publish.
	// Required.
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// If set, the request will not complete until the published event has been dequeued by this
	// channel.
	AwaitChannel string `protobuf:"bytes,2,opt,name=await_channel,json=awaitChannel,proto3" json:"await_channel,omitempty"`
}

func (m *PubRequest) Reset()         { *m = PubRequest{} }
func (m *PubRequest) String() string { return proto.CompactTextString(m) }
func (*PubRequest) ProtoMessage()    {}
func (*PubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{1}
}
func (m *PubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRequest.Merge(m, src)
}
func (m *PubRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubRequest proto.InternalMessageInfo

func (m *PubRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PubRequest) GetAwaitChannel() string {
	if m != nil {
		return m.AwaitChannel
	}
	return ""
}

type SubRequest struct {
	// The channel to subscribe to. Each time an event is queued, it is only sent to one subscriber
	// per channel.
	// Required.
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// The topic listen to. Only events with matching topic will be sent.
	// Required.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// // Events with id lexiographically less than min_id will not be sent.
	// string min_id = 3;
	// // Events with id lexiographically greater than max_id will not be sent.
	// string max_id = 4;
	// Deprecated. If true, equivelant to idle_timout_milliseconds = 1000.
	Follow bool `protobuf:"varint,5,opt,name=follow,proto3" json:"follow,omitempty"`
	// If positive, the request will not complete until the channel is idle for the specified number
	// of milliseconds.
	IdleTimeoutMilliseconds int32 `protobuf:"varint,7,opt,name=idle_timeout_milliseconds,json=idleTimeoutMilliseconds,proto3" json:"idle_timeout_milliseconds,omitempty"`
	// Number of milliseconds to wait before requeuing the event if it is not dequeued.
	// Defaults to 8000.
	RequeueDelayMilliseconds int32 `protobuf:"varint,6,opt,name=requeue_delay_milliseconds,json=requeueDelayMilliseconds,proto3" json:"requeue_delay_milliseconds,omitempty"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}
func (*SubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{2}
}
func (m *SubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRequest.Merge(m, src)
}
func (m *SubRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubRequest proto.InternalMessageInfo

func (m *SubRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SubRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *SubRequest) GetIdleTimeoutMilliseconds() int32 {
	if m != nil {
		return m.IdleTimeoutMilliseconds
	}
	return 0
}

func (m *SubRequest) GetRequeueDelayMilliseconds() int32 {
	if m != nil {
		return m.RequeueDelayMilliseconds
	}
	return 0
}

type AckRequest struct {
	// The channel to update the event's status on.
	// Required.
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// The topic of the event.
	// Required.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The id of the event.
	// Required.
	EventId string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// See the definition of AckCode for details.
	// Required.
	Code AckCode `protobuf:"varint,4,opt,name=code,proto3,enum=deq.AckCode" json:"code,omitempty"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{3}
}
func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(m, src)
}
func (m *AckRequest) XXX_Size() int {
	return m.Size()
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *AckRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *AckRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *AckRequest) GetCode() AckCode {
	if m != nil {
		return m.Code
	}
	return AckCode_UNSPECIFIED
}

type AckResponse struct {
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{4}
}
func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(m, src)
}
func (m *AckResponse) XXX_Size() int {
	return m.Size()
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

type GetRequest struct {
	// The id of the event to get.
	// Required.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The topic of the event to get.
	// Required.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The channel to get the event from.
	// Required.
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	// If await is true, the request will not respond until the
	// event is published instead of returning code NOT_FOUND.
	Await bool `protobuf:"varint,4,opt,name=await,proto3" json:"await,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{5}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *GetRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *GetRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *GetRequest) GetAwait() bool {
	if m != nil {
		return m.Await
	}
	return false
}

type ListRequest struct {
	// The topic of events to be listed.
	// Required.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// The channel that the events will be listed from.
	// Required.
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// If specified, only events with ids lexigraphically greater than min_id will be sent.
	MinId string `protobuf:"bytes,3,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	// If specified, only events with ids lexigraphically less than max_id will be sent.
	MaxId string `protobuf:"bytes,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	// The maximum number of results to retrieve.
	// Defaults to 20.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// By default, results are returned in lexigraphical order of event id. If reversed is true,
	// results will be sorted in reverse lexigraphical order of event id.
	Reversed bool `protobuf:"varint,6,opt,name=reversed,proto3" json:"reversed,omitempty"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{6}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ListRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ListRequest) GetMinId() string {
	if m != nil {
		return m.MinId
	}
	return ""
}

func (m *ListRequest) GetMaxId() string {
	if m != nil {
		return m.MaxId
	}
	return ""
}

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetReversed() bool {
	if m != nil {
		return m.Reversed
	}
	return false
}

type ListResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{7}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type DelRequest struct {
	// Required. The id of the event to delete.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Required. The topic of the event to delete.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *DelRequest) Reset()         { *m = DelRequest{} }
func (m *DelRequest) String() string { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()    {}
func (*DelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{8}
}
func (m *DelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelRequest.Merge(m, src)
}
func (m *DelRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelRequest proto.InternalMessageInfo

func (m *DelRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *DelRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type TopicsRequest struct {
}

func (m *TopicsRequest) Reset()         { *m = TopicsRequest{} }
func (m *TopicsRequest) String() string { return proto.CompactTextString(m) }
func (*TopicsRequest) ProtoMessage()    {}
func (*TopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{9}
}
func (m *TopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsRequest.Merge(m, src)
}
func (m *TopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsRequest proto.InternalMessageInfo

type TopicsResponse struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *TopicsResponse) Reset()         { *m = TopicsResponse{} }
func (m *TopicsResponse) String() string { return proto.CompactTextString(m) }
func (*TopicsResponse) ProtoMessage()    {}
func (*TopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{10}
}
func (m *TopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsResponse.Merge(m, src)
}
func (m *TopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsResponse proto.InternalMessageInfo

func (m *TopicsResponse) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{11}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// EventV0 is used for upgrading from a V0 database, and should not be used by clients.
type EventV0 struct {
	Payload *Any   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Id      []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *EventV0) Reset()         { *m = EventV0{} }
func (m *EventV0) String() string { return proto.CompactTextString(m) }
func (*EventV0) ProtoMessage()    {}
func (*EventV0) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{12}
}
func (m *EventV0) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventV0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventV0.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventV0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventV0.Merge(m, src)
}
func (m *EventV0) XXX_Size() int {
	return m.Size()
}
func (m *EventV0) XXX_DiscardUnknown() {
	xxx_messageInfo_EventV0.DiscardUnknown(m)
}

var xxx_messageInfo_EventV0 proto.InternalMessageInfo

func (m *EventV0) GetPayload() *Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EventV0) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EventV0) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// Any is used for upgrading from a V0 database, and should not be used by clients.
type Any struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Any) Reset()         { *m = Any{} }
func (m *Any) String() string { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()    {}
func (*Any) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc02b310faf1c402, []int{13}
}
func (m *Any) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Any) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Any.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Any) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Any.Merge(m, src)
}
func (m *Any) XXX_Size() int {
	return m.Size()
}
func (m *Any) XXX_DiscardUnknown() {
	xxx_messageInfo_Any.DiscardUnknown(m)
}

var xxx_messageInfo_Any proto.InternalMessageInfo

func (m *Any) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *Any) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("deq.EventState", EventState_name, EventState_value)
	proto.RegisterEnum("deq.AckCode", AckCode_name, AckCode_value)
	proto.RegisterType((*Event)(nil), "deq.Event")
	proto.RegisterType((*PubRequest)(nil), "deq.PubRequest")
	proto.RegisterType((*SubRequest)(nil), "deq.SubRequest")
	proto.RegisterType((*AckRequest)(nil), "deq.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "deq.AckResponse")
	proto.RegisterType((*GetRequest)(nil), "deq.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "deq.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "deq.ListResponse")
	proto.RegisterType((*DelRequest)(nil), "deq.DelRequest")
	proto.RegisterType((*TopicsRequest)(nil), "deq.TopicsRequest")
	proto.RegisterType((*TopicsResponse)(nil), "deq.TopicsResponse")
	proto.RegisterType((*Empty)(nil), "deq.Empty")
	proto.RegisterType((*EventV0)(nil), "deq.EventV0")
	proto.RegisterType((*Any)(nil), "deq.Any")
}

func init() { proto.RegisterFile("deq.proto", fileDescriptor_cc02b310faf1c402) }

var fileDescriptor_cc02b310faf1c402 = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x4e, 0xc7, 0xb1, 0x93, 0x54, 0x7e, 0xc6, 0xd3, 0xfb, 0xe7, 0x0d, 0x52, 0x88, 0x0c, 0x48,
	0xd1, 0x22, 0xad, 0x96, 0x80, 0x38, 0x20, 0x38, 0x84, 0xc4, 0xac, 0x22, 0x66, 0x93, 0xd9, 0xb6,
	0x83, 0xb8, 0x59, 0x1e, 0xbb, 0x17, 0xac, 0x38, 0x76, 0x26, 0xb6, 0x67, 0x37, 0xfb, 0x14, 0x48,
	0x3c, 0x01, 0x12, 0x0f, 0xc3, 0x09, 0xed, 0x91, 0x23, 0x9a, 0xb9, 0xf1, 0x14, 0xa8, 0x7f, 0x1c,
	0x27, 0xb0, 0x73, 0x99, 0x5b, 0xbe, 0xaf, 0xaa, 0xbe, 0xae, 0x2e, 0x7f, 0x5d, 0x81, 0x66, 0x40,
	0x2f, 0x9f, 0x6e, 0xb6, 0x49, 0x96, 0x60, 0x25, 0xa0, 0x97, 0xe6, 0x3f, 0x08, 0x54, 0xeb, 0x8a,
	0xc6, 0x19, 0xee, 0x42, 0x35, 0x0c, 0x0c, 0x34, 0x40, 0xc3, 0x26, 0xa9, 0x86, 0x01, 0xbe, 0x0f,
	0x6a, 0x96, 0x6c, 0x42, 0xdf, 0xa8, 0x72, 0x4a, 0x00, 0x6c, 0x40, 0x7d, 0xe3, 0xed, 0xa2, 0xc4,
	0x0b, 0x0c, 0x65, 0x80, 0x86, 0x6d, 0x52, 0x40, 0xfc, 0x21, 0xb4, 0xfc, 0x2d, 0xf5, 0x32, 0xea,
	0x66, 0xe1, 0x9a, 0x1a, 0xb5, 0x01, 0x1a, 0x6a, 0x04, 0x04, 0xe5, 0x84, 0x6b, 0x8a, 0xbf, 0x80,
	0x4e, 0x40, 0x5f, 0x79, 0x79, 0x94, 0xb9, 0x69, 0xe6, 0x65, 0xd4, 0x50, 0x07, 0x68, 0xd8, 0x1d,
	0x9d, 0x3c, 0x65, 0x2d, 0xf1, 0x1e, 0x6c, 0x46, 0x93, 0xb6, 0xcc, 0xe2, 0x08, 0x7f, 0x02, 0xaa,
	0xc8, 0xd6, 0xde, 0x9f, 0x2d, 0xa2, 0xf8, 0x23, 0xe8, 0x6c, 0xe9, 0x65, 0x4e, 0x73, 0xea, 0xfa,
	0x49, 0x1e, 0x67, 0x46, 0x7d, 0x80, 0x86, 0x2a, 0x69, 0x4b, 0x72, 0xc2, 0x38, 0xd3, 0x06, 0x38,
	0xcf, 0x2f, 0x08, 0xa3, 0xd2, 0x0c, 0x0f, 0x40, 0xa5, 0x4c, 0x87, 0xdf, 0xb9, 0x35, 0x82, 0x52,
	0x99, 0x88, 0x00, 0x13, 0xf5, 0x5e, 0x7b, 0x61, 0xe6, 0xfa, 0x3f, 0x7b, 0x71, 0x4c, 0x23, 0x39,
	0x8a, 0x36, 0x27, 0x27, 0x82, 0x33, 0xff, 0x44, 0x00, 0x76, 0xa9, 0x6a, 0x40, 0xbd, 0xc8, 0x16,
	0xb3, 0x2c, 0xe0, 0x2d, 0x03, 0x7d, 0x08, 0xda, 0xab, 0x24, 0x8a, 0x92, 0xd7, 0x7c, 0x1c, 0x0d,
	0x22, 0x11, 0xfe, 0x0a, 0x1e, 0x87, 0x41, 0x24, 0x86, 0x99, 0xe4, 0x99, 0xbb, 0x0e, 0xa3, 0x28,
	0x4c, 0xa9, 0x9f, 0xc4, 0x41, 0x2a, 0x2f, 0xf7, 0x88, 0x25, 0x38, 0x22, 0xfe, 0xe2, 0x20, 0x8c,
	0xbf, 0x86, 0x5e, 0x31, 0x8c, 0x80, 0x46, 0xde, 0xee, 0xb8, 0x58, 0xe3, 0xc5, 0x86, 0xcc, 0x98,
	0xb2, 0x84, 0xc3, 0x6a, 0x73, 0x07, 0x30, 0xf6, 0x57, 0x77, 0xbd, 0xcf, 0x63, 0x68, 0xf0, 0xe1,
	0xb9, 0xa1, 0x70, 0x48, 0x93, 0xd4, 0x39, 0x9e, 0x05, 0x78, 0x00, 0x35, 0x3f, 0x09, 0x84, 0x35,
	0xba, 0xa3, 0x36, 0x9f, 0xf7, 0xd8, 0x5f, 0x4d, 0x92, 0x80, 0x12, 0x1e, 0x31, 0x3b, 0xd0, 0xe2,
	0x47, 0xa7, 0x9b, 0x24, 0x4e, 0xa9, 0xb9, 0x06, 0x78, 0x4e, 0xb3, 0xa2, 0x93, 0x43, 0x65, 0x74,
	0xac, 0x7c, 0xab, 0x57, 0x8b, 0xd6, 0x95, 0xff, 0xb5, 0xce, 0xbf, 0x21, 0x6f, 0xa5, 0x41, 0x04,
	0x30, 0x7f, 0x47, 0xd0, 0x3a, 0x0b, 0xd3, 0xfd, 0x81, 0x7b, 0x55, 0x74, 0x8b, 0x6a, 0xf5, 0x58,
	0xf5, 0x01, 0x68, 0xeb, 0x30, 0x2e, 0x2f, 0xae, 0xae, 0xc3, 0x78, 0x16, 0x70, 0xda, 0x7b, 0xc3,
	0xe8, 0x9a, 0xa4, 0xbd, 0x37, 0xb3, 0x00, 0x7f, 0x00, 0xcd, 0x8d, 0xf7, 0x13, 0x75, 0xd3, 0xf0,
	0xad, 0x78, 0x0a, 0x2a, 0x69, 0x30, 0xc2, 0x0e, 0xdf, 0x52, 0xdc, 0x83, 0xc6, 0x96, 0x5e, 0xd1,
	0x6d, 0x4a, 0x03, 0xfe, 0xbd, 0x1a, 0x64, 0x8f, 0xcd, 0x11, 0xb4, 0x45, 0x97, 0x62, 0x4a, 0xd8,
	0x04, 0x8d, 0xcf, 0x21, 0x35, 0xd0, 0x40, 0xf9, 0x8f, 0x91, 0x65, 0xc4, 0xfc, 0x06, 0x60, 0x4a,
	0xa3, 0xbb, 0x4e, 0xd2, 0x3c, 0x81, 0x8e, 0xc3, 0x7e, 0xa4, 0x52, 0xc1, 0x1c, 0x42, 0xb7, 0x20,
	0x64, 0x17, 0x0f, 0x41, 0xe3, 0xb9, 0xa2, 0x8b, 0x26, 0x91, 0xc8, 0xac, 0x83, 0x6a, 0xad, 0x37,
	0xd9, 0xce, 0x5c, 0x40, 0x9d, 0xf7, 0xf4, 0xc3, 0x33, 0x6c, 0x96, 0x4b, 0x44, 0xbc, 0xbd, 0x86,
	0xf0, 0x42, 0xbc, 0x2b, 0xd7, 0x89, 0x58, 0x47, 0x55, 0xbe, 0x63, 0xd8, 0x3a, 0xd2, 0x41, 0x59,
	0xd1, 0x9d, 0x5c, 0x3a, 0xec, 0xa7, 0xf9, 0x25, 0x28, 0xe3, 0x78, 0xc7, 0x2e, 0x93, 0xed, 0x36,
	0xd4, 0xcd, 0xb7, 0x7b, 0x87, 0x32, 0xbc, 0xdc, 0xf2, 0xcf, 0x7c, 0xe5, 0x45, 0x39, 0x95, 0x32,
	0x02, 0x3c, 0x71, 0x00, 0xca, 0xfd, 0x81, 0x1f, 0xc0, 0xe9, 0x72, 0x6e, 0x9f, 0x5b, 0x93, 0xd9,
	0x77, 0x33, 0x6b, 0xea, 0xda, 0xce, 0xd8, 0xb1, 0xf4, 0x0a, 0x06, 0xd0, 0x5e, 0x2e, 0xad, 0xa5,
	0x35, 0xd5, 0x11, 0x3e, 0x81, 0xd6, 0xd4, 0x12, 0xc8, 0x5d, 0x7c, 0xaf, 0x57, 0x31, 0x86, 0xee,
	0x9e, 0xb0, 0x08, 0x59, 0x10, 0x5d, 0x79, 0xf2, 0x2b, 0x82, 0xba, 0x34, 0x33, 0x2b, 0x38, 0xd0,
	0xd4, 0x2b, 0xb8, 0x0b, 0x20, 0x0b, 0x98, 0x00, 0xc2, 0xa7, 0xd0, 0x29, 0xb0, 0xa8, 0xaf, 0xe2,
	0xfb, 0xa0, 0x13, 0x49, 0x4d, 0x16, 0x73, 0xdb, 0x19, 0xcf, 0x1d, 0x5d, 0x61, 0x27, 0x15, 0xec,
	0xd9, 0x6c, 0x6e, 0x8d, 0x89, 0x5e, 0xc3, 0x8f, 0xe0, 0x5e, 0xc1, 0x59, 0x3f, 0x9e, 0x2f, 0xe6,
	0xd6, 0xdc, 0x99, 0x8d, 0xcf, 0x74, 0x95, 0xa9, 0x12, 0xcb, 0xb6, 0x1c, 0xd7, 0x99, 0xbd, 0xb0,
	0x16, 0x4b, 0x47, 0xd7, 0x46, 0xbf, 0x55, 0x41, 0x99, 0x5a, 0x2f, 0xb1, 0x09, 0xca, 0x79, 0x7e,
	0x81, 0xc5, 0xf6, 0x2c, 0x77, 0x60, 0xef, 0xc0, 0x2b, 0xf8, 0x63, 0x50, 0xec, 0x7d, 0x8e, 0xfd,
	0xde, 0x9c, 0x67, 0x08, 0x0f, 0x41, 0x19, 0xfb, 0x2b, 0x99, 0x55, 0xee, 0x89, 0x9e, 0x5e, 0x12,
	0x7b, 0x5f, 0x2a, 0xcf, 0x69, 0x26, 0x33, 0xcb, 0x77, 0x7c, 0x74, 0xe6, 0xa7, 0x50, 0x63, 0x5e,
	0xc6, 0xa2, 0xfa, 0xe0, 0xf1, 0xf5, 0x4e, 0x0f, 0x98, 0x52, 0x70, 0x4a, 0x23, 0x29, 0x58, 0xda,
	0xb9, 0x10, 0x64, 0x2e, 0xc3, 0x9f, 0x81, 0x26, 0x8c, 0x89, 0x31, 0x67, 0x8f, 0x6c, 0xdb, 0xbb,
	0x77, 0xc4, 0x09, 0xd9, 0x6f, 0x8d, 0x3f, 0xae, 0xfb, 0xe8, 0xdd, 0x75, 0x1f, 0xfd, 0x7d, 0xdd,
	0x47, 0xbf, 0xdc, 0xf4, 0x2b, 0xef, 0x6e, 0xfa, 0x95, 0xbf, 0x6e, 0xfa, 0x95, 0x0b, 0x8d, 0xff,
	0x51, 0x7e, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0x16, 0x81, 0x40, 0x35, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DEQClient is the client API for DEQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DEQClient interface {
	// Pub publishes an event on its topic.
	Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*Event, error)
	// Sub subscribers to events on a topic and channel. All events are stored until deleted, so all
	// events with a default_state of QUEUED are queued on a new channel, even those published before
	// before the subscriber connected.
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (DEQ_SubClient, error)
	// Ack updates an event's processing state on a channel. See the definition of AckCode for
	// available functionality.
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	// Get retrieves an event on a channel without modifying its status or place in the queue.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Event, error)
	// List retrieves a list of events on a channel, sorted by event id, without modifying their
	// status or place in the queue.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Del deletes an event. Currently unimplemented.
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*Empty, error)
	// Topics returns all topics for which an event has been published.
	Topics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsResponse, error)
}

type dEQClient struct {
	cc *grpc.ClientConn
}

func NewDEQClient(cc *grpc.ClientConn) DEQClient {
	return &dEQClient{cc}
}

func (c *dEQClient) Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (DEQ_SubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DEQ_serviceDesc.Streams[0], "/deq.DEQ/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &dEQSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DEQ_SubClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type dEQSubClient struct {
	grpc.ClientStream
}

func (x *dEQSubClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dEQClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/deq.DEQ/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) Topics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsResponse, error) {
	out := new(TopicsResponse)
	err := c.cc.Invoke(ctx, "/deq.DEQ/Topics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DEQServer is the server API for DEQ service.
type DEQServer interface {
	// Pub publishes an event on its topic.
	Pub(context.Context, *PubRequest) (*Event, error)
	// Sub subscribers to events on a topic and channel. All events are stored until deleted, so all
	// events with a default_state of QUEUED are queued on a new channel, even those published before
	// before the subscriber connected.
	Sub(*SubRequest, DEQ_SubServer) error
	// Ack updates an event's processing state on a channel. See the definition of AckCode for
	// available functionality.
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	// Get retrieves an event on a channel without modifying its status or place in the queue.
	Get(context.Context, *GetRequest) (*Event, error)
	// List retrieves a list of events on a channel, sorted by event id, without modifying their
	// status or place in the queue.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Del deletes an event. Currently unimplemented.
	Del(context.Context, *DelRequest) (*Empty, error)
	// Topics returns all topics for which an event has been published.
	Topics(context.Context, *TopicsRequest) (*TopicsResponse, error)
}

func RegisterDEQServer(s *grpc.Server, srv DEQServer) {
	s.RegisterService(&_DEQ_serviceDesc, srv)
}

func _DEQ_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Pub(ctx, req.(*PubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DEQServer).Sub(m, &dEQSubServer{stream})
}

type DEQ_SubServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type dEQSubServer struct {
	grpc.ServerStream
}

func (x *dEQSubServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _DEQ_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_Topics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).Topics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/Topics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).Topics(ctx, req.(*TopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DEQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deq.DEQ",
	HandlerType: (*DEQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub",
			Handler:    _DEQ_Pub_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _DEQ_Ack_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DEQ_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DEQ_List_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _DEQ_Del_Handler,
		},
		{
			MethodName: "Topics",
			Handler:    _DEQ_Topics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _DEQ_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deq.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CreateTime))
		i += 8
	}
	if m.DefaultState != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.DefaultState))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.State))
	}
	if m.RequeueCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.RequeueCount))
	}
	return i, nil
}

func (m *PubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.Event.Size()))
		n1, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.AwaitChannel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.AwaitChannel)))
		i += copy(dAtA[i:], m.AwaitChannel)
	}
	return i, nil
}

func (m *SubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Follow {
		dAtA[i] = 0x28
		i++
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequeueDelayMilliseconds != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.RequeueDelayMilliseconds))
	}
	if m.IdleTimeoutMilliseconds != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.IdleTimeoutMilliseconds))
	}
	return i, nil
}

func (m *AckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.Code != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *AckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if m.Await {
		dAtA[i] = 0x20
		i++
		if m.Await {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.MinId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.MinId)))
		i += copy(dAtA[i:], m.MinId)
	}
	if len(m.MaxId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.MaxId)))
		i += copy(dAtA[i:], m.MaxId)
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.PageSize))
	}
	if m.Reversed {
		dAtA[i] = 0x30
		i++
		if m.Reversed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDeq(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	return i, nil
}

func (m *TopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EventV0) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventV0) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(m.Payload.Size()))
		n2, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TypeUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.TypeUrl)))
		i += copy(dAtA[i:], m.TypeUrl)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeq(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeVarintDeq(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 9
	}
	if m.DefaultState != 0 {
		n += 1 + sovDeq(uint64(m.DefaultState))
	}
	if m.State != 0 {
		n += 1 + sovDeq(uint64(m.State))
	}
	if m.RequeueCount != 0 {
		n += 1 + sovDeq(uint64(m.RequeueCount))
	}
	return n
}

func (m *PubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.AwaitChannel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	return n
}

func (m *SubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.Follow {
		n += 2
	}
	if m.RequeueDelayMilliseconds != 0 {
		n += 1 + sovDeq(uint64(m.RequeueDelayMilliseconds))
	}
	if m.IdleTimeoutMilliseconds != 0 {
		n += 1 + sovDeq(uint64(m.IdleTimeoutMilliseconds))
	}
	return n
}

func (m *AckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovDeq(uint64(m.Code))
	}
	return n
}

func (m *AckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.Await {
		n += 2
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.MinId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.MaxId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovDeq(uint64(m.PageSize))
	}
	if m.Reversed {
		n += 2
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovDeq(uint64(l))
		}
	}
	return n
}

func (m *DelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	return n
}

func (m *TopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovDeq(uint64(l))
		}
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventV0) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	return n
}

func (m *Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDeq(uint64(l))
	}
	return n
}

func sovDeq(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeq(x uint64) (n int) {
	return sovDeq(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultState", wireType)
			}
			m.DefaultState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultState |= EventState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= EventState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequeueCount", wireType)
			}
			m.RequeueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequeueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwaitChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequeueDelayMilliseconds", wireType)
			}
			m.RequeueDelayMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequeueDelayMilliseconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeoutMilliseconds", wireType)
			}
			m.IdleTimeoutMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeoutMilliseconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= AckCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Await", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Await = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reversed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reversed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventV0) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventV0: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventV0: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Any{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeq
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeq(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeq
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeq
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDeq
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeq
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeq(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDeq
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeq = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeq   = fmt.Errorf("proto: integer overflow")
)
