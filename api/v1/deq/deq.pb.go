// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deq.proto

/*
Package deq is a generated protocol buffer package.

It is generated from these files:
	deq.proto

It has these top-level messages:
	Channel
	Event
	CreateEventRequest
	EnsureChannelRequest
	GetChannelRequest
	StreamEventsRequest
	UpdateEventStatusRequest
	UpdateEventStatusResponse
	InsertEventsRequest
	InsertEventsResponse
*/
package deq

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_Status int32

const (
	Event_PENDING          Event_Status = 0
	Event_PROCESSED        Event_Status = 1
	Event_WILL_NOT_PROCESS Event_Status = 2
)

var Event_Status_name = map[int32]string{
	0: "PENDING",
	1: "PROCESSED",
	2: "WILL_NOT_PROCESS",
}
var Event_Status_value = map[string]int32{
	"PENDING":          0,
	"PROCESSED":        1,
	"WILL_NOT_PROCESS": 2,
}

func (x Event_Status) String() string {
	return proto.EnumName(Event_Status_name, int32(x))
}
func (Event_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Channel struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Event struct {
	Payload *google_protobuf.Any `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Id      []byte               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Key     []byte               `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Event) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CreateEventRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *CreateEventRequest) Reset()                    { *m = CreateEventRequest{} }
func (m *CreateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEventRequest) ProtoMessage()               {}
func (*CreateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateEventRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EnsureChannelRequest struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *EnsureChannelRequest) Reset()                    { *m = EnsureChannelRequest{} }
func (m *EnsureChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*EnsureChannelRequest) ProtoMessage()               {}
func (*EnsureChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EnsureChannelRequest) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type GetChannelRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetChannelRequest) Reset()                    { *m = GetChannelRequest{} }
func (m *GetChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChannelRequest) ProtoMessage()               {}
func (*GetChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetChannelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamEventsRequest struct {
	Channel                 string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Follow                  bool   `protobuf:"varint,2,opt,name=follow" json:"follow,omitempty"`
	RequeueDelayMiliseconds uint32 `protobuf:"varint,3,opt,name=requeue_delay_miliseconds,json=requeueDelayMiliseconds" json:"requeue_delay_miliseconds,omitempty"`
}

func (m *StreamEventsRequest) Reset()                    { *m = StreamEventsRequest{} }
func (m *StreamEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamEventsRequest) ProtoMessage()               {}
func (*StreamEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StreamEventsRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *StreamEventsRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *StreamEventsRequest) GetRequeueDelayMiliseconds() uint32 {
	if m != nil {
		return m.RequeueDelayMiliseconds
	}
	return 0
}

type UpdateEventStatusRequest struct {
	Channel     string       `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Key         []byte       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	EventStatus Event_Status `protobuf:"varint,3,opt,name=event_status,json=eventStatus,enum=deq.Event_Status" json:"event_status,omitempty"`
}

func (m *UpdateEventStatusRequest) Reset()                    { *m = UpdateEventStatusRequest{} }
func (m *UpdateEventStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventStatusRequest) ProtoMessage()               {}
func (*UpdateEventStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateEventStatusRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *UpdateEventStatusRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UpdateEventStatusRequest) GetEventStatus() Event_Status {
	if m != nil {
		return m.EventStatus
	}
	return Event_PENDING
}

type UpdateEventStatusResponse struct {
}

func (m *UpdateEventStatusResponse) Reset()                    { *m = UpdateEventStatusResponse{} }
func (m *UpdateEventStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventStatusResponse) ProtoMessage()               {}
func (*UpdateEventStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type InsertEventsRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *InsertEventsRequest) Reset()                    { *m = InsertEventsRequest{} }
func (m *InsertEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertEventsRequest) ProtoMessage()               {}
func (*InsertEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InsertEventsRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type InsertEventsResponse struct {
}

func (m *InsertEventsResponse) Reset()                    { *m = InsertEventsResponse{} }
func (m *InsertEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*InsertEventsResponse) ProtoMessage()               {}
func (*InsertEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*Channel)(nil), "deq.Channel")
	proto.RegisterType((*Event)(nil), "deq.Event")
	proto.RegisterType((*CreateEventRequest)(nil), "deq.CreateEventRequest")
	proto.RegisterType((*EnsureChannelRequest)(nil), "deq.EnsureChannelRequest")
	proto.RegisterType((*GetChannelRequest)(nil), "deq.GetChannelRequest")
	proto.RegisterType((*StreamEventsRequest)(nil), "deq.StreamEventsRequest")
	proto.RegisterType((*UpdateEventStatusRequest)(nil), "deq.UpdateEventStatusRequest")
	proto.RegisterType((*UpdateEventStatusResponse)(nil), "deq.UpdateEventStatusResponse")
	proto.RegisterType((*InsertEventsRequest)(nil), "deq.InsertEventsRequest")
	proto.RegisterType((*InsertEventsResponse)(nil), "deq.InsertEventsResponse")
	proto.RegisterEnum("deq.Event_Status", Event_Status_name, Event_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DEQ service

type DEQClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*Event, error)
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (DEQ_StreamEventsClient, error)
	UpdateEventStatus(ctx context.Context, in *UpdateEventStatusRequest, opts ...grpc.CallOption) (*UpdateEventStatusResponse, error)
	StreamingUpdateEventStatus(ctx context.Context, opts ...grpc.CallOption) (DEQ_StreamingUpdateEventStatusClient, error)
	// rpc ResetChannel (ResetChannelRequest) returns (ResetChannelResponse);
	InsertEvents(ctx context.Context, opts ...grpc.CallOption) (DEQ_InsertEventsClient, error)
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	EnsureChannel(ctx context.Context, in *EnsureChannelRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type dEQClient struct {
	cc *grpc.ClientConn
}

func NewDEQClient(cc *grpc.ClientConn) DEQClient {
	return &dEQClient{cc}
}

func (c *dEQClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/deq.DEQ/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (DEQ_StreamEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DEQ_serviceDesc.Streams[0], c.cc, "/deq.DEQ/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &dEQStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DEQ_StreamEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type dEQStreamEventsClient struct {
	grpc.ClientStream
}

func (x *dEQStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dEQClient) UpdateEventStatus(ctx context.Context, in *UpdateEventStatusRequest, opts ...grpc.CallOption) (*UpdateEventStatusResponse, error) {
	out := new(UpdateEventStatusResponse)
	err := grpc.Invoke(ctx, "/deq.DEQ/UpdateEventStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) StreamingUpdateEventStatus(ctx context.Context, opts ...grpc.CallOption) (DEQ_StreamingUpdateEventStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DEQ_serviceDesc.Streams[1], c.cc, "/deq.DEQ/StreamingUpdateEventStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &dEQStreamingUpdateEventStatusClient{stream}
	return x, nil
}

type DEQ_StreamingUpdateEventStatusClient interface {
	Send(*UpdateEventStatusRequest) error
	CloseAndRecv() (*UpdateEventStatusResponse, error)
	grpc.ClientStream
}

type dEQStreamingUpdateEventStatusClient struct {
	grpc.ClientStream
}

func (x *dEQStreamingUpdateEventStatusClient) Send(m *UpdateEventStatusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dEQStreamingUpdateEventStatusClient) CloseAndRecv() (*UpdateEventStatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateEventStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dEQClient) InsertEvents(ctx context.Context, opts ...grpc.CallOption) (DEQ_InsertEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DEQ_serviceDesc.Streams[2], c.cc, "/deq.DEQ/InsertEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &dEQInsertEventsClient{stream}
	return x, nil
}

type DEQ_InsertEventsClient interface {
	Send(*InsertEventsRequest) error
	CloseAndRecv() (*InsertEventsResponse, error)
	grpc.ClientStream
}

type dEQInsertEventsClient struct {
	grpc.ClientStream
}

func (x *dEQInsertEventsClient) Send(m *InsertEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dEQInsertEventsClient) CloseAndRecv() (*InsertEventsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InsertEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dEQClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := grpc.Invoke(ctx, "/deq.DEQ/GetChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEQClient) EnsureChannel(ctx context.Context, in *EnsureChannelRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/deq.DEQ/EnsureChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DEQ service

type DEQServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*Event, error)
	StreamEvents(*StreamEventsRequest, DEQ_StreamEventsServer) error
	UpdateEventStatus(context.Context, *UpdateEventStatusRequest) (*UpdateEventStatusResponse, error)
	StreamingUpdateEventStatus(DEQ_StreamingUpdateEventStatusServer) error
	// rpc ResetChannel (ResetChannelRequest) returns (ResetChannelResponse);
	InsertEvents(DEQ_InsertEventsServer) error
	GetChannel(context.Context, *GetChannelRequest) (*Channel, error)
	EnsureChannel(context.Context, *EnsureChannelRequest) (*google_protobuf1.Empty, error)
}

func RegisterDEQServer(s *grpc.Server, srv DEQServer) {
	s.RegisterService(&_DEQ_serviceDesc, srv)
}

func _DEQ_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DEQServer).StreamEvents(m, &dEQStreamEventsServer{stream})
}

type DEQ_StreamEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type dEQStreamEventsServer struct {
	grpc.ServerStream
}

func (x *dEQStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _DEQ_UpdateEventStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).UpdateEventStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/UpdateEventStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).UpdateEventStatus(ctx, req.(*UpdateEventStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_StreamingUpdateEventStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DEQServer).StreamingUpdateEventStatus(&dEQStreamingUpdateEventStatusServer{stream})
}

type DEQ_StreamingUpdateEventStatusServer interface {
	SendAndClose(*UpdateEventStatusResponse) error
	Recv() (*UpdateEventStatusRequest, error)
	grpc.ServerStream
}

type dEQStreamingUpdateEventStatusServer struct {
	grpc.ServerStream
}

func (x *dEQStreamingUpdateEventStatusServer) SendAndClose(m *UpdateEventStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dEQStreamingUpdateEventStatusServer) Recv() (*UpdateEventStatusRequest, error) {
	m := new(UpdateEventStatusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DEQ_InsertEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DEQServer).InsertEvents(&dEQInsertEventsServer{stream})
}

type DEQ_InsertEventsServer interface {
	SendAndClose(*InsertEventsResponse) error
	Recv() (*InsertEventsRequest, error)
	grpc.ServerStream
}

type dEQInsertEventsServer struct {
	grpc.ServerStream
}

func (x *dEQInsertEventsServer) SendAndClose(m *InsertEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dEQInsertEventsServer) Recv() (*InsertEventsRequest, error) {
	m := new(InsertEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DEQ_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEQ_EnsureChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEQServer).EnsureChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deq.DEQ/EnsureChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEQServer).EnsureChannel(ctx, req.(*EnsureChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DEQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deq.DEQ",
	HandlerType: (*DEQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _DEQ_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEventStatus",
			Handler:    _DEQ_UpdateEventStatus_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _DEQ_GetChannel_Handler,
		},
		{
			MethodName: "EnsureChannel",
			Handler:    _DEQ_EnsureChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _DEQ_StreamEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingUpdateEventStatus",
			Handler:       _DEQ_StreamingUpdateEventStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "InsertEvents",
			Handler:       _DEQ_InsertEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deq.proto",
}

func init() { proto.RegisterFile("deq.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0xad, 0xa1, 0x81, 0x32, 0x40, 0x04, 0x13, 0x44, 0x8c, 0xa3, 0x54, 0xc8, 0x87, 0x96, 0x93,
	0x53, 0xd1, 0x2a, 0x95, 0x72, 0xa8, 0xd4, 0x82, 0x15, 0x21, 0xa5, 0x24, 0x35, 0xad, 0x7a, 0xaa,
	0x90, 0x13, 0x4f, 0x28, 0xaa, 0x59, 0x83, 0xbd, 0xb4, 0x42, 0xea, 0xad, 0xdf, 0xd0, 0x2f, 0xec,
	0x8f, 0x54, 0xde, 0x5d, 0x03, 0x0e, 0x8e, 0x72, 0xc9, 0xcd, 0x3b, 0xef, 0xcd, 0x9b, 0x9d, 0x37,
	0x9e, 0x85, 0x92, 0x47, 0x0b, 0x6b, 0x1e, 0x06, 0x3c, 0xc0, 0xbc, 0x47, 0x0b, 0xa3, 0x35, 0x09,
	0x82, 0x89, 0x4f, 0x27, 0x22, 0x74, 0xbd, 0xbc, 0x3d, 0x71, 0xd9, 0x4a, 0xe2, 0xc6, 0xd1, 0x5d,
	0x88, 0x66, 0x73, 0xae, 0x40, 0xf3, 0x18, 0x8a, 0xbd, 0xef, 0x2e, 0x63, 0xe4, 0x23, 0xc2, 0x53,
	0xe6, 0xce, 0x48, 0xd7, 0xda, 0x5a, 0xa7, 0xe4, 0x88, 0x6f, 0xf3, 0xaf, 0x06, 0x7b, 0xf6, 0x4f,
	0x62, 0x1c, 0x2d, 0x28, 0xce, 0xdd, 0x95, 0x1f, 0xb8, 0x9e, 0x20, 0x94, 0xbb, 0x0d, 0x4b, 0xea,
	0x5a, 0x89, 0xae, 0xf5, 0x9e, 0xad, 0x9c, 0x84, 0x84, 0xfb, 0x90, 0x9b, 0x7a, 0x7a, 0xae, 0xad,
	0x75, 0x2a, 0x4e, 0x6e, 0xea, 0x61, 0x0d, 0xf2, 0x3f, 0x68, 0xa5, 0xe7, 0x45, 0x20, 0xfe, 0x34,
	0xcf, 0xa0, 0x30, 0xe2, 0x2e, 0x5f, 0x46, 0x58, 0x86, 0xe2, 0x95, 0x3d, 0xec, 0x0f, 0x86, 0xe7,
	0xb5, 0x27, 0x58, 0x85, 0xd2, 0x95, 0x73, 0xd9, 0xb3, 0x47, 0x23, 0xbb, 0x5f, 0xd3, 0xb0, 0x01,
	0xb5, 0xaf, 0x83, 0x8b, 0x8b, 0xf1, 0xf0, 0xf2, 0xf3, 0x58, 0xc5, 0x6b, 0x39, 0xf3, 0x14, 0xb0,
	0x17, 0x92, 0xcb, 0x49, 0x5c, 0xce, 0xa1, 0xc5, 0x92, 0x22, 0x8e, 0x6d, 0xd8, 0xa3, 0xf8, 0xac,
	0x6e, 0x08, 0x56, 0x6c, 0x92, 0x64, 0x48, 0xc0, 0x7c, 0x07, 0x0d, 0x9b, 0x45, 0xcb, 0x90, 0x54,
	0xd3, 0x49, 0xe6, 0x0b, 0x28, 0xde, 0xc8, 0x88, 0xca, 0xad, 0x88, 0xdc, 0x84, 0x95, 0x80, 0xe6,
	0x4b, 0xa8, 0x9f, 0x13, 0xbf, 0x93, 0x9c, 0x65, 0xdc, 0x1f, 0x0d, 0x0e, 0x46, 0x3c, 0x24, 0x77,
	0x26, 0xea, 0x47, 0x09, 0x57, 0x4f, 0x17, 0x2a, 0xad, 0xa5, 0xb1, 0x09, 0x85, 0xdb, 0xc0, 0xf7,
	0x83, 0x5f, 0xc2, 0xb4, 0x67, 0x8e, 0x3a, 0xe1, 0x19, 0xb4, 0xc2, 0x38, 0x79, 0x49, 0x63, 0x8f,
	0x7c, 0x77, 0x35, 0x9e, 0x4d, 0xfd, 0x69, 0x44, 0x37, 0x01, 0xf3, 0x22, 0x61, 0x67, 0xd5, 0x39,
	0x54, 0x84, 0x7e, 0x8c, 0x7f, 0xdc, 0xc0, 0xe6, 0x6f, 0xd0, 0xbf, 0xcc, 0xbd, 0xc4, 0x26, 0xe9,
	0xf6, 0xc3, 0x37, 0x51, 0xa3, 0xca, 0xad, 0x47, 0x85, 0x6f, 0xa0, 0x22, 0xfc, 0x1b, 0x47, 0x42,
	0x42, 0x94, 0xdd, 0xef, 0xd6, 0x37, 0xfe, 0x5a, 0x4a, 0xbb, 0x4c, 0x9b, 0x42, 0xe6, 0x11, 0xb4,
	0x32, 0xaa, 0x47, 0xf3, 0x80, 0x45, 0x64, 0xbe, 0x85, 0x83, 0x01, 0x8b, 0x28, 0xe4, 0x69, 0x7f,
	0x1e, 0x1e, 0x61, 0x13, 0x1a, 0xe9, 0x44, 0x29, 0xd8, 0xfd, 0x97, 0x87, 0x7c, 0xdf, 0xfe, 0x84,
	0x5d, 0x28, 0x6f, 0xfd, 0x1a, 0x78, 0x28, 0x07, 0xb9, 0xf3, 0xb3, 0x18, 0x5b, 0xd2, 0x78, 0x0a,
	0x95, 0xed, 0x61, 0xa1, 0x2e, 0xb0, 0x8c, 0xf9, 0x6d, 0x67, 0xbd, 0xd2, 0xd0, 0x81, 0xfa, 0x4e,
	0x87, 0x78, 0x2c, 0x28, 0xf7, 0xf9, 0x6e, 0x3c, 0xbf, 0x0f, 0x96, 0x7d, 0xe0, 0x37, 0x30, 0x64,
	0xe1, 0x29, 0x9b, 0x3c, 0xb6, 0x78, 0x47, 0x43, 0x1b, 0x2a, 0xdb, 0xf6, 0xa9, 0x56, 0x33, 0x46,
	0x61, 0xb4, 0x32, 0x90, 0xb5, 0x4c, 0x17, 0x60, 0xb3, 0x08, 0xd8, 0x14, 0xd4, 0x9d, 0xcd, 0x30,
	0x52, 0x5b, 0x84, 0x1f, 0xa0, 0x9a, 0x5a, 0x3e, 0x94, 0x15, 0xb2, 0x16, 0xd2, 0x68, 0xee, 0xbc,
	0x2e, 0x76, 0xfc, 0x6a, 0x5d, 0x17, 0xc4, 0xf9, 0xf5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2,
	0x91, 0x8f, 0x32, 0x00, 0x05, 0x00, 0x00,
}
