// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data.proto

package data

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EventState int32

const (
	EventState_UNSPECIFIED_STATE EventState = 0
	EventState_QUEUED            EventState = 1
	EventState_DEQUEUED_OK       EventState = 2
	EventState_DEQUEUED_ERROR    EventState = 3
)

var EventState_name = map[int32]string{
	0: "UNSPECIFIED_STATE",
	1: "QUEUED",
	2: "DEQUEUED_OK",
	3: "DEQUEUED_ERROR",
}
var EventState_value = map[string]int32{
	"UNSPECIFIED_STATE": 0,
	"QUEUED":            1,
	"DEQUEUED_OK":       2,
	"DEQUEUED_ERROR":    3,
}

func (x EventState) String() string {
	return proto.EnumName(EventState_name, int32(x))
}
func (EventState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_data_5b151b5d7d199439, []int{0}
}

type ChannelPayload struct {
	EventState           EventState `protobuf:"varint,1,opt,name=event_state,json=eventState,proto3,enum=EventState" json:"event_state,omitempty"`
	RequeueCount         int32      `protobuf:"varint,2,opt,name=requeue_count,json=requeueCount,proto3" json:"requeue_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ChannelPayload) Reset()         { *m = ChannelPayload{} }
func (m *ChannelPayload) String() string { return proto.CompactTextString(m) }
func (*ChannelPayload) ProtoMessage()    {}
func (*ChannelPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_5b151b5d7d199439, []int{0}
}
func (m *ChannelPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelPayload.Merge(dst, src)
}
func (m *ChannelPayload) XXX_Size() int {
	return m.Size()
}
func (m *ChannelPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelPayload proto.InternalMessageInfo

func (m *ChannelPayload) GetEventState() EventState {
	if m != nil {
		return m.EventState
	}
	return EventState_UNSPECIFIED_STATE
}

func (m *ChannelPayload) GetRequeueCount() int32 {
	if m != nil {
		return m.RequeueCount
	}
	return 0
}

type EventTimePayload struct {
	CreateTime           int64    `protobuf:"fixed64,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTimePayload) Reset()         { *m = EventTimePayload{} }
func (m *EventTimePayload) String() string { return proto.CompactTextString(m) }
func (*EventTimePayload) ProtoMessage()    {}
func (*EventTimePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_5b151b5d7d199439, []int{1}
}
func (m *EventTimePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTimePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTimePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventTimePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTimePayload.Merge(dst, src)
}
func (m *EventTimePayload) XXX_Size() int {
	return m.Size()
}
func (m *EventTimePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTimePayload.DiscardUnknown(m)
}

var xxx_messageInfo_EventTimePayload proto.InternalMessageInfo

func (m *EventTimePayload) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type EventPayload struct {
	Payload              []byte     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	DefaultEventState    EventState `protobuf:"varint,2,opt,name=default_event_state,json=defaultEventState,proto3,enum=EventState" json:"default_event_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EventPayload) Reset()         { *m = EventPayload{} }
func (m *EventPayload) String() string { return proto.CompactTextString(m) }
func (*EventPayload) ProtoMessage()    {}
func (*EventPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_5b151b5d7d199439, []int{2}
}
func (m *EventPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPayload.Merge(dst, src)
}
func (m *EventPayload) XXX_Size() int {
	return m.Size()
}
func (m *EventPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPayload.DiscardUnknown(m)
}

var xxx_messageInfo_EventPayload proto.InternalMessageInfo

func (m *EventPayload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EventPayload) GetDefaultEventState() EventState {
	if m != nil {
		return m.DefaultEventState
	}
	return EventState_UNSPECIFIED_STATE
}

func init() {
	proto.RegisterType((*ChannelPayload)(nil), "ChannelPayload")
	proto.RegisterType((*EventTimePayload)(nil), "EventTimePayload")
	proto.RegisterType((*EventPayload)(nil), "EventPayload")
	proto.RegisterEnum("EventState", EventState_name, EventState_value)
}
func (m *ChannelPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.EventState))
	}
	if m.RequeueCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.RequeueCount))
	}
	return i, nil
}

func (m *EventTimePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTimePayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CreateTime))
		i += 8
	}
	return i, nil
}

func (m *EventPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.DefaultEventState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.DefaultEventState))
	}
	return i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChannelPayload) Size() (n int) {
	var l int
	_ = l
	if m.EventState != 0 {
		n += 1 + sovData(uint64(m.EventState))
	}
	if m.RequeueCount != 0 {
		n += 1 + sovData(uint64(m.RequeueCount))
	}
	return n
}

func (m *EventTimePayload) Size() (n int) {
	var l int
	_ = l
	if m.CreateTime != 0 {
		n += 9
	}
	return n
}

func (m *EventPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.DefaultEventState != 0 {
		n += 1 + sovData(uint64(m.DefaultEventState))
	}
	return n
}

func sovData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventState", wireType)
			}
			m.EventState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventState |= (EventState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequeueCount", wireType)
			}
			m.RequeueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequeueCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTimePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTimePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTimePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultEventState", wireType)
			}
			m.DefaultEventState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultEventState |= (EventState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("data.proto", fileDescriptor_data_5b151b5d7d199439) }

var fileDescriptor_data_5b151b5d7d199439 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x18, 0x84, 0xbb, 0x15, 0x2b, 0xfc, 0x89, 0x71, 0xbb, 0x22, 0xe4, 0x14, 0x4b, 0xbc, 0x14, 0x91,
	0x1e, 0xec, 0xd1, 0x93, 0x26, 0x2b, 0x14, 0xc1, 0xd6, 0x4d, 0x72, 0x5e, 0xd6, 0xe4, 0x17, 0x0b,
	0x69, 0x52, 0xe3, 0x46, 0xf0, 0x2d, 0x7c, 0x2c, 0x8f, 0x3e, 0x82, 0xc4, 0x17, 0x91, 0x24, 0x4d,
	0x2b, 0x78, 0xfb, 0xe7, 0x63, 0x86, 0x19, 0x7e, 0x80, 0x44, 0x69, 0x35, 0x59, 0x17, 0xb9, 0xce,
	0xdd, 0x18, 0x2c, 0xef, 0x59, 0x65, 0x19, 0xa6, 0x0b, 0xf5, 0x9e, 0xe6, 0x2a, 0x61, 0x17, 0x60,
	0xe0, 0x1b, 0x66, 0x5a, 0xbe, 0x6a, 0xa5, 0xd1, 0x26, 0x23, 0x32, 0xb6, 0x2e, 0x8d, 0x09, 0xaf,
	0x59, 0x50, 0x23, 0x01, 0xb8, 0xbd, 0xd9, 0x19, 0x1c, 0x16, 0xf8, 0x52, 0x62, 0x89, 0x32, 0xce,
	0xcb, 0x4c, 0xdb, 0xfd, 0x11, 0x19, 0xef, 0x0b, 0x73, 0x03, 0xbd, 0x9a, 0xb9, 0x53, 0xa0, 0x4d,
	0x3c, 0x5c, 0xae, 0xb0, 0xab, 0x39, 0x05, 0x23, 0x2e, 0x50, 0x69, 0x94, 0x7a, 0xb9, 0x6a, 0x6b,
	0xa8, 0x80, 0x16, 0xd5, 0x3e, 0x17, 0xc1, 0x6c, 0x42, 0x5d, 0xc0, 0x86, 0x83, 0x75, 0x7b, 0x36,
	0x66, 0x53, 0x74, 0x92, 0x5d, 0xc1, 0x71, 0x82, 0x4f, 0xaa, 0x4c, 0xb5, 0xfc, 0xbb, 0xbc, 0xff,
	0x7f, 0xf9, 0x70, 0xe3, 0xdb, 0xa1, 0xf3, 0x10, 0x60, 0xa7, 0xd8, 0x09, 0x0c, 0xa3, 0xfb, 0x60,
	0xc1, 0xbd, 0xd9, 0xed, 0x8c, 0xfb, 0x32, 0x08, 0xaf, 0x43, 0x4e, 0x7b, 0x0c, 0x60, 0xf0, 0x10,
	0xf1, 0x88, 0xfb, 0x94, 0xb0, 0x23, 0x30, 0x7c, 0xde, 0x2a, 0x39, 0xbf, 0xa3, 0x7d, 0xc6, 0xc0,
	0xda, 0x02, 0x2e, 0xc4, 0x5c, 0xd0, 0xbd, 0x1b, 0xfa, 0x59, 0x39, 0xe4, 0xab, 0x72, 0xc8, 0x77,
	0xe5, 0x90, 0x8f, 0x1f, 0xa7, 0xf7, 0x38, 0x68, 0xfe, 0x3d, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x08, 0x06, 0x05, 0xfd, 0x7d, 0x01, 0x00, 0x00,
}
